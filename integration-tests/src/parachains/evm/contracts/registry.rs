use super::*;

lazy_static! {
    pub(crate) static ref REGISTRY_CONTRACT_ADDRESS: Address =
        address_of("c01ee7f10ea4af4673cfff62710e1d7792aba8f3");
}

// bytecode:object value from ParachainRegistry.json, generated by forge build
const CONTRACT_BYTECODE: [u8; 4342] = {
    with_builtin!(let $hex_str = include_str_from_root!("contracts/ParachainRegistry.hex") in {
        hex!($hex_str)
    })
};

pub(crate) fn deploy() {
    // create parachain registry contract
    assert_ok!(EVM::create(
        RuntimeOrigin::root(),
        *ALITH,
        CONTRACT_BYTECODE.into(),
        U256::zero(),
        GAS_LIMIT,
        MAX_FEE_PER_GAS.into(),
        None,
        None,
        Vec::new()
    ));
    System::assert_last_event(
        pallet_evm::Event::Created {
            address: *REGISTRY_CONTRACT_ADDRESS,
        }
        .into(),
    );
}

pub(crate) fn assert_executed(caller: Address) {
    assert!(System::events().iter().any(|r| {
        match &r.event {
            RuntimeEvent::Ethereum(pallet_ethereum::Event::Executed {
                from,
                to,
                exit_reason,
                ..
            }) if *from == caller
                && *to == *REGISTRY_CONTRACT_ADDRESS
                && *exit_reason == Succeed(Stopped) =>
            {
                true
            }
            _ => false,
        }
    }));
}

pub(crate) fn assert_parachain_registered_event(para_id: impl Into<u32>) {
    let event = Event {
        name: "ParachainRegistered".to_string(),
        // address caller, uint32 parachain, address owner
        inputs: vec![
            EventParam {
                name: "caller".to_string(),
                kind: ParamType::Address,
                indexed: false,
            },
            EventParam {
                name: "parachain".to_string(),
                kind: ParamType::Uint(32),
                indexed: false,
            },
            EventParam {
                name: "owner".to_string(),
                kind: ParamType::Address,
                indexed: false,
            },
        ],
        anonymous: false,
    };

    System::assert_has_event(
        pallet_evm::Event::Log {
            log: ethereum::Log {
                address: *REGISTRY_CONTRACT_ADDRESS,
                topics: vec![event.signature()],
                data: encode(&vec![
                    Token::Address(*PALLET_DERIVATIVE_ACCOUNT),
                    Token::Uint(para_id.into().into()),
                    Token::Address(*PALLET_DERIVATIVE_ACCOUNT),
                ]),
            },
        }
        .into(),
    );
}
