---
settings:
  chains:
    relay_chain:
      wsPort: 9900
    asset_reserve_parachain: &arp
      paraId: &arp_id 1000
      wsPort: 9910
    evm_parachain: &evmp
      paraId: &evmp_id 2000
      wsPort: 9920
    oracle_consumer_parachain: &ocp
      paraId: &ocp_id 3000
      wsPort: 9930

  variables:
    chains:
      asset_reserve_parachain:
        signer: &arp_signer //Alice
      evm_parachain:
        signer: &evmp_signer "0x5fb92d6e98884f76de468fa3f6278f8807c48bebc13595d45af5bdc4da702133" # Alith
        derivative_accounts:
          tellor_ocp: &evmp_tocpda "0x2aa1e5ffc61d158af854fa28b31fb87722e83b64"
      oracle_consumer_parachain:
        signer: &ocp_signer //Alice
        tellor_pallet_account: &ocp_tellor_account 5EYCAe5ijiYfyFR5Zp1cdckhKCKaUyo9KQsTcU1NR9u2mwTk
        stake_amount: &stake_amount "100000000000000000000" # 100 TRB
        grant_amount: &grant_amount "105000000000000000000" # stake amount plus fees
    tokens:
      # Tellor Tribute token
      trb:
        id: &TRB_id 872
        symbol: &TRB TRB
        name: &TRB_name Tellor Tribute
        owner: &TRB_owner HNZata7iMYWmk5RvZRTiAsSDhV8366zq2YGb3tLH5Upf74F # Alice's account on asset reserve parachain
        min_balance: &TRB_min_balance 1000000000000000
        decimals: &TRB_decimals 18
        supply: &TRB_supply "10000000000000000000000" # 10,000
      # Derivative of Tellor Tribute token
      xcTRB:
        symbol: &xcTRB xcTRB
        name: &xcTRB_name Tellor Tribute
        min_balance: &xcTRB_min_balance 1
        decimals: &xcTRB_decimals 18
      # Derivative of native Oracle Consumer parachain token
      xcOCP:
        symbol: &xcOCP xcOCP
        name: &xcOCP_name Oracle Consumer Parachain
        min_balance: &xcOCP_min_balance 1000000000
        decimals: &xcOCP_decimals 12

tests:
  - name: Initialize Chains
    its:
      - name: Initialise asset reserve parachain
        actions:
          - extrinsics:
              # Create TRB token and set metadata
              - chain: *arp
                signer: *arp_signer
                pallet: assets
                call: create
                args: [
                  *TRB_id, # id
                  { id: *TRB_owner }, # owner
                  *TRB_min_balance # min balance
                ]
              - chain: *arp
                signer: *arp_signer
                pallet: assets
                call: setMetadata
                args: [
                  *TRB_id, # id
                  *TRB_name, # name
                  *TRB, # symbol
                  *TRB_decimals # decimals
                ]
              # Mint total supply to owner
              - chain: *arp
                signer: *arp_signer
                pallet: assets
                call: mint
                args:
                  - *TRB_id
                  - *TRB_owner
                  - *TRB_supply
                events:
                  - name: assets.Issued
              # Init evm parachain sovereign account (required for reserve transfer)
              - chain: *arp
                signer: *arp_signer
                pallet: balances
                call: transfer
                args: [
                  "5Eg2fntJ27qsari4FGrGhrMqKFDRnkNSR6UshkZYBGXmSuC8", # sibling(2000)
                  1000000000000, # value
                ]
                events:
                  - name: balances.Transfer
      - name: Initialise EVM parachain
        actions:
          - extrinsics:
              # Register TRB as foreign asset
              - chain: *evmp
                sudo: true
                signer: *evmp_signer
                keyPairType: ethereum
                pallet: assetManager
                call: registerForeignAsset
                args: [
                  # asset
                  { xcm: { parents: 1, interior: { X3: [{ Parachain: *arp_id}, { PalletInstance: 50}, { GeneralIndex: *TRB_id }]} } },
                  # metadata
                  {
                    name: *xcTRB_name,
                    symbol: *xcTRB,
                    decimals: *xcTRB_decimals,
                    isFrozen: false
                  },
                  *xcTRB_min_balance, # minAmount
                  true, # isSufficient
                ]
              - chain: *evmp
                sudo: true
                signer: *evmp_signer
                keyPairType: ethereum
                pallet: assetManager
                call: setAssetUnitsPerSecond
                args: [
                  # asset
                  { xcm: { parents: 1, interior: {
                    X3: [ { Parachain: *arp_id }, { PalletInstance: 50 }, { GeneralIndex: *TRB_id } ] } } },
                  100000, # units per second (todo: size correctly)
                  5, # num assets weight hint (todo: size correctly)
                ]
              # Push revert code to EVM: https://github.com/PureStake/xcm-tools/blob/4a3dcdb49434bcc019106677d01be54f9f17b30b/scripts/xcm-asset-registrator.ts#L87-L107
              # Required for transferFrom usage within a smart contract, especially to return revert specifics
              - chain: *evmp
                sudo: true
                signer: *evmp_signer
                keyPairType: ethereum
                pallet: system
                call: setStorage
                # Note: hardcoded based on output of setStorage (decoded) from manual run of xcm-tools: yarn register-asset .. --revert-code true
                args: [[["0x1da53b775b270400e7e61ed5cbc5a146ea70f53d5a3306ce02aaf97049cf181a8d25f78201571c23f3f5096d309394ecffffffffc8be577a279484431b9444687ec3d2ae","0x1460006000fd"]]]
              # Register native token of OCP as foreign asset
              - chain: *evmp
                sudo: true
                signer: *evmp_signer
                keyPairType: ethereum
                pallet: assetManager
                call: registerForeignAsset
                args: [
                  # asset
                  { xcm: {  parents: 1, interior: { x1: { Parachain: *ocp_id } } } },
                  # metadata
                  {
                    name: *xcOCP_name,
                    symbol: *xcOCP,
                    decimals: *xcOCP_decimals,
                    isFrozen: false
                  },
                  *xcOCP_min_balance, # minAmount
                  false, # isSufficient
                ]
              # Fund multi-location derivative account of TellorPallet@OracleConsumerParachain (pallet -> contract xcm fees)
              - chain: *evmp
                signer: *evmp_signer
                keyPairType: ethereum
                pallet: balances
                call: transfer
                args: [
                  *evmp_tocpda,
                  "1000000000000000000"
                ]
      - name: Initialise Oracle Consumer parachain
        actions:
          - extrinsics:
              # Fund Tellor pallet for remote xcm fees (contract -> pallet xcm fees)
              - chain: *ocp
                signer: *ocp_signer
                pallet: balances
                call: transfer
                args: [
                  *ocp_tellor_account,
                  "100000000000000000" # OCP native token
                ]
              # Register parachain with controller contracts
              - chain: *ocp
                sudo: true
                signer: *ocp_signer
                pallet: tellor
                call: register
                args: []
      - name: Fund oracle reporter via reserve transfer of TRB (asset reserve) to xcTRB (EVM parachain)
        actions:
          - extrinsics:
              # Grant Balthazar stake amount
              - chain: *arp
                signer: *arp_signer
                pallet: polkadotXcm
                call: limitedReserveTransferAssets
                args: [
                  { v3: { parents: 1, interior: { x1: { parachain: *evmp_id } }}}, # destination
                  { # beneficiary: Balthazar
                    v3: {
                      parents: 0,
                      interior: { x1: { AccountKey20: { network: null, key: "0x3Cd0A705a2DC65e5b1E1205896BaA2be8A07c6e0" } } }
                    }
                  },
                  { # assets
                    v3: [{
                      id: {
                        Concrete: {
                          parents: 0,
                          interior: { x2: [ { PalletInstance: 50 }, { GeneralIndex: *TRB_id } ] }
                        }
                      },
                      fun: { Fungible: *grant_amount }
                    }]
                  },
                  0, # feeAssetItem
                  Unlimited # weightLimit
                ]