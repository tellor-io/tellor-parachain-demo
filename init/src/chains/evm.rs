#[allow(dead_code, unused_imports, non_camel_case_types)]
#[allow(clippy::all)]
#[allow(rustdoc::broken_intra_doc_links)]
pub mod api {
    #[allow(unused_imports)]
    mod root_mod {
        pub use super::*;
    }
    pub static PALLETS: [&str; 47usize] = [
        "System",
        "Utility",
        "Timestamp",
        "Balances",
        "Sudo",
        "ParachainSystem",
        "TransactionPayment",
        "ParachainInfo",
        "EthereumChainId",
        "EVM",
        "Ethereum",
        "ParachainStaking",
        "Scheduler",
        "Democracy",
        "CouncilCollective",
        "TechCommitteeCollective",
        "Treasury",
        "AuthorInherent",
        "AuthorFilter",
        "CrowdloanRewards",
        "AuthorMapping",
        "Proxy",
        "MaintenanceMode",
        "Identity",
        "XcmpQueue",
        "CumulusXcm",
        "DmpQueue",
        "PolkadotXcm",
        "Assets",
        "XTokens",
        "AssetManager",
        "Migrations",
        "XcmTransactor",
        "ProxyGenesisCompanion",
        "LocalAssets",
        "MoonbeamOrbiters",
        "EthereumXcm",
        "Randomness",
        "TreasuryCouncilCollective",
        "ConvictionVoting",
        "Referenda",
        "Preimage",
        "Whitelist",
        "OpenTechCommitteeCollective",
        "RootTesting",
        "Erc20XcmBridge",
        "Multisig",
    ];
    pub static RUNTIME_APIS: [&str; 0usize] = [];
    #[doc = r" The error type returned when there is a runtime issue."]
    pub type DispatchError = runtime_types::sp_runtime::DispatchError;
    #[doc = r" The outer event enum."]
    pub type Event = runtime_types::moonbase_runtime::RuntimeEvent;
    #[doc = r" The outer extrinsic enum."]
    pub type Call = runtime_types::moonbase_runtime::RuntimeCall;
    #[doc = r" The outer error enum representing the DispatchError's Module variant."]
    pub type Error = runtime_types::moonbase_runtime::RuntimeError;
    pub fn constants() -> ConstantsApi {
        ConstantsApi
    }
    pub fn storage() -> StorageApi {
        StorageApi
    }
    pub fn tx() -> TransactionApi {
        TransactionApi
    }
    pub fn apis() -> runtime_apis::RuntimeApi {
        runtime_apis::RuntimeApi
    }
    pub mod runtime_apis {
        use super::root_mod;
        use super::runtime_types;
        use subxt::ext::codec::Encode;
        pub struct RuntimeApi;
        impl RuntimeApi {}
    }
    pub struct ConstantsApi;
    impl ConstantsApi {
        pub fn system(&self) -> system::constants::ConstantsApi {
            system::constants::ConstantsApi
        }
        pub fn utility(&self) -> utility::constants::ConstantsApi {
            utility::constants::ConstantsApi
        }
        pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
            timestamp::constants::ConstantsApi
        }
        pub fn balances(&self) -> balances::constants::ConstantsApi {
            balances::constants::ConstantsApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi {
            transaction_payment::constants::ConstantsApi
        }
        pub fn parachain_staking(&self) -> parachain_staking::constants::ConstantsApi {
            parachain_staking::constants::ConstantsApi
        }
        pub fn scheduler(&self) -> scheduler::constants::ConstantsApi {
            scheduler::constants::ConstantsApi
        }
        pub fn democracy(&self) -> democracy::constants::ConstantsApi {
            democracy::constants::ConstantsApi
        }
        pub fn council_collective(&self) -> council_collective::constants::ConstantsApi {
            council_collective::constants::ConstantsApi
        }
        pub fn tech_committee_collective(
            &self,
        ) -> tech_committee_collective::constants::ConstantsApi {
            tech_committee_collective::constants::ConstantsApi
        }
        pub fn treasury(&self) -> treasury::constants::ConstantsApi {
            treasury::constants::ConstantsApi
        }
        pub fn crowdloan_rewards(&self) -> crowdloan_rewards::constants::ConstantsApi {
            crowdloan_rewards::constants::ConstantsApi
        }
        pub fn proxy(&self) -> proxy::constants::ConstantsApi {
            proxy::constants::ConstantsApi
        }
        pub fn identity(&self) -> identity::constants::ConstantsApi {
            identity::constants::ConstantsApi
        }
        pub fn assets(&self) -> assets::constants::ConstantsApi {
            assets::constants::ConstantsApi
        }
        pub fn x_tokens(&self) -> x_tokens::constants::ConstantsApi {
            x_tokens::constants::ConstantsApi
        }
        pub fn asset_manager(&self) -> asset_manager::constants::ConstantsApi {
            asset_manager::constants::ConstantsApi
        }
        pub fn xcm_transactor(&self) -> xcm_transactor::constants::ConstantsApi {
            xcm_transactor::constants::ConstantsApi
        }
        pub fn local_assets(&self) -> local_assets::constants::ConstantsApi {
            local_assets::constants::ConstantsApi
        }
        pub fn moonbeam_orbiters(&self) -> moonbeam_orbiters::constants::ConstantsApi {
            moonbeam_orbiters::constants::ConstantsApi
        }
        pub fn randomness(&self) -> randomness::constants::ConstantsApi {
            randomness::constants::ConstantsApi
        }
        pub fn treasury_council_collective(
            &self,
        ) -> treasury_council_collective::constants::ConstantsApi {
            treasury_council_collective::constants::ConstantsApi
        }
        pub fn conviction_voting(&self) -> conviction_voting::constants::ConstantsApi {
            conviction_voting::constants::ConstantsApi
        }
        pub fn referenda(&self) -> referenda::constants::ConstantsApi {
            referenda::constants::ConstantsApi
        }
        pub fn open_tech_committee_collective(
            &self,
        ) -> open_tech_committee_collective::constants::ConstantsApi {
            open_tech_committee_collective::constants::ConstantsApi
        }
        pub fn multisig(&self) -> multisig::constants::ConstantsApi {
            multisig::constants::ConstantsApi
        }
    }
    pub struct StorageApi;
    impl StorageApi {
        pub fn system(&self) -> system::storage::StorageApi {
            system::storage::StorageApi
        }
        pub fn timestamp(&self) -> timestamp::storage::StorageApi {
            timestamp::storage::StorageApi
        }
        pub fn balances(&self) -> balances::storage::StorageApi {
            balances::storage::StorageApi
        }
        pub fn sudo(&self) -> sudo::storage::StorageApi {
            sudo::storage::StorageApi
        }
        pub fn parachain_system(&self) -> parachain_system::storage::StorageApi {
            parachain_system::storage::StorageApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi {
            transaction_payment::storage::StorageApi
        }
        pub fn parachain_info(&self) -> parachain_info::storage::StorageApi {
            parachain_info::storage::StorageApi
        }
        pub fn ethereum_chain_id(&self) -> ethereum_chain_id::storage::StorageApi {
            ethereum_chain_id::storage::StorageApi
        }
        pub fn evm(&self) -> evm::storage::StorageApi {
            evm::storage::StorageApi
        }
        pub fn ethereum(&self) -> ethereum::storage::StorageApi {
            ethereum::storage::StorageApi
        }
        pub fn parachain_staking(&self) -> parachain_staking::storage::StorageApi {
            parachain_staking::storage::StorageApi
        }
        pub fn scheduler(&self) -> scheduler::storage::StorageApi {
            scheduler::storage::StorageApi
        }
        pub fn democracy(&self) -> democracy::storage::StorageApi {
            democracy::storage::StorageApi
        }
        pub fn council_collective(&self) -> council_collective::storage::StorageApi {
            council_collective::storage::StorageApi
        }
        pub fn tech_committee_collective(&self) -> tech_committee_collective::storage::StorageApi {
            tech_committee_collective::storage::StorageApi
        }
        pub fn treasury(&self) -> treasury::storage::StorageApi {
            treasury::storage::StorageApi
        }
        pub fn author_inherent(&self) -> author_inherent::storage::StorageApi {
            author_inherent::storage::StorageApi
        }
        pub fn author_filter(&self) -> author_filter::storage::StorageApi {
            author_filter::storage::StorageApi
        }
        pub fn crowdloan_rewards(&self) -> crowdloan_rewards::storage::StorageApi {
            crowdloan_rewards::storage::StorageApi
        }
        pub fn author_mapping(&self) -> author_mapping::storage::StorageApi {
            author_mapping::storage::StorageApi
        }
        pub fn proxy(&self) -> proxy::storage::StorageApi {
            proxy::storage::StorageApi
        }
        pub fn maintenance_mode(&self) -> maintenance_mode::storage::StorageApi {
            maintenance_mode::storage::StorageApi
        }
        pub fn identity(&self) -> identity::storage::StorageApi {
            identity::storage::StorageApi
        }
        pub fn xcmp_queue(&self) -> xcmp_queue::storage::StorageApi {
            xcmp_queue::storage::StorageApi
        }
        pub fn dmp_queue(&self) -> dmp_queue::storage::StorageApi {
            dmp_queue::storage::StorageApi
        }
        pub fn polkadot_xcm(&self) -> polkadot_xcm::storage::StorageApi {
            polkadot_xcm::storage::StorageApi
        }
        pub fn assets(&self) -> assets::storage::StorageApi {
            assets::storage::StorageApi
        }
        pub fn x_tokens(&self) -> x_tokens::storage::StorageApi {
            x_tokens::storage::StorageApi
        }
        pub fn asset_manager(&self) -> asset_manager::storage::StorageApi {
            asset_manager::storage::StorageApi
        }
        pub fn migrations(&self) -> migrations::storage::StorageApi {
            migrations::storage::StorageApi
        }
        pub fn xcm_transactor(&self) -> xcm_transactor::storage::StorageApi {
            xcm_transactor::storage::StorageApi
        }
        pub fn local_assets(&self) -> local_assets::storage::StorageApi {
            local_assets::storage::StorageApi
        }
        pub fn moonbeam_orbiters(&self) -> moonbeam_orbiters::storage::StorageApi {
            moonbeam_orbiters::storage::StorageApi
        }
        pub fn ethereum_xcm(&self) -> ethereum_xcm::storage::StorageApi {
            ethereum_xcm::storage::StorageApi
        }
        pub fn randomness(&self) -> randomness::storage::StorageApi {
            randomness::storage::StorageApi
        }
        pub fn treasury_council_collective(
            &self,
        ) -> treasury_council_collective::storage::StorageApi {
            treasury_council_collective::storage::StorageApi
        }
        pub fn conviction_voting(&self) -> conviction_voting::storage::StorageApi {
            conviction_voting::storage::StorageApi
        }
        pub fn referenda(&self) -> referenda::storage::StorageApi {
            referenda::storage::StorageApi
        }
        pub fn preimage(&self) -> preimage::storage::StorageApi {
            preimage::storage::StorageApi
        }
        pub fn whitelist(&self) -> whitelist::storage::StorageApi {
            whitelist::storage::StorageApi
        }
        pub fn open_tech_committee_collective(
            &self,
        ) -> open_tech_committee_collective::storage::StorageApi {
            open_tech_committee_collective::storage::StorageApi
        }
        pub fn root_testing(&self) -> root_testing::storage::StorageApi {
            root_testing::storage::StorageApi
        }
        pub fn multisig(&self) -> multisig::storage::StorageApi {
            multisig::storage::StorageApi
        }
    }
    pub struct TransactionApi;
    impl TransactionApi {
        pub fn system(&self) -> system::calls::TransactionApi {
            system::calls::TransactionApi
        }
        pub fn utility(&self) -> utility::calls::TransactionApi {
            utility::calls::TransactionApi
        }
        pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
            timestamp::calls::TransactionApi
        }
        pub fn balances(&self) -> balances::calls::TransactionApi {
            balances::calls::TransactionApi
        }
        pub fn sudo(&self) -> sudo::calls::TransactionApi {
            sudo::calls::TransactionApi
        }
        pub fn parachain_system(&self) -> parachain_system::calls::TransactionApi {
            parachain_system::calls::TransactionApi
        }
        pub fn evm(&self) -> evm::calls::TransactionApi {
            evm::calls::TransactionApi
        }
        pub fn ethereum(&self) -> ethereum::calls::TransactionApi {
            ethereum::calls::TransactionApi
        }
        pub fn parachain_staking(&self) -> parachain_staking::calls::TransactionApi {
            parachain_staking::calls::TransactionApi
        }
        pub fn scheduler(&self) -> scheduler::calls::TransactionApi {
            scheduler::calls::TransactionApi
        }
        pub fn democracy(&self) -> democracy::calls::TransactionApi {
            democracy::calls::TransactionApi
        }
        pub fn council_collective(&self) -> council_collective::calls::TransactionApi {
            council_collective::calls::TransactionApi
        }
        pub fn tech_committee_collective(
            &self,
        ) -> tech_committee_collective::calls::TransactionApi {
            tech_committee_collective::calls::TransactionApi
        }
        pub fn treasury(&self) -> treasury::calls::TransactionApi {
            treasury::calls::TransactionApi
        }
        pub fn author_inherent(&self) -> author_inherent::calls::TransactionApi {
            author_inherent::calls::TransactionApi
        }
        pub fn author_filter(&self) -> author_filter::calls::TransactionApi {
            author_filter::calls::TransactionApi
        }
        pub fn crowdloan_rewards(&self) -> crowdloan_rewards::calls::TransactionApi {
            crowdloan_rewards::calls::TransactionApi
        }
        pub fn author_mapping(&self) -> author_mapping::calls::TransactionApi {
            author_mapping::calls::TransactionApi
        }
        pub fn proxy(&self) -> proxy::calls::TransactionApi {
            proxy::calls::TransactionApi
        }
        pub fn maintenance_mode(&self) -> maintenance_mode::calls::TransactionApi {
            maintenance_mode::calls::TransactionApi
        }
        pub fn identity(&self) -> identity::calls::TransactionApi {
            identity::calls::TransactionApi
        }
        pub fn xcmp_queue(&self) -> xcmp_queue::calls::TransactionApi {
            xcmp_queue::calls::TransactionApi
        }
        pub fn dmp_queue(&self) -> dmp_queue::calls::TransactionApi {
            dmp_queue::calls::TransactionApi
        }
        pub fn polkadot_xcm(&self) -> polkadot_xcm::calls::TransactionApi {
            polkadot_xcm::calls::TransactionApi
        }
        pub fn assets(&self) -> assets::calls::TransactionApi {
            assets::calls::TransactionApi
        }
        pub fn x_tokens(&self) -> x_tokens::calls::TransactionApi {
            x_tokens::calls::TransactionApi
        }
        pub fn asset_manager(&self) -> asset_manager::calls::TransactionApi {
            asset_manager::calls::TransactionApi
        }
        pub fn xcm_transactor(&self) -> xcm_transactor::calls::TransactionApi {
            xcm_transactor::calls::TransactionApi
        }
        pub fn local_assets(&self) -> local_assets::calls::TransactionApi {
            local_assets::calls::TransactionApi
        }
        pub fn moonbeam_orbiters(&self) -> moonbeam_orbiters::calls::TransactionApi {
            moonbeam_orbiters::calls::TransactionApi
        }
        pub fn ethereum_xcm(&self) -> ethereum_xcm::calls::TransactionApi {
            ethereum_xcm::calls::TransactionApi
        }
        pub fn randomness(&self) -> randomness::calls::TransactionApi {
            randomness::calls::TransactionApi
        }
        pub fn treasury_council_collective(
            &self,
        ) -> treasury_council_collective::calls::TransactionApi {
            treasury_council_collective::calls::TransactionApi
        }
        pub fn conviction_voting(&self) -> conviction_voting::calls::TransactionApi {
            conviction_voting::calls::TransactionApi
        }
        pub fn referenda(&self) -> referenda::calls::TransactionApi {
            referenda::calls::TransactionApi
        }
        pub fn preimage(&self) -> preimage::calls::TransactionApi {
            preimage::calls::TransactionApi
        }
        pub fn whitelist(&self) -> whitelist::calls::TransactionApi {
            whitelist::calls::TransactionApi
        }
        pub fn open_tech_committee_collective(
            &self,
        ) -> open_tech_committee_collective::calls::TransactionApi {
            open_tech_committee_collective::calls::TransactionApi
        }
        pub fn root_testing(&self) -> root_testing::calls::TransactionApi {
            root_testing::calls::TransactionApi
        }
        pub fn multisig(&self) -> multisig::calls::TransactionApi {
            multisig::calls::TransactionApi
        }
    }
    #[doc = r" check whether the metadata provided is aligned with this statically generated code."]
    pub fn is_codegen_valid_for(metadata: &::subxt::Metadata) -> bool {
        let runtime_metadata_hash = metadata
            .hasher()
            .only_these_pallets(&PALLETS)
            .only_these_runtime_apis(&RUNTIME_APIS)
            .hash();
        runtime_metadata_hash
            == [
                82u8, 30u8, 2u8, 110u8, 93u8, 86u8, 166u8, 38u8, 241u8, 89u8, 170u8, 46u8, 168u8,
                136u8, 154u8, 93u8, 28u8, 200u8, 249u8, 208u8, 156u8, 245u8, 255u8, 195u8, 155u8,
                99u8, 166u8, 77u8, 116u8, 204u8, 35u8, 180u8,
            ]
    }
    pub mod system {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the System pallet"]
        pub type Error = runtime_types::frame_system::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::frame_system::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Remark {
                    pub remark: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Remark {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetHeapPages {
                    pub pages: ::core::primitive::u64,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetHeapPages {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_heap_pages";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCode {
                    pub code: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCode {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCodeWithoutChecks {
                    pub code: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCodeWithoutChecks {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code_without_checks";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetStorage {
                    pub items: ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_storage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KillStorage {
                    pub keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                }
                impl ::subxt::blocks::StaticExtrinsic for KillStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_storage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KillPrefix {
                    pub prefix: ::std::vec::Vec<::core::primitive::u8>,
                    pub subkeys: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for KillPrefix {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_prefix";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemarkWithEvent {
                    pub remark: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemarkWithEvent {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark_with_event";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Make some on-chain remark."]
                #[doc = ""]
                #[doc = "- `O(1)`"]
                pub fn remark(
                    &self,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::Remark> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "remark",
                        types::Remark { remark },
                        [
                            43u8, 126u8, 180u8, 174u8, 141u8, 48u8, 52u8, 125u8, 166u8, 212u8,
                            216u8, 98u8, 100u8, 24u8, 132u8, 71u8, 101u8, 64u8, 246u8, 169u8, 33u8,
                            250u8, 147u8, 208u8, 2u8, 40u8, 129u8, 209u8, 232u8, 207u8, 207u8,
                            13u8,
                        ],
                    )
                }
                #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                pub fn set_heap_pages(
                    &self,
                    pages: ::core::primitive::u64,
                ) -> ::subxt::tx::Payload<types::SetHeapPages> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_heap_pages",
                        types::SetHeapPages { pages },
                        [
                            188u8, 191u8, 99u8, 216u8, 219u8, 109u8, 141u8, 50u8, 78u8, 235u8,
                            215u8, 242u8, 195u8, 24u8, 111u8, 76u8, 229u8, 64u8, 99u8, 225u8,
                            134u8, 121u8, 81u8, 209u8, 127u8, 223u8, 98u8, 215u8, 150u8, 70u8,
                            57u8, 147u8,
                        ],
                    )
                }
                #[doc = "Set the new runtime code."]
                pub fn set_code(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::SetCode> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_code",
                        types::SetCode { code },
                        [
                            233u8, 248u8, 88u8, 245u8, 28u8, 65u8, 25u8, 169u8, 35u8, 237u8, 19u8,
                            203u8, 136u8, 160u8, 18u8, 3u8, 20u8, 197u8, 81u8, 169u8, 244u8, 188u8,
                            27u8, 147u8, 147u8, 236u8, 65u8, 25u8, 3u8, 143u8, 182u8, 22u8,
                        ],
                    )
                }
                #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                pub fn set_code_without_checks(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::SetCodeWithoutChecks> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_code_without_checks",
                        types::SetCodeWithoutChecks { code },
                        [
                            82u8, 212u8, 157u8, 44u8, 70u8, 0u8, 143u8, 15u8, 109u8, 109u8, 107u8,
                            157u8, 141u8, 42u8, 169u8, 11u8, 15u8, 186u8, 252u8, 138u8, 10u8,
                            147u8, 15u8, 178u8, 247u8, 229u8, 213u8, 98u8, 207u8, 231u8, 119u8,
                            115u8,
                        ],
                    )
                }
                #[doc = "Set some items of storage."]
                pub fn set_storage(
                    &self,
                    items: ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                ) -> ::subxt::tx::Payload<types::SetStorage> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_storage",
                        types::SetStorage { items },
                        [
                            141u8, 216u8, 52u8, 222u8, 223u8, 136u8, 123u8, 181u8, 19u8, 75u8,
                            163u8, 102u8, 229u8, 189u8, 158u8, 142u8, 95u8, 235u8, 240u8, 49u8,
                            150u8, 76u8, 78u8, 137u8, 126u8, 88u8, 183u8, 88u8, 231u8, 146u8,
                            234u8, 43u8,
                        ],
                    )
                }
                #[doc = "Kill some items from storage."]
                pub fn kill_storage(
                    &self,
                    keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                ) -> ::subxt::tx::Payload<types::KillStorage> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "kill_storage",
                        types::KillStorage { keys },
                        [
                            73u8, 63u8, 196u8, 36u8, 144u8, 114u8, 34u8, 213u8, 108u8, 93u8, 209u8,
                            234u8, 153u8, 185u8, 33u8, 91u8, 187u8, 195u8, 223u8, 130u8, 58u8,
                            156u8, 63u8, 47u8, 228u8, 249u8, 216u8, 139u8, 143u8, 177u8, 41u8,
                            35u8,
                        ],
                    )
                }
                #[doc = "Kill all storage items with a key that starts with the given prefix."]
                #[doc = ""]
                #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                pub fn kill_prefix(
                    &self,
                    prefix: ::std::vec::Vec<::core::primitive::u8>,
                    subkeys: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::KillPrefix> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "kill_prefix",
                        types::KillPrefix { prefix, subkeys },
                        [
                            184u8, 57u8, 139u8, 24u8, 208u8, 87u8, 108u8, 215u8, 198u8, 189u8,
                            175u8, 242u8, 167u8, 215u8, 97u8, 63u8, 110u8, 166u8, 238u8, 98u8,
                            67u8, 236u8, 111u8, 110u8, 234u8, 81u8, 102u8, 5u8, 182u8, 5u8, 214u8,
                            85u8,
                        ],
                    )
                }
                #[doc = "Make some on-chain remark and emit event."]
                pub fn remark_with_event(
                    &self,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::RemarkWithEvent> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "remark_with_event",
                        types::RemarkWithEvent { remark },
                        [
                            120u8, 120u8, 153u8, 92u8, 184u8, 85u8, 34u8, 2u8, 174u8, 206u8, 105u8,
                            228u8, 233u8, 130u8, 80u8, 246u8, 228u8, 59u8, 234u8, 240u8, 4u8, 49u8,
                            147u8, 170u8, 115u8, 91u8, 149u8, 200u8, 228u8, 181u8, 8u8, 154u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Event for the System pallet."]
        pub type Event = runtime_types::frame_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An extrinsic completed successfully."]
            pub struct ExtrinsicSuccess {
                pub dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
            }
            impl ::subxt::events::StaticEvent for ExtrinsicSuccess {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicSuccess";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An extrinsic failed."]
            pub struct ExtrinsicFailed {
                pub dispatch_error: runtime_types::sp_runtime::DispatchError,
                pub dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
            }
            impl ::subxt::events::StaticEvent for ExtrinsicFailed {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "`:code` was updated."]
            pub struct CodeUpdated;
            impl ::subxt::events::StaticEvent for CodeUpdated {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "CodeUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new account was created."]
            pub struct NewAccount {
                pub account: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for NewAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "NewAccount";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was reaped."]
            pub struct KilledAccount {
                pub account: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for KilledAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "KilledAccount";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "On on-chain remark happened."]
            pub struct Remarked {
                pub sender: runtime_types::account::AccountId20,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Remarked {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "Remarked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The full account information for a particular account ID."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_system::AccountInfo<
                        ::core::primitive::u32,
                        runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Account",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            120u8, 167u8, 1u8, 247u8, 5u8, 61u8, 226u8, 165u8, 5u8, 119u8, 157u8,
                            82u8, 228u8, 25u8, 237u8, 163u8, 0u8, 52u8, 66u8, 84u8, 164u8, 131u8,
                            253u8, 140u8, 80u8, 70u8, 113u8, 200u8, 249u8, 171u8, 121u8, 9u8,
                        ],
                    )
                }
                #[doc = " The full account information for a particular account ID."]
                pub fn account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_system::AccountInfo<
                        ::core::primitive::u32,
                        runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Account",
                        Vec::new(),
                        [
                            120u8, 167u8, 1u8, 247u8, 5u8, 61u8, 226u8, 165u8, 5u8, 119u8, 157u8,
                            82u8, 228u8, 25u8, 237u8, 163u8, 0u8, 52u8, 66u8, 84u8, 164u8, 131u8,
                            253u8, 140u8, 80u8, 70u8, 113u8, 200u8, 249u8, 171u8, 121u8, 9u8,
                        ],
                    )
                }
                #[doc = " Total extrinsics count for the current block."]
                pub fn extrinsic_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicCount",
                        vec![],
                        [
                            102u8, 76u8, 236u8, 42u8, 40u8, 231u8, 33u8, 222u8, 123u8, 147u8,
                            153u8, 148u8, 234u8, 203u8, 181u8, 119u8, 6u8, 187u8, 177u8, 199u8,
                            120u8, 47u8, 137u8, 254u8, 96u8, 100u8, 165u8, 182u8, 249u8, 230u8,
                            159u8, 79u8,
                        ],
                    )
                }
                #[doc = " The current weight for the block."]
                pub fn block_weight(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::sp_weights::weight_v2::Weight,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockWeight",
                        vec![],
                        [
                            158u8, 46u8, 228u8, 89u8, 210u8, 214u8, 84u8, 154u8, 50u8, 68u8, 63u8,
                            62u8, 43u8, 42u8, 99u8, 27u8, 54u8, 42u8, 146u8, 44u8, 241u8, 216u8,
                            229u8, 30u8, 216u8, 255u8, 165u8, 238u8, 181u8, 130u8, 36u8, 102u8,
                        ],
                    )
                }
                #[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]
                pub fn all_extrinsics_len(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "AllExtrinsicsLen",
                        vec![],
                        [
                            117u8, 86u8, 61u8, 243u8, 41u8, 51u8, 102u8, 214u8, 137u8, 100u8,
                            243u8, 185u8, 122u8, 174u8, 187u8, 117u8, 86u8, 189u8, 63u8, 135u8,
                            101u8, 218u8, 203u8, 201u8, 237u8, 254u8, 128u8, 183u8, 169u8, 221u8,
                            242u8, 65u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockHash",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockHash",
                        Vec::new(),
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicData",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicData",
                        Vec::new(),
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                #[doc = " The current block number being processed. Set by `execute_block`."]
                pub fn number(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Number",
                        vec![],
                        [
                            30u8, 194u8, 177u8, 90u8, 194u8, 232u8, 46u8, 180u8, 85u8, 129u8, 14u8,
                            9u8, 8u8, 8u8, 23u8, 95u8, 230u8, 5u8, 13u8, 105u8, 125u8, 2u8, 22u8,
                            200u8, 78u8, 93u8, 115u8, 28u8, 150u8, 113u8, 48u8, 53u8,
                        ],
                    )
                }
                #[doc = " Hash of the previous block."]
                pub fn parent_hash(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ParentHash",
                        vec![],
                        [
                            26u8, 130u8, 11u8, 216u8, 155u8, 71u8, 128u8, 170u8, 30u8, 153u8, 21u8,
                            192u8, 62u8, 93u8, 137u8, 80u8, 120u8, 81u8, 202u8, 94u8, 248u8, 125u8,
                            71u8, 82u8, 141u8, 229u8, 32u8, 56u8, 73u8, 50u8, 101u8, 78u8,
                        ],
                    )
                }
                #[doc = " Digest of the current block, also part of the block header."]
                pub fn digest(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_runtime::generic::digest::Digest,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Digest",
                        vec![],
                        [
                            61u8, 64u8, 237u8, 91u8, 145u8, 232u8, 17u8, 254u8, 181u8, 16u8, 234u8,
                            91u8, 51u8, 140u8, 254u8, 131u8, 98u8, 135u8, 21u8, 37u8, 251u8, 20u8,
                            58u8, 92u8, 123u8, 141u8, 14u8, 227u8, 146u8, 46u8, 222u8, 117u8,
                        ],
                    )
                }
                #[doc = " Events deposited for the current block."]
                #[doc = ""]
                #[doc = " NOTE: The item is unbound and should therefore never be read on chain."]
                #[doc = " It could otherwise inflate the PoV size of a block."]
                #[doc = ""]
                #[doc = " Events have a large in-memory size. Box the events to not go out-of-memory"]
                #[doc = " just in case someone still reads them from within the runtime."]
                pub fn events(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::frame_system::EventRecord<
                            runtime_types::moonbase_runtime::RuntimeEvent,
                            ::subxt::utils::H256,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Events",
                        vec![],
                        [
                            208u8, 79u8, 128u8, 181u8, 215u8, 182u8, 197u8, 233u8, 207u8, 103u8,
                            129u8, 105u8, 63u8, 35u8, 25u8, 106u8, 69u8, 198u8, 57u8, 214u8, 93u8,
                            207u8, 174u8, 44u8, 92u8, 218u8, 130u8, 199u8, 37u8, 64u8, 78u8, 118u8,
                        ],
                    )
                }
                #[doc = " The number of events in the `Events<T>` list."]
                pub fn event_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventCount",
                        vec![],
                        [
                            175u8, 24u8, 252u8, 184u8, 210u8, 167u8, 146u8, 143u8, 164u8, 80u8,
                            151u8, 205u8, 189u8, 189u8, 55u8, 220u8, 47u8, 101u8, 181u8, 33u8,
                            254u8, 131u8, 13u8, 143u8, 3u8, 244u8, 245u8, 45u8, 2u8, 210u8, 79u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventTopics",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
                            133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
                            120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventTopics",
                        Vec::new(),
                        [
                            40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
                            133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
                            120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
                        ],
                    )
                }
                #[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
                pub fn last_runtime_upgrade(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_system::LastRuntimeUpgradeInfo,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "LastRuntimeUpgrade",
                        vec![],
                        [
                            137u8, 29u8, 175u8, 75u8, 197u8, 208u8, 91u8, 207u8, 156u8, 87u8,
                            148u8, 68u8, 91u8, 140u8, 22u8, 233u8, 1u8, 229u8, 56u8, 34u8, 40u8,
                            194u8, 253u8, 30u8, 163u8, 39u8, 54u8, 209u8, 13u8, 27u8, 139u8, 184u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
                pub fn upgraded_to_u32_ref_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "UpgradedToU32RefCount",
                        vec![],
                        [
                            229u8, 73u8, 9u8, 132u8, 186u8, 116u8, 151u8, 171u8, 145u8, 29u8, 34u8,
                            130u8, 52u8, 146u8, 124u8, 175u8, 79u8, 189u8, 147u8, 230u8, 234u8,
                            107u8, 124u8, 31u8, 2u8, 22u8, 86u8, 190u8, 4u8, 147u8, 50u8, 245u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
                #[doc = " (default) if not."]
                pub fn upgraded_to_triple_ref_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "UpgradedToTripleRefCount",
                        vec![],
                        [
                            97u8, 66u8, 124u8, 243u8, 27u8, 167u8, 147u8, 81u8, 254u8, 201u8,
                            101u8, 24u8, 40u8, 231u8, 14u8, 179u8, 154u8, 163u8, 71u8, 81u8, 185u8,
                            167u8, 82u8, 254u8, 189u8, 3u8, 101u8, 207u8, 206u8, 194u8, 155u8,
                            151u8,
                        ],
                    )
                }
                #[doc = " The execution phase of the block."]
                pub fn execution_phase(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_system::Phase,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExecutionPhase",
                        vec![],
                        [
                            191u8, 129u8, 100u8, 134u8, 126u8, 116u8, 154u8, 203u8, 220u8, 200u8,
                            0u8, 26u8, 161u8, 250u8, 133u8, 205u8, 146u8, 24u8, 5u8, 156u8, 158u8,
                            35u8, 36u8, 253u8, 52u8, 235u8, 86u8, 167u8, 35u8, 100u8, 119u8, 27u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Block & extrinsics weights: base values and limits."]
                pub fn block_weights(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockWeights>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockWeights",
                        [
                            176u8, 124u8, 225u8, 136u8, 25u8, 73u8, 247u8, 33u8, 82u8, 206u8, 85u8,
                            190u8, 127u8, 102u8, 71u8, 11u8, 185u8, 8u8, 58u8, 0u8, 94u8, 55u8,
                            163u8, 177u8, 104u8, 59u8, 60u8, 136u8, 246u8, 116u8, 0u8, 239u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a block (in bytes)."]
                pub fn block_length(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockLength>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockLength",
                        [
                            23u8, 242u8, 225u8, 39u8, 225u8, 67u8, 152u8, 41u8, 155u8, 104u8, 68u8,
                            229u8, 185u8, 133u8, 10u8, 143u8, 184u8, 152u8, 234u8, 44u8, 140u8,
                            96u8, 166u8, 235u8, 162u8, 160u8, 72u8, 7u8, 35u8, 194u8, 3u8, 37u8,
                        ],
                    )
                }
                #[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
                pub fn block_hash_count(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockHashCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The weight of runtime database operations the runtime can invoke."]
                pub fn db_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::RuntimeDbWeight>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "DbWeight",
                        [
                            42u8, 43u8, 178u8, 142u8, 243u8, 203u8, 60u8, 173u8, 118u8, 111u8,
                            200u8, 170u8, 102u8, 70u8, 237u8, 187u8, 198u8, 120u8, 153u8, 232u8,
                            183u8, 76u8, 74u8, 10u8, 70u8, 243u8, 14u8, 218u8, 213u8, 126u8, 29u8,
                            177u8,
                        ],
                    )
                }
                #[doc = " Get the chain's current version."]
                pub fn version(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_version::RuntimeVersion>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "Version",
                        [
                            219u8, 45u8, 162u8, 245u8, 177u8, 246u8, 48u8, 126u8, 191u8, 157u8,
                            228u8, 83u8, 111u8, 133u8, 183u8, 13u8, 148u8, 108u8, 92u8, 102u8,
                            72u8, 205u8, 74u8, 242u8, 233u8, 79u8, 20u8, 170u8, 72u8, 202u8, 158u8,
                            165u8,
                        ],
                    )
                }
                #[doc = " The designated SS58 prefix of this chain."]
                #[doc = ""]
                #[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
                #[doc = " that the runtime should know about the prefix in order to make use of it as"]
                #[doc = " an identifier of the chain."]
                pub fn ss58_prefix(&self) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "SS58Prefix",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod utility {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_utility::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_utility::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Batch {
                    pub calls: ::std::vec::Vec<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Batch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AsDerivative {
                    pub index: ::core::primitive::u16,
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for AsDerivative {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "as_derivative";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BatchAll {
                    pub calls: ::std::vec::Vec<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for BatchAll {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch_all";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DispatchAs {
                    pub as_origin: ::std::boxed::Box<runtime_types::moonbase_runtime::OriginCaller>,
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for DispatchAs {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "dispatch_as";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceBatch {
                    pub calls: ::std::vec::Vec<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceBatch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "force_batch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WithWeight {
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    pub weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for WithWeight {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "with_weight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Send a batch of dispatch calls."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                #[doc = ""]
                #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                #[doc = "event is deposited."]
                pub fn batch(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::moonbase_runtime::RuntimeCall>,
                ) -> ::subxt::tx::Payload<types::Batch> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "batch",
                        types::Batch { calls },
                        [
                            124u8, 191u8, 109u8, 142u8, 168u8, 228u8, 128u8, 130u8, 215u8, 241u8,
                            117u8, 205u8, 81u8, 114u8, 154u8, 119u8, 94u8, 171u8, 114u8, 3u8,
                            103u8, 197u8, 224u8, 9u8, 14u8, 249u8, 223u8, 69u8, 73u8, 114u8, 122u8,
                            52u8,
                        ],
                    )
                }
                #[doc = "Send a call through an indexed pseudonym of the sender."]
                #[doc = ""]
                #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                #[doc = "use the same filter as the origin of this call."]
                #[doc = ""]
                #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                #[doc = "in the Multisig pallet instead."]
                #[doc = ""]
                #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub fn as_derivative(
                    &self,
                    index: ::core::primitive::u16,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::AsDerivative> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "as_derivative",
                        types::AsDerivative {
                            index,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            232u8, 178u8, 82u8, 178u8, 20u8, 103u8, 16u8, 190u8, 52u8, 113u8, 32u8,
                            23u8, 94u8, 213u8, 50u8, 73u8, 236u8, 221u8, 80u8, 236u8, 7u8, 120u8,
                            52u8, 178u8, 240u8, 243u8, 40u8, 226u8, 18u8, 144u8, 70u8, 253u8,
                        ],
                    )
                }
                #[doc = "Send a batch of dispatch calls and atomically execute them."]
                #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub fn batch_all(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::moonbase_runtime::RuntimeCall>,
                ) -> ::subxt::tx::Payload<types::BatchAll> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "batch_all",
                        types::BatchAll { calls },
                        [
                            205u8, 142u8, 253u8, 22u8, 180u8, 8u8, 133u8, 243u8, 112u8, 59u8, 82u8,
                            226u8, 40u8, 87u8, 220u8, 152u8, 246u8, 209u8, 46u8, 152u8, 157u8,
                            30u8, 61u8, 195u8, 147u8, 5u8, 204u8, 183u8, 195u8, 116u8, 67u8, 147u8,
                        ],
                    )
                }
                #[doc = "Dispatches a function call with a provided origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn dispatch_as(
                    &self,
                    as_origin: runtime_types::moonbase_runtime::OriginCaller,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::DispatchAs> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "dispatch_as",
                        types::DispatchAs {
                            as_origin: ::std::boxed::Box::new(as_origin),
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            105u8, 117u8, 200u8, 93u8, 124u8, 154u8, 86u8, 231u8, 79u8, 186u8,
                            48u8, 45u8, 11u8, 236u8, 50u8, 47u8, 26u8, 244u8, 110u8, 61u8, 204u8,
                            32u8, 25u8, 126u8, 163u8, 56u8, 241u8, 247u8, 91u8, 142u8, 157u8, 99u8,
                        ],
                    )
                }
                #[doc = "Send a batch of dispatch calls."]
                #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub fn force_batch(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::moonbase_runtime::RuntimeCall>,
                ) -> ::subxt::tx::Payload<types::ForceBatch> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "force_batch",
                        types::ForceBatch { calls },
                        [
                            189u8, 128u8, 159u8, 71u8, 248u8, 209u8, 114u8, 161u8, 100u8, 231u8,
                            171u8, 196u8, 85u8, 23u8, 81u8, 27u8, 96u8, 224u8, 133u8, 135u8, 151u8,
                            38u8, 65u8, 171u8, 27u8, 109u8, 228u8, 104u8, 135u8, 124u8, 13u8, 54u8,
                        ],
                    )
                }
                #[doc = "Dispatch a function call with a specified weight."]
                #[doc = ""]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Root origin to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                pub fn with_weight(
                    &self,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                    weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::WithWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "with_weight",
                        types::WithWeight {
                            call: ::std::boxed::Box::new(call),
                            weight,
                        },
                        [
                            101u8, 24u8, 163u8, 57u8, 47u8, 243u8, 119u8, 80u8, 218u8, 149u8,
                            164u8, 85u8, 76u8, 242u8, 232u8, 216u8, 145u8, 27u8, 53u8, 130u8, 65u8,
                            215u8, 251u8, 59u8, 163u8, 79u8, 213u8, 219u8, 14u8, 239u8, 71u8, 48u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_utility::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
            #[doc = "well as the error."]
            pub struct BatchInterrupted {
                pub index: ::core::primitive::u32,
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl ::subxt::events::StaticEvent for BatchInterrupted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchInterrupted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Batch of dispatches completed fully with no error."]
            pub struct BatchCompleted;
            impl ::subxt::events::StaticEvent for BatchCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Batch of dispatches completed but has errors."]
            pub struct BatchCompletedWithErrors;
            impl ::subxt::events::StaticEvent for BatchCompletedWithErrors {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompletedWithErrors";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single item within a Batch of dispatches has completed with no error."]
            pub struct ItemCompleted;
            impl ::subxt::events::StaticEvent for ItemCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single item within a Batch of dispatches has completed with error."]
            pub struct ItemFailed {
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl ::subxt::events::StaticEvent for ItemFailed {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A call was dispatched."]
            pub struct DispatchedAs {
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for DispatchedAs {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "DispatchedAs";
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The limit on the number of batched calls."]
                pub fn batched_calls_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Utility",
                        "batched_calls_limit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod timestamp {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_timestamp::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Set {
                    #[codec(compact)]
                    pub now: ::core::primitive::u64,
                }
                impl ::subxt::blocks::StaticExtrinsic for Set {
                    const PALLET: &'static str = "Timestamp";
                    const CALL: &'static str = "set";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the current time."]
                #[doc = ""]
                #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase, if this call hasn't been invoked by that time."]
                #[doc = ""]
                #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                #[doc = "`MinimumPeriod`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Inherent`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
                #[doc = "  `on_finalize`)"]
                #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                pub fn set(&self, now: ::core::primitive::u64) -> ::subxt::tx::Payload<types::Set> {
                    ::subxt::tx::Payload::new_static(
                        "Timestamp",
                        "set",
                        types::Set { now },
                        [
                            37u8, 95u8, 49u8, 218u8, 24u8, 22u8, 0u8, 95u8, 72u8, 35u8, 155u8,
                            199u8, 213u8, 54u8, 207u8, 22u8, 185u8, 193u8, 221u8, 70u8, 18u8,
                            200u8, 4u8, 231u8, 195u8, 173u8, 6u8, 122u8, 11u8, 203u8, 231u8, 227u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Current time for the current block."]
                pub fn now(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Timestamp",
                        "Now",
                        vec![],
                        [
                            44u8, 50u8, 80u8, 30u8, 195u8, 146u8, 123u8, 238u8, 8u8, 163u8, 187u8,
                            92u8, 61u8, 39u8, 51u8, 29u8, 173u8, 169u8, 217u8, 158u8, 85u8, 187u8,
                            141u8, 26u8, 12u8, 115u8, 51u8, 11u8, 200u8, 244u8, 138u8, 152u8,
                        ],
                    )
                }
                #[doc = " Did the timestamp get updated in this block?"]
                pub fn did_update(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Timestamp",
                        "DidUpdate",
                        vec![],
                        [
                            229u8, 175u8, 246u8, 102u8, 237u8, 158u8, 212u8, 229u8, 238u8, 214u8,
                            205u8, 160u8, 164u8, 252u8, 195u8, 75u8, 139u8, 110u8, 22u8, 34u8,
                            248u8, 204u8, 107u8, 46u8, 20u8, 200u8, 238u8, 167u8, 71u8, 41u8,
                            214u8, 140u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum period between blocks. Beware that this is different to the *expected*"]
                #[doc = " period that the block production apparatus provides. Your chosen consensus system will"]
                #[doc = " generally work with this to determine a sensible block time. e.g. For Aura, it will be"]
                #[doc = " double this period on default settings."]
                pub fn minimum_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Timestamp",
                        "MinimumPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod balances {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_balances::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_balances::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferAllowDeath {
                    pub dest: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferAllowDeath {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_allow_death";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetBalanceDeprecated {
                    pub who: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub new_free: ::core::primitive::u128,
                    #[codec(compact)]
                    pub old_reserved: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetBalanceDeprecated {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "set_balance_deprecated";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceTransfer {
                    pub source: runtime_types::account::AccountId20,
                    pub dest: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceTransfer {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferKeepAlive {
                    pub dest: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferKeepAlive {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_keep_alive";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferAll {
                    pub dest: runtime_types::account::AccountId20,
                    pub keep_alive: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferAll {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_all";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceUnreserve {
                    pub who: runtime_types::account::AccountId20,
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceUnreserve {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_unreserve";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpgradeAccounts {
                    pub who: ::std::vec::Vec<runtime_types::account::AccountId20>,
                }
                impl ::subxt::blocks::StaticExtrinsic for UpgradeAccounts {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "upgrade_accounts";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    pub dest: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceSetBalance {
                    pub who: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub new_free: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSetBalance {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_set_balance";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Transfer some liquid free balance to another account."]
                #[doc = ""]
                #[doc = "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver."]
                #[doc = "If the sender's account is below the existential deposit as a result"]
                #[doc = "of the transfer, the account will be reaped."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                pub fn transfer_allow_death(
                    &self,
                    dest: runtime_types::account::AccountId20,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::TransferAllowDeath> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_allow_death",
                        types::TransferAllowDeath { dest, value },
                        [
                            170u8, 183u8, 55u8, 90u8, 158u8, 129u8, 185u8, 45u8, 22u8, 189u8,
                            183u8, 226u8, 208u8, 179u8, 125u8, 116u8, 135u8, 24u8, 130u8, 138u8,
                            7u8, 187u8, 160u8, 6u8, 125u8, 81u8, 42u8, 2u8, 52u8, 166u8, 235u8,
                            19u8,
                        ],
                    )
                }
                #[doc = "Set the regular balance of a given account; it also takes a reserved balance but this"]
                #[doc = "must be the same as the account's current reserved balance."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call is `root`."]
                #[doc = ""]
                #[doc = "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."]
                pub fn set_balance_deprecated(
                    &self,
                    who: runtime_types::account::AccountId20,
                    new_free: ::core::primitive::u128,
                    old_reserved: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::SetBalanceDeprecated> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "set_balance_deprecated",
                        types::SetBalanceDeprecated {
                            who,
                            new_free,
                            old_reserved,
                        },
                        [
                            150u8, 18u8, 79u8, 53u8, 21u8, 227u8, 79u8, 105u8, 243u8, 58u8, 26u8,
                            254u8, 73u8, 40u8, 233u8, 176u8, 227u8, 158u8, 233u8, 178u8, 72u8,
                            128u8, 177u8, 182u8, 15u8, 119u8, 134u8, 162u8, 249u8, 56u8, 140u8,
                            160u8,
                        ],
                    )
                }
                #[doc = "Exactly as `transfer_allow_death`, except the origin must be root and the source account"]
                #[doc = "may be specified."]
                pub fn force_transfer(
                    &self,
                    source: runtime_types::account::AccountId20,
                    dest: runtime_types::account::AccountId20,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_transfer",
                        types::ForceTransfer {
                            source,
                            dest,
                            value,
                        },
                        [
                            36u8, 161u8, 9u8, 149u8, 23u8, 63u8, 220u8, 12u8, 28u8, 133u8, 98u8,
                            252u8, 211u8, 72u8, 11u8, 130u8, 48u8, 191u8, 161u8, 58u8, 221u8, 96u8,
                            250u8, 26u8, 53u8, 238u8, 17u8, 191u8, 223u8, 104u8, 86u8, 98u8,
                        ],
                    )
                }
                #[doc = "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not"]
                #[doc = "kill the origin account."]
                #[doc = ""]
                #[doc = "99% of the time you want [`transfer_allow_death`] instead."]
                #[doc = ""]
                #[doc = "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"]
                pub fn transfer_keep_alive(
                    &self,
                    dest: runtime_types::account::AccountId20,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::TransferKeepAlive> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_keep_alive",
                        types::TransferKeepAlive { dest, value },
                        [
                            74u8, 57u8, 223u8, 189u8, 54u8, 162u8, 17u8, 85u8, 239u8, 155u8, 92u8,
                            220u8, 78u8, 225u8, 91u8, 187u8, 189u8, 113u8, 72u8, 130u8, 232u8,
                            115u8, 75u8, 184u8, 83u8, 98u8, 252u8, 156u8, 137u8, 223u8, 68u8,
                            184u8,
                        ],
                    )
                }
                #[doc = "Transfer the entire transferable balance from the caller account."]
                #[doc = ""]
                #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                #[doc = "deposits, etc..."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be Signed."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                #[doc = "  keep the sender account alive (true)."]
                pub fn transfer_all(
                    &self,
                    dest: runtime_types::account::AccountId20,
                    keep_alive: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::TransferAll> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_all",
                        types::TransferAll { dest, keep_alive },
                        [
                            244u8, 113u8, 187u8, 2u8, 150u8, 160u8, 107u8, 183u8, 37u8, 89u8,
                            144u8, 97u8, 107u8, 37u8, 101u8, 39u8, 64u8, 255u8, 182u8, 162u8,
                            198u8, 192u8, 2u8, 202u8, 156u8, 112u8, 91u8, 82u8, 203u8, 114u8,
                            187u8, 61u8,
                        ],
                    )
                }
                #[doc = "Unreserve some balance from a user by force."]
                #[doc = ""]
                #[doc = "Can only be called by ROOT."]
                pub fn force_unreserve(
                    &self,
                    who: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceUnreserve> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_unreserve",
                        types::ForceUnreserve { who, amount },
                        [
                            123u8, 50u8, 50u8, 66u8, 70u8, 79u8, 101u8, 176u8, 243u8, 126u8, 123u8,
                            90u8, 54u8, 239u8, 169u8, 132u8, 105u8, 220u8, 61u8, 176u8, 185u8,
                            20u8, 138u8, 237u8, 130u8, 158u8, 161u8, 198u8, 203u8, 185u8, 205u8,
                            193u8,
                        ],
                    )
                }
                #[doc = "Upgrade a specified account."]
                #[doc = ""]
                #[doc = "- `origin`: Must be `Signed`."]
                #[doc = "- `who`: The account to be upgraded."]
                #[doc = ""]
                #[doc = "This will waive the transaction fee if at least all but 10% of the accounts needed to"]
                #[doc = "be upgraded. (We let some not have to be upgraded just in order to allow for the"]
                #[doc = "possibililty of churn)."]
                pub fn upgrade_accounts(
                    &self,
                    who: ::std::vec::Vec<runtime_types::account::AccountId20>,
                ) -> ::subxt::tx::Payload<types::UpgradeAccounts> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "upgrade_accounts",
                        types::UpgradeAccounts { who },
                        [
                            249u8, 91u8, 142u8, 5u8, 224u8, 39u8, 121u8, 223u8, 150u8, 120u8,
                            147u8, 82u8, 44u8, 42u8, 240u8, 195u8, 136u8, 90u8, 31u8, 72u8, 35u8,
                            140u8, 193u8, 43u8, 112u8, 144u8, 10u8, 61u8, 227u8, 140u8, 2u8, 126u8,
                        ],
                    )
                }
                #[doc = "Alias for `transfer_allow_death`, provided only for name-wise compatibility."]
                #[doc = ""]
                #[doc = "WARNING: DEPRECATED! Will be released in approximately 3 months."]
                pub fn transfer(
                    &self,
                    dest: runtime_types::account::AccountId20,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer",
                        types::Transfer { dest, value },
                        [
                            10u8, 190u8, 141u8, 136u8, 57u8, 159u8, 177u8, 185u8, 192u8, 14u8,
                            179u8, 84u8, 31u8, 135u8, 101u8, 8u8, 76u8, 59u8, 225u8, 162u8, 227u8,
                            160u8, 99u8, 88u8, 218u8, 114u8, 171u8, 31u8, 37u8, 180u8, 222u8,
                            233u8,
                        ],
                    )
                }
                #[doc = "Set the regular balance of a given account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call is `root`."]
                pub fn force_set_balance(
                    &self,
                    who: runtime_types::account::AccountId20,
                    new_free: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceSetBalance> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_set_balance",
                        types::ForceSetBalance { who, new_free },
                        [
                            91u8, 28u8, 236u8, 62u8, 238u8, 92u8, 214u8, 23u8, 63u8, 219u8, 164u8,
                            24u8, 97u8, 57u8, 25u8, 129u8, 42u8, 151u8, 32u8, 206u8, 83u8, 140u8,
                            203u8, 199u8, 96u8, 32u8, 61u8, 255u8, 135u8, 185u8, 226u8, 81u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_balances::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was created with some free balance."]
            pub struct Endowed {
                pub account: runtime_types::account::AccountId20,
                pub free_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Endowed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
            #[doc = "resulting in an outright loss."]
            pub struct DustLost {
                pub account: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DustLost {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Transfer succeeded."]
            pub struct Transfer {
                pub from: runtime_types::account::AccountId20,
                pub to: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Transfer {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A balance was set by root."]
            pub struct BalanceSet {
                pub who: runtime_types::account::AccountId20,
                pub free: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was reserved (moved from free to reserved)."]
            pub struct Reserved {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was unreserved (moved from reserved to free)."]
            pub struct Unreserved {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was moved from the reserve of the first account to the second account."]
            #[doc = "Final argument indicates the destination balance type."]
            pub struct ReserveRepatriated {
                pub from: runtime_types::account::AccountId20,
                pub to: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
                pub destination_status:
                    runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
            }
            impl ::subxt::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was deposited (e.g. for transaction fees)."]
            pub struct Deposit {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
            pub struct Withdraw {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Withdraw {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Withdraw";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
            pub struct Slashed {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was minted into an account."]
            pub struct Minted {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Minted {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Minted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was burned from an account."]
            pub struct Burned {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Burned {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was suspended from an account (it can be restored later)."]
            pub struct Suspended {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Suspended {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Suspended";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was restored into an account."]
            pub struct Restored {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Restored {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Restored";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was upgraded."]
            pub struct Upgraded {
                pub who: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Upgraded {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Upgraded";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Total issuance was increased by `amount`, creating a credit to be balanced."]
            pub struct Issued {
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Issued {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Total issuance was decreased by `amount`, creating a debt to be balanced."]
            pub struct Rescinded {
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rescinded {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Rescinded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was locked."]
            pub struct Locked {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Locked {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Locked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was unlocked."]
            pub struct Unlocked {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Unlocked {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unlocked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was frozen."]
            pub struct Frozen {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Frozen {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Frozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was thawed."]
            pub struct Thawed {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Thawed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Thawed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The total units issued in the system."]
                pub fn total_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "TotalIssuance",
                        vec![],
                        [
                            116u8, 70u8, 119u8, 194u8, 69u8, 37u8, 116u8, 206u8, 171u8, 70u8,
                            171u8, 210u8, 226u8, 111u8, 184u8, 204u8, 206u8, 11u8, 68u8, 72u8,
                            255u8, 19u8, 194u8, 11u8, 27u8, 194u8, 81u8, 204u8, 59u8, 224u8, 202u8,
                            185u8,
                        ],
                    )
                }
                #[doc = " The total units of outstanding deactivated balance in the system."]
                pub fn inactive_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "InactiveIssuance",
                        vec![],
                        [
                            212u8, 185u8, 19u8, 50u8, 250u8, 72u8, 173u8, 50u8, 4u8, 104u8, 161u8,
                            249u8, 77u8, 247u8, 204u8, 248u8, 11u8, 18u8, 57u8, 4u8, 82u8, 110u8,
                            30u8, 216u8, 16u8, 37u8, 87u8, 67u8, 189u8, 235u8, 214u8, 155u8,
                        ],
                    )
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Account",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            4u8, 32u8, 254u8, 218u8, 216u8, 126u8, 196u8, 64u8, 246u8, 55u8, 43u8,
                            85u8, 100u8, 29u8, 212u8, 25u8, 105u8, 74u8, 73u8, 204u8, 249u8, 49u8,
                            53u8, 77u8, 66u8, 159u8, 45u8, 18u8, 8u8, 15u8, 185u8, 45u8,
                        ],
                    )
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Account",
                        Vec::new(),
                        [
                            4u8, 32u8, 254u8, 218u8, 216u8, 126u8, 196u8, 64u8, 246u8, 55u8, 43u8,
                            85u8, 100u8, 29u8, 212u8, 25u8, 105u8, 74u8, 73u8, 204u8, 249u8, 49u8,
                            53u8, 77u8, 66u8, 159u8, 45u8, 18u8, 8u8, 15u8, 185u8, 45u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::pallet_balances::types::BalanceLock<::core::primitive::u128>,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Locks",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            81u8, 204u8, 13u8, 224u8, 52u8, 52u8, 0u8, 155u8, 83u8, 151u8, 116u8,
                            28u8, 188u8, 135u8, 35u8, 220u8, 153u8, 116u8, 140u8, 76u8, 185u8,
                            241u8, 54u8, 96u8, 93u8, 25u8, 54u8, 6u8, 68u8, 130u8, 106u8, 114u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::pallet_balances::types::BalanceLock<::core::primitive::u128>,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Locks",
                        Vec::new(),
                        [
                            81u8, 204u8, 13u8, 224u8, 52u8, 52u8, 0u8, 155u8, 83u8, 151u8, 116u8,
                            28u8, 188u8, 135u8, 35u8, 220u8, 153u8, 116u8, 140u8, 76u8, 185u8,
                            241u8, 54u8, 96u8, 93u8, 25u8, 54u8, 6u8, 68u8, 130u8, 106u8, 114u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::ReserveData<
                            [::core::primitive::u8; 4usize],
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Reserves",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            243u8, 225u8, 132u8, 134u8, 109u8, 54u8, 38u8, 173u8, 94u8, 249u8,
                            31u8, 235u8, 22u8, 149u8, 239u8, 238u8, 115u8, 60u8, 108u8, 22u8, 82u8,
                            32u8, 64u8, 87u8, 47u8, 134u8, 186u8, 79u8, 36u8, 73u8, 62u8, 7u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::ReserveData<
                            [::core::primitive::u8; 4usize],
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Reserves",
                        Vec::new(),
                        [
                            243u8, 225u8, 132u8, 134u8, 109u8, 54u8, 38u8, 173u8, 94u8, 249u8,
                            31u8, 235u8, 22u8, 149u8, 239u8, 238u8, 115u8, 60u8, 108u8, 22u8, 82u8,
                            32u8, 64u8, 87u8, 47u8, 134u8, 186u8, 79u8, 36u8, 73u8, 62u8, 7u8,
                        ],
                    )
                }
                #[doc = " Holds on account balances."]
                pub fn holds(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::IdAmount<
                            (),
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Holds",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            92u8, 189u8, 45u8, 43u8, 77u8, 46u8, 105u8, 122u8, 73u8, 123u8, 75u8,
                            180u8, 89u8, 126u8, 121u8, 94u8, 247u8, 49u8, 15u8, 106u8, 59u8, 132u8,
                            61u8, 35u8, 172u8, 253u8, 144u8, 210u8, 225u8, 80u8, 241u8, 166u8,
                        ],
                    )
                }
                #[doc = " Holds on account balances."]
                pub fn holds_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::IdAmount<
                            (),
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Holds",
                        Vec::new(),
                        [
                            92u8, 189u8, 45u8, 43u8, 77u8, 46u8, 105u8, 122u8, 73u8, 123u8, 75u8,
                            180u8, 89u8, 126u8, 121u8, 94u8, 247u8, 49u8, 15u8, 106u8, 59u8, 132u8,
                            61u8, 35u8, 172u8, 253u8, 144u8, 210u8, 225u8, 80u8, 241u8, 166u8,
                        ],
                    )
                }
                #[doc = " Freeze locks on account balances."]
                pub fn freezes(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::IdAmount<
                            (),
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Freezes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            193u8, 96u8, 145u8, 17u8, 62u8, 144u8, 97u8, 198u8, 175u8, 126u8,
                            201u8, 145u8, 223u8, 254u8, 154u8, 223u8, 68u8, 254u8, 53u8, 107u8,
                            0u8, 128u8, 172u8, 47u8, 152u8, 192u8, 180u8, 211u8, 133u8, 135u8,
                            245u8, 188u8,
                        ],
                    )
                }
                #[doc = " Freeze locks on account balances."]
                pub fn freezes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::IdAmount<
                            (),
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Freezes",
                        Vec::new(),
                        [
                            193u8, 96u8, 145u8, 17u8, 62u8, 144u8, 97u8, 198u8, 175u8, 126u8,
                            201u8, 145u8, 223u8, 254u8, 154u8, 223u8, 68u8, 254u8, 53u8, 107u8,
                            0u8, 128u8, 172u8, 47u8, 152u8, 192u8, 180u8, 211u8, 133u8, 135u8,
                            245u8, 188u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!"]
                #[doc = ""]
                #[doc = " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for"]
                #[doc = " this pallet. However, you do so at your own risk: this will open up a major DoS vector."]
                #[doc = " In case you have multiple sources of provider references, you may also get unexpected"]
                #[doc = " behaviour if you set this to zero."]
                #[doc = ""]
                #[doc = " Bottom line: Do yourself a favour and make it at least one!"]
                pub fn existential_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "ExistentialDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of locks that should exist on an account."]
                #[doc = " Not strictly enforced, but used for weight estimation."]
                pub fn max_locks(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of named reserves that can exist on an account."]
                pub fn max_reserves(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of holds that can exist on an account at any time."]
                pub fn max_holds(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxHolds",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of individual freeze locks that can exist on an account at any time."]
                pub fn max_freezes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxFreezes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod sudo {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the Sudo pallet"]
        pub type Error = runtime_types::pallet_sudo::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_sudo::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Sudo {
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Sudo {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoUncheckedWeight {
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    pub weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoUncheckedWeight {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo_unchecked_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetKey {
                    pub new: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetKey {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "set_key";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoAs {
                    pub who: runtime_types::account::AccountId20,
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoAs {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo_as";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn sudo(
                    &self,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::Sudo> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo",
                        types::Sudo {
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            119u8, 60u8, 31u8, 94u8, 50u8, 196u8, 102u8, 175u8, 150u8, 241u8,
                            237u8, 143u8, 22u8, 239u8, 146u8, 235u8, 215u8, 168u8, 235u8, 153u8,
                            189u8, 142u8, 226u8, 222u8, 152u8, 185u8, 232u8, 58u8, 172u8, 191u8,
                            77u8, 226u8,
                        ],
                    )
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Sudo user to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn sudo_unchecked_weight(
                    &self,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                    weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::SudoUncheckedWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo_unchecked_weight",
                        types::SudoUncheckedWeight {
                            call: ::std::boxed::Box::new(call),
                            weight,
                        },
                        [
                            127u8, 124u8, 84u8, 201u8, 181u8, 154u8, 11u8, 44u8, 12u8, 152u8,
                            231u8, 154u8, 32u8, 119u8, 219u8, 144u8, 160u8, 40u8, 253u8, 158u8,
                            96u8, 160u8, 45u8, 135u8, 248u8, 132u8, 199u8, 27u8, 222u8, 8u8, 118u8,
                            178u8,
                        ],
                    )
                }
                #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                #[doc = "key."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn set_key(
                    &self,
                    new: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::SetKey> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "set_key",
                        types::SetKey { new },
                        [
                            238u8, 140u8, 16u8, 19u8, 56u8, 31u8, 53u8, 0u8, 211u8, 184u8, 54u8,
                            107u8, 73u8, 23u8, 54u8, 134u8, 135u8, 54u8, 143u8, 89u8, 157u8, 179u8,
                            185u8, 168u8, 31u8, 167u8, 173u8, 125u8, 104u8, 145u8, 239u8, 219u8,
                        ],
                    )
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                #[doc = "a given account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn sudo_as(
                    &self,
                    who: runtime_types::account::AccountId20,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::SudoAs> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo_as",
                        types::SudoAs {
                            who,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            249u8, 48u8, 67u8, 121u8, 96u8, 157u8, 192u8, 143u8, 231u8, 153u8,
                            67u8, 18u8, 232u8, 70u8, 32u8, 60u8, 112u8, 238u8, 77u8, 227u8, 178u8,
                            63u8, 150u8, 236u8, 70u8, 130u8, 129u8, 226u8, 62u8, 220u8, 166u8, 3u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_sudo::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct Sudid {
                pub sudo_result:
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Sudid {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "Sudid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
            pub struct KeyChanged {
                pub old_sudoer: ::core::option::Option<runtime_types::account::AccountId20>,
            }
            impl ::subxt::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct SudoAsDone {
                pub sudo_result:
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for SudoAsDone {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "SudoAsDone";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The `AccountId` of the sudo key."]
                pub fn key(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::account::AccountId20,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Sudo",
                        "Key",
                        vec![],
                        [
                            158u8, 215u8, 223u8, 217u8, 35u8, 56u8, 30u8, 236u8, 175u8, 210u8,
                            217u8, 34u8, 129u8, 233u8, 209u8, 131u8, 102u8, 70u8, 130u8, 55u8,
                            115u8, 41u8, 33u8, 30u8, 22u8, 39u8, 135u8, 150u8, 173u8, 228u8, 222u8,
                            164u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachain_system {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::cumulus_pallet_parachain_system::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::cumulus_pallet_parachain_system::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetValidationData {
                    pub data:
                        runtime_types::cumulus_primitives_parachain_inherent::ParachainInherentData,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetValidationData {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "set_validation_data";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSendUpwardMessage {
                    pub message: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSendUpwardMessage {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "sudo_send_upward_message";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AuthorizeUpgrade {
                    pub code_hash: ::subxt::utils::H256,
                    pub check_version: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for AuthorizeUpgrade {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "authorize_upgrade";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EnactAuthorizedUpgrade {
                    pub code: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for EnactAuthorizedUpgrade {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "enact_authorized_upgrade";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the current validation data."]
                #[doc = ""]
                #[doc = "This should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase if the call was not invoked."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Inherent`"]
                #[doc = ""]
                #[doc = "As a side effect, this function upgrades the current validation function"]
                #[doc = "if the appropriate time has come."]
                pub fn set_validation_data(
                    &self,
                    data : runtime_types :: cumulus_primitives_parachain_inherent :: ParachainInherentData,
                ) -> ::subxt::tx::Payload<types::SetValidationData> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainSystem",
                        "set_validation_data",
                        types::SetValidationData { data },
                        [
                            167u8, 126u8, 75u8, 137u8, 220u8, 60u8, 106u8, 214u8, 92u8, 170u8,
                            136u8, 176u8, 98u8, 0u8, 234u8, 217u8, 146u8, 113u8, 149u8, 88u8,
                            114u8, 141u8, 228u8, 105u8, 136u8, 71u8, 233u8, 18u8, 70u8, 36u8, 24u8,
                            249u8,
                        ],
                    )
                }
                pub fn sudo_send_upward_message(
                    &self,
                    message: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::SudoSendUpwardMessage> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainSystem",
                        "sudo_send_upward_message",
                        types::SudoSendUpwardMessage { message },
                        [
                            1u8, 231u8, 11u8, 78u8, 127u8, 117u8, 248u8, 67u8, 230u8, 199u8, 126u8,
                            47u8, 20u8, 62u8, 252u8, 138u8, 199u8, 48u8, 41u8, 21u8, 28u8, 157u8,
                            218u8, 143u8, 4u8, 253u8, 62u8, 192u8, 94u8, 252u8, 92u8, 180u8,
                        ],
                    )
                }
                #[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
                #[doc = "later."]
                #[doc = ""]
                #[doc = "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec"]
                #[doc = "version and name should be verified on upgrade. Since the authorization only has a hash,"]
                #[doc = "it cannot actually perform the verification."]
                #[doc = ""]
                #[doc = "This call requires Root origin."]
                pub fn authorize_upgrade(
                    &self,
                    code_hash: ::subxt::utils::H256,
                    check_version: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::AuthorizeUpgrade> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainSystem",
                        "authorize_upgrade",
                        types::AuthorizeUpgrade {
                            code_hash,
                            check_version,
                        },
                        [
                            213u8, 114u8, 107u8, 169u8, 223u8, 147u8, 205u8, 204u8, 3u8, 81u8,
                            228u8, 0u8, 82u8, 57u8, 43u8, 95u8, 12u8, 59u8, 241u8, 176u8, 143u8,
                            131u8, 253u8, 166u8, 98u8, 187u8, 94u8, 235u8, 177u8, 110u8, 162u8,
                            218u8,
                        ],
                    )
                }
                #[doc = "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized."]
                #[doc = ""]
                #[doc = "If the authorization required a version check, this call will ensure the spec name"]
                #[doc = "remains unchanged and that the spec version has increased."]
                #[doc = ""]
                #[doc = "Note that this function will not apply the new `code`, but only attempt to schedule the"]
                #[doc = "upgrade with the Relay Chain."]
                #[doc = ""]
                #[doc = "All origins are allowed."]
                pub fn enact_authorized_upgrade(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::EnactAuthorizedUpgrade> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainSystem",
                        "enact_authorized_upgrade",
                        types::EnactAuthorizedUpgrade { code },
                        [
                            232u8, 135u8, 114u8, 87u8, 196u8, 146u8, 244u8, 19u8, 106u8, 73u8,
                            88u8, 193u8, 48u8, 14u8, 72u8, 133u8, 247u8, 147u8, 50u8, 95u8, 252u8,
                            213u8, 192u8, 47u8, 244u8, 102u8, 195u8, 120u8, 179u8, 87u8, 94u8, 8u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::cumulus_pallet_parachain_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The validation function has been scheduled to apply."]
            pub struct ValidationFunctionStored;
            impl ::subxt::events::StaticEvent for ValidationFunctionStored {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionStored";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The validation function was applied as of the contained relay chain block number."]
            pub struct ValidationFunctionApplied {
                pub relay_chain_block_num: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ValidationFunctionApplied {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionApplied";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The relay-chain aborted the upgrade process."]
            pub struct ValidationFunctionDiscarded;
            impl ::subxt::events::StaticEvent for ValidationFunctionDiscarded {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionDiscarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An upgrade has been authorized."]
            pub struct UpgradeAuthorized {
                pub code_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for UpgradeAuthorized {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "UpgradeAuthorized";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some downward messages have been received and will be processed."]
            pub struct DownwardMessagesReceived {
                pub count: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for DownwardMessagesReceived {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "DownwardMessagesReceived";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Downward messages were processed using the given weight."]
            pub struct DownwardMessagesProcessed {
                pub weight_used: runtime_types::sp_weights::weight_v2::Weight,
                pub dmq_head: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for DownwardMessagesProcessed {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "DownwardMessagesProcessed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An upward message was sent to the relay chain."]
            pub struct UpwardMessageSent {
                pub message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
            }
            impl ::subxt::events::StaticEvent for UpwardMessageSent {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "UpwardMessageSent";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " In case of a scheduled upgrade, this storage field contains the validation code to be applied."]
                #[doc = ""]
                #[doc = " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]"]
                #[doc = " which will result the next block process with the new validation code. This concludes the upgrade process."]
                #[doc = ""]
                #[doc = " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"]
                pub fn pending_validation_code(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "PendingValidationCode",
                        vec![],
                        [
                            78u8, 159u8, 219u8, 211u8, 177u8, 80u8, 102u8, 93u8, 83u8, 146u8, 90u8,
                            233u8, 232u8, 11u8, 104u8, 172u8, 93u8, 68u8, 44u8, 228u8, 99u8, 197u8,
                            254u8, 28u8, 181u8, 215u8, 247u8, 238u8, 49u8, 49u8, 195u8, 249u8,
                        ],
                    )
                }
                #[doc = " Validation code that is set by the parachain and is to be communicated to collator and"]
                #[doc = " consequently the relay-chain."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block if no other pallet already set"]
                #[doc = " the value."]
                pub fn new_validation_code(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "NewValidationCode",
                        vec![],
                        [
                            185u8, 123u8, 152u8, 122u8, 230u8, 136u8, 79u8, 73u8, 206u8, 19u8,
                            59u8, 57u8, 75u8, 250u8, 83u8, 185u8, 29u8, 76u8, 89u8, 137u8, 77u8,
                            163u8, 25u8, 125u8, 182u8, 67u8, 2u8, 180u8, 48u8, 237u8, 49u8, 171u8,
                        ],
                    )
                }
                #[doc = " The [`PersistedValidationData`] set for this block."]
                #[doc = " This value is expected to be set only once per block and it's never stored"]
                #[doc = " in the trie."]
                pub fn validation_data(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::v4::PersistedValidationData<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "ValidationData",
                        vec![],
                        [
                            193u8, 240u8, 25u8, 56u8, 103u8, 173u8, 56u8, 56u8, 229u8, 243u8, 91u8,
                            25u8, 249u8, 95u8, 122u8, 93u8, 37u8, 181u8, 54u8, 244u8, 217u8, 200u8,
                            62u8, 136u8, 80u8, 148u8, 16u8, 177u8, 124u8, 211u8, 95u8, 24u8,
                        ],
                    )
                }
                #[doc = " Were the validation data set to notify the relay chain?"]
                pub fn did_set_validation_code(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "DidSetValidationCode",
                        vec![],
                        [
                            233u8, 228u8, 48u8, 111u8, 200u8, 35u8, 30u8, 139u8, 251u8, 77u8,
                            196u8, 252u8, 35u8, 222u8, 129u8, 235u8, 7u8, 19u8, 156u8, 82u8, 126u8,
                            173u8, 29u8, 62u8, 20u8, 67u8, 166u8, 116u8, 108u8, 182u8, 57u8, 246u8,
                        ],
                    )
                }
                #[doc = " The relay chain block number associated with the last parachain block."]
                pub fn last_relay_chain_block_number(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "LastRelayChainBlockNumber",
                        vec![],
                        [
                            17u8, 65u8, 131u8, 169u8, 195u8, 243u8, 195u8, 93u8, 220u8, 174u8,
                            75u8, 216u8, 214u8, 227u8, 96u8, 40u8, 8u8, 153u8, 116u8, 160u8, 79u8,
                            255u8, 35u8, 232u8, 242u8, 42u8, 100u8, 150u8, 208u8, 210u8, 142u8,
                            186u8,
                        ],
                    )
                }
                #[doc = " An option which indicates if the relay-chain restricts signalling a validation code upgrade."]
                #[doc = " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced"]
                #[doc = " candidate will be invalid."]
                #[doc = ""]
                #[doc = " This storage item is a mirror of the corresponding value for the current parachain from the"]
                #[doc = " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is"]
                #[doc = " set after the inherent."]
                pub fn upgrade_restriction_signal(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::option::Option<
                        runtime_types::polkadot_primitives::v4::UpgradeRestriction,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "UpgradeRestrictionSignal",
                        vec![],
                        [
                            235u8, 240u8, 37u8, 44u8, 181u8, 52u8, 7u8, 216u8, 20u8, 139u8, 69u8,
                            124u8, 21u8, 173u8, 237u8, 64u8, 105u8, 88u8, 49u8, 69u8, 123u8, 55u8,
                            181u8, 167u8, 112u8, 183u8, 190u8, 231u8, 231u8, 127u8, 77u8, 148u8,
                        ],
                    )
                }
                #[doc = " The state proof for the last relay parent block."]
                #[doc = ""]
                #[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
                #[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
                #[doc = ""]
                #[doc = " This data is also absent from the genesis."]
                pub fn relay_state_proof(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_trie::storage_proof::StorageProof,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "RelayStateProof",
                        vec![],
                        [
                            46u8, 115u8, 163u8, 190u8, 246u8, 47u8, 200u8, 159u8, 206u8, 204u8,
                            94u8, 250u8, 127u8, 112u8, 109u8, 111u8, 210u8, 195u8, 244u8, 41u8,
                            36u8, 187u8, 71u8, 150u8, 149u8, 253u8, 143u8, 33u8, 83u8, 189u8,
                            182u8, 238u8,
                        ],
                    )
                }
                #[doc = " The snapshot of some state related to messaging relevant to the current parachain as per"]
                #[doc = " the relay parent."]
                #[doc = ""]
                #[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
                #[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
                #[doc = ""]
                #[doc = " This data is also absent from the genesis."]                pub fn relevant_messaging_state (& self ,) -> :: subxt :: storage :: address :: Address :: < :: subxt :: storage :: address :: StaticStorageMapKey , runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: MessagingStateSnapshot , :: subxt :: storage :: address :: Yes , () , () >{
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "RelevantMessagingState",
                        vec![],
                        [
                            122u8, 98u8, 235u8, 251u8, 121u8, 64u8, 21u8, 37u8, 101u8, 8u8, 217u8,
                            99u8, 53u8, 5u8, 101u8, 48u8, 248u8, 181u8, 61u8, 235u8, 119u8, 203u8,
                            252u8, 210u8, 183u8, 171u8, 146u8, 31u8, 22u8, 211u8, 88u8, 96u8,
                        ],
                    )
                }
                #[doc = " The parachain host configuration that was obtained from the relay parent."]
                #[doc = ""]
                #[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
                #[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
                #[doc = ""]
                #[doc = " This data is also absent from the genesis."]
                pub fn host_configuration(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_primitives::v4::AbridgedHostConfiguration,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "HostConfiguration",
                        vec![],
                        [
                            224u8, 81u8, 104u8, 216u8, 84u8, 180u8, 220u8, 34u8, 251u8, 192u8,
                            110u8, 151u8, 172u8, 254u8, 133u8, 68u8, 16u8, 230u8, 99u8, 164u8,
                            162u8, 159u8, 189u8, 125u8, 249u8, 187u8, 148u8, 253u8, 71u8, 64u8,
                            89u8, 88u8,
                        ],
                    )
                }
                #[doc = " The last downward message queue chain head we have observed."]
                #[doc = ""]
                #[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
                #[doc = " by the system inherent."]
                pub fn last_dmq_mqc_head(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "LastDmqMqcHead",
                        vec![],
                        [
                            1u8, 70u8, 140u8, 40u8, 51u8, 127u8, 75u8, 80u8, 5u8, 49u8, 196u8,
                            31u8, 30u8, 61u8, 54u8, 252u8, 0u8, 0u8, 100u8, 115u8, 177u8, 250u8,
                            138u8, 48u8, 107u8, 41u8, 93u8, 87u8, 195u8, 107u8, 206u8, 227u8,
                        ],
                    )
                }
                #[doc = " The message queue chain heads we have observed per each channel incoming channel."]
                #[doc = ""]
                #[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
                #[doc = " by the system inherent."]
                pub fn last_hrmp_mqc_heads(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::KeyedVec<
                        runtime_types::polkadot_parachain::primitives::Id,
                        runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "LastHrmpMqcHeads",
                        vec![],
                        [
                            131u8, 170u8, 142u8, 30u8, 101u8, 113u8, 131u8, 81u8, 38u8, 168u8,
                            98u8, 3u8, 9u8, 109u8, 96u8, 179u8, 115u8, 177u8, 128u8, 11u8, 238u8,
                            54u8, 81u8, 60u8, 97u8, 112u8, 224u8, 175u8, 86u8, 133u8, 182u8, 76u8,
                        ],
                    )
                }
                #[doc = " Number of downward messages processed in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn processed_downward_messages(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "ProcessedDownwardMessages",
                        vec![],
                        [
                            151u8, 234u8, 196u8, 87u8, 130u8, 79u8, 4u8, 102u8, 47u8, 10u8, 33u8,
                            132u8, 149u8, 118u8, 61u8, 141u8, 5u8, 1u8, 30u8, 120u8, 220u8, 156u8,
                            16u8, 11u8, 14u8, 52u8, 126u8, 151u8, 244u8, 149u8, 197u8, 51u8,
                        ],
                    )
                }
                #[doc = " HRMP watermark that was set in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn hrmp_watermark(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "HrmpWatermark",
                        vec![],
                        [
                            77u8, 62u8, 59u8, 220u8, 7u8, 125u8, 98u8, 249u8, 108u8, 212u8, 223u8,
                            99u8, 152u8, 13u8, 29u8, 80u8, 166u8, 65u8, 232u8, 113u8, 145u8, 128u8,
                            123u8, 35u8, 238u8, 31u8, 113u8, 156u8, 220u8, 104u8, 217u8, 165u8,
                        ],
                    )
                }
                #[doc = " HRMP messages that were sent in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn hrmp_outbound_messages(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
                            runtime_types::polkadot_parachain::primitives::Id,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "HrmpOutboundMessages",
                        vec![],
                        [
                            42u8, 9u8, 96u8, 217u8, 25u8, 101u8, 129u8, 147u8, 150u8, 20u8, 164u8,
                            186u8, 217u8, 178u8, 15u8, 201u8, 233u8, 104u8, 92u8, 120u8, 29u8,
                            245u8, 196u8, 13u8, 141u8, 210u8, 102u8, 62u8, 216u8, 80u8, 246u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Upward messages that were sent in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn upward_messages(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "UpwardMessages",
                        vec![],
                        [
                            179u8, 127u8, 8u8, 94u8, 194u8, 246u8, 53u8, 79u8, 80u8, 22u8, 18u8,
                            75u8, 116u8, 163u8, 90u8, 161u8, 30u8, 140u8, 57u8, 126u8, 60u8, 91u8,
                            23u8, 30u8, 120u8, 245u8, 125u8, 96u8, 152u8, 25u8, 248u8, 85u8,
                        ],
                    )
                }
                #[doc = " Upward messages that are still pending and not yet send to the relay chain."]
                pub fn pending_upward_messages(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "PendingUpwardMessages",
                        vec![],
                        [
                            239u8, 45u8, 18u8, 173u8, 148u8, 150u8, 55u8, 176u8, 173u8, 156u8,
                            246u8, 226u8, 198u8, 214u8, 104u8, 187u8, 186u8, 13u8, 83u8, 194u8,
                            153u8, 29u8, 228u8, 109u8, 26u8, 18u8, 212u8, 151u8, 246u8, 24u8,
                            133u8, 216u8,
                        ],
                    )
                }
                #[doc = " The number of HRMP messages we observed in `on_initialize` and thus used that number for"]
                #[doc = " announcing the weight of `on_initialize` and `on_finalize`."]
                pub fn announced_hrmp_messages_per_candidate(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "AnnouncedHrmpMessagesPerCandidate",
                        vec![],
                        [
                            93u8, 11u8, 229u8, 172u8, 73u8, 87u8, 13u8, 149u8, 15u8, 94u8, 163u8,
                            107u8, 156u8, 22u8, 131u8, 177u8, 96u8, 247u8, 213u8, 224u8, 41u8,
                            126u8, 157u8, 33u8, 154u8, 194u8, 95u8, 234u8, 65u8, 19u8, 58u8, 161u8,
                        ],
                    )
                }
                #[doc = " The weight we reserve at the beginning of the block for processing XCMP messages. This"]
                #[doc = " overrides the amount set in the Config trait."]
                pub fn reserved_xcmp_weight_override(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_weights::weight_v2::Weight,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "ReservedXcmpWeightOverride",
                        vec![],
                        [
                            176u8, 93u8, 203u8, 74u8, 18u8, 170u8, 246u8, 203u8, 109u8, 89u8, 86u8,
                            77u8, 96u8, 66u8, 189u8, 79u8, 184u8, 253u8, 11u8, 230u8, 87u8, 120u8,
                            1u8, 254u8, 215u8, 41u8, 210u8, 86u8, 239u8, 206u8, 60u8, 2u8,
                        ],
                    )
                }
                #[doc = " The weight we reserve at the beginning of the block for processing DMP messages. This"]
                #[doc = " overrides the amount set in the Config trait."]
                pub fn reserved_dmp_weight_override(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_weights::weight_v2::Weight,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "ReservedDmpWeightOverride",
                        vec![],
                        [
                            205u8, 124u8, 9u8, 156u8, 255u8, 207u8, 208u8, 23u8, 179u8, 132u8,
                            254u8, 157u8, 237u8, 240u8, 167u8, 203u8, 253u8, 111u8, 136u8, 32u8,
                            100u8, 152u8, 16u8, 19u8, 175u8, 14u8, 108u8, 61u8, 59u8, 231u8, 70u8,
                            112u8,
                        ],
                    )
                }
                #[doc = " The next authorized upgrade, if there is one."]
                pub fn authorized_upgrade(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::cumulus_pallet_parachain_system::CodeUpgradeAuthorization,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "AuthorizedUpgrade",
                        vec![],
                        [
                            165u8, 97u8, 27u8, 138u8, 2u8, 28u8, 55u8, 92u8, 96u8, 96u8, 168u8,
                            169u8, 55u8, 178u8, 44u8, 127u8, 58u8, 140u8, 206u8, 178u8, 1u8, 37u8,
                            214u8, 213u8, 251u8, 123u8, 5u8, 111u8, 90u8, 148u8, 217u8, 135u8,
                        ],
                    )
                }
                #[doc = " A custom head data that should be returned as result of `validate_block`."]
                #[doc = ""]
                #[doc = " See [`Pallet::set_custom_validation_head_data`] for more information."]
                pub fn custom_validation_head_data(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainSystem",
                        "CustomValidationHeadData",
                        vec![],
                        [
                            52u8, 186u8, 187u8, 57u8, 245u8, 171u8, 202u8, 23u8, 92u8, 80u8, 118u8,
                            66u8, 251u8, 156u8, 175u8, 254u8, 141u8, 185u8, 115u8, 209u8, 170u8,
                            165u8, 1u8, 242u8, 120u8, 234u8, 162u8, 24u8, 135u8, 105u8, 8u8, 177u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod transaction_payment {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_transaction_payment::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
            #[doc = "has been paid by `who`."]
            pub struct TransactionFeePaid {
                pub who: runtime_types::account::AccountId20,
                pub actual_fee: ::core::primitive::u128,
                pub tip: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TransactionFeePaid {
                const PALLET: &'static str = "TransactionPayment";
                const EVENT: &'static str = "TransactionFeePaid";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn next_fee_multiplier(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionPayment",
                        "NextFeeMultiplier",
                        vec![],
                        [
                            247u8, 39u8, 81u8, 170u8, 225u8, 226u8, 82u8, 147u8, 34u8, 113u8,
                            147u8, 213u8, 59u8, 80u8, 139u8, 35u8, 36u8, 196u8, 152u8, 19u8, 9u8,
                            159u8, 176u8, 79u8, 249u8, 201u8, 170u8, 1u8, 129u8, 79u8, 146u8,
                            197u8,
                        ],
                    )
                }
                pub fn storage_version(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_transaction_payment::Releases,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionPayment",
                        "StorageVersion",
                        vec![],
                        [
                            105u8, 243u8, 158u8, 241u8, 159u8, 231u8, 253u8, 6u8, 4u8, 32u8, 85u8,
                            178u8, 126u8, 31u8, 203u8, 134u8, 154u8, 38u8, 122u8, 155u8, 150u8,
                            251u8, 174u8, 15u8, 74u8, 134u8, 216u8, 244u8, 168u8, 175u8, 158u8,
                            144u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
                #[doc = " `priority`"]
                #[doc = ""]
                #[doc = " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later"]
                #[doc = " added to a tip component in regular `priority` calculations."]
                #[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
                #[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
                #[doc = ""]
                #[doc = " ```rust,ignore"]
                #[doc = " // For `Normal`"]
                #[doc = " let priority = priority_calc(tip);"]
                #[doc = ""]
                #[doc = " // For `Operational`"]
                #[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
                #[doc = " let priority = priority_calc(tip + virtual_tip);"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
                #[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
                #[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
                #[doc = " transactions."]
                pub fn operational_fee_multiplier(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u8> {
                    ::subxt::constants::Address::new_static(
                        "TransactionPayment",
                        "OperationalFeeMultiplier",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachain_info {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn parachain_id(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::polkadot_parachain::primitives::Id,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainInfo",
                        "ParachainId",
                        vec![],
                        [
                            160u8, 130u8, 74u8, 181u8, 231u8, 180u8, 246u8, 152u8, 204u8, 44u8,
                            245u8, 91u8, 113u8, 246u8, 218u8, 50u8, 254u8, 248u8, 35u8, 219u8,
                            83u8, 144u8, 228u8, 245u8, 122u8, 53u8, 194u8, 172u8, 222u8, 118u8,
                            202u8, 91u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod ethereum_chain_id {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn chain_id(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumChainId",
                        "ChainId",
                        vec![],
                        [
                            250u8, 158u8, 90u8, 220u8, 184u8, 126u8, 207u8, 222u8, 62u8, 226u8,
                            144u8, 204u8, 19u8, 136u8, 127u8, 5u8, 135u8, 48u8, 234u8, 138u8,
                            216u8, 103u8, 28u8, 140u8, 193u8, 197u8, 142u8, 22u8, 159u8, 16u8,
                            225u8, 255u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod evm {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_evm::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_evm::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Withdraw {
                    pub address: ::subxt::utils::H160,
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Withdraw {
                    const PALLET: &'static str = "EVM";
                    const CALL: &'static str = "withdraw";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Call {
                    pub source: ::subxt::utils::H160,
                    pub target: ::subxt::utils::H160,
                    pub input: ::std::vec::Vec<::core::primitive::u8>,
                    pub value: runtime_types::primitive_types::U256,
                    pub gas_limit: ::core::primitive::u64,
                    pub max_fee_per_gas: runtime_types::primitive_types::U256,
                    pub max_priority_fee_per_gas:
                        ::core::option::Option<runtime_types::primitive_types::U256>,
                    pub nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
                    pub access_list: ::std::vec::Vec<(
                        ::subxt::utils::H160,
                        ::std::vec::Vec<::subxt::utils::H256>,
                    )>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Call {
                    const PALLET: &'static str = "EVM";
                    const CALL: &'static str = "call";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Create {
                    pub source: ::subxt::utils::H160,
                    pub init: ::std::vec::Vec<::core::primitive::u8>,
                    pub value: runtime_types::primitive_types::U256,
                    pub gas_limit: ::core::primitive::u64,
                    pub max_fee_per_gas: runtime_types::primitive_types::U256,
                    pub max_priority_fee_per_gas:
                        ::core::option::Option<runtime_types::primitive_types::U256>,
                    pub nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
                    pub access_list: ::std::vec::Vec<(
                        ::subxt::utils::H160,
                        ::std::vec::Vec<::subxt::utils::H256>,
                    )>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Create {
                    const PALLET: &'static str = "EVM";
                    const CALL: &'static str = "create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Create2 {
                    pub source: ::subxt::utils::H160,
                    pub init: ::std::vec::Vec<::core::primitive::u8>,
                    pub salt: ::subxt::utils::H256,
                    pub value: runtime_types::primitive_types::U256,
                    pub gas_limit: ::core::primitive::u64,
                    pub max_fee_per_gas: runtime_types::primitive_types::U256,
                    pub max_priority_fee_per_gas:
                        ::core::option::Option<runtime_types::primitive_types::U256>,
                    pub nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
                    pub access_list: ::std::vec::Vec<(
                        ::subxt::utils::H160,
                        ::std::vec::Vec<::subxt::utils::H256>,
                    )>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Create2 {
                    const PALLET: &'static str = "EVM";
                    const CALL: &'static str = "create2";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Withdraw balance from EVM into currency/balances pallet."]
                pub fn withdraw(
                    &self,
                    address: ::subxt::utils::H160,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Withdraw> {
                    ::subxt::tx::Payload::new_static(
                        "EVM",
                        "withdraw",
                        types::Withdraw { address, value },
                        [
                            62u8, 162u8, 234u8, 15u8, 176u8, 61u8, 183u8, 203u8, 241u8, 10u8,
                            202u8, 26u8, 45u8, 116u8, 38u8, 44u8, 32u8, 57u8, 208u8, 55u8, 182u8,
                            92u8, 136u8, 133u8, 216u8, 255u8, 25u8, 132u8, 242u8, 34u8, 43u8, 64u8,
                        ],
                    )
                }
                #[doc = "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."]
                pub fn call(
                    &self,
                    source: ::subxt::utils::H160,
                    target: ::subxt::utils::H160,
                    input: ::std::vec::Vec<::core::primitive::u8>,
                    value: runtime_types::primitive_types::U256,
                    gas_limit: ::core::primitive::u64,
                    max_fee_per_gas: runtime_types::primitive_types::U256,
                    max_priority_fee_per_gas: ::core::option::Option<
                        runtime_types::primitive_types::U256,
                    >,
                    nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
                    access_list: ::std::vec::Vec<(
                        ::subxt::utils::H160,
                        ::std::vec::Vec<::subxt::utils::H256>,
                    )>,
                ) -> ::subxt::tx::Payload<types::Call> {
                    ::subxt::tx::Payload::new_static(
                        "EVM",
                        "call",
                        types::Call {
                            source,
                            target,
                            input,
                            value,
                            gas_limit,
                            max_fee_per_gas,
                            max_priority_fee_per_gas,
                            nonce,
                            access_list,
                        },
                        [
                            121u8, 179u8, 103u8, 152u8, 89u8, 27u8, 36u8, 13u8, 114u8, 246u8,
                            222u8, 197u8, 249u8, 250u8, 241u8, 66u8, 219u8, 123u8, 126u8, 144u8,
                            144u8, 213u8, 165u8, 25u8, 248u8, 129u8, 86u8, 34u8, 105u8, 145u8,
                            85u8, 85u8,
                        ],
                    )
                }
                #[doc = "Issue an EVM create operation. This is similar to a contract creation transaction in"]
                #[doc = "Ethereum."]
                pub fn create(
                    &self,
                    source: ::subxt::utils::H160,
                    init: ::std::vec::Vec<::core::primitive::u8>,
                    value: runtime_types::primitive_types::U256,
                    gas_limit: ::core::primitive::u64,
                    max_fee_per_gas: runtime_types::primitive_types::U256,
                    max_priority_fee_per_gas: ::core::option::Option<
                        runtime_types::primitive_types::U256,
                    >,
                    nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
                    access_list: ::std::vec::Vec<(
                        ::subxt::utils::H160,
                        ::std::vec::Vec<::subxt::utils::H256>,
                    )>,
                ) -> ::subxt::tx::Payload<types::Create> {
                    ::subxt::tx::Payload::new_static(
                        "EVM",
                        "create",
                        types::Create {
                            source,
                            init,
                            value,
                            gas_limit,
                            max_fee_per_gas,
                            max_priority_fee_per_gas,
                            nonce,
                            access_list,
                        },
                        [
                            231u8, 52u8, 103u8, 5u8, 29u8, 96u8, 200u8, 245u8, 151u8, 231u8, 111u8,
                            150u8, 185u8, 126u8, 12u8, 42u8, 169u8, 92u8, 68u8, 130u8, 36u8, 11u8,
                            234u8, 211u8, 199u8, 200u8, 45u8, 10u8, 53u8, 91u8, 226u8, 145u8,
                        ],
                    )
                }
                #[doc = "Issue an EVM create2 operation."]
                pub fn create2(
                    &self,
                    source: ::subxt::utils::H160,
                    init: ::std::vec::Vec<::core::primitive::u8>,
                    salt: ::subxt::utils::H256,
                    value: runtime_types::primitive_types::U256,
                    gas_limit: ::core::primitive::u64,
                    max_fee_per_gas: runtime_types::primitive_types::U256,
                    max_priority_fee_per_gas: ::core::option::Option<
                        runtime_types::primitive_types::U256,
                    >,
                    nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
                    access_list: ::std::vec::Vec<(
                        ::subxt::utils::H160,
                        ::std::vec::Vec<::subxt::utils::H256>,
                    )>,
                ) -> ::subxt::tx::Payload<types::Create2> {
                    ::subxt::tx::Payload::new_static(
                        "EVM",
                        "create2",
                        types::Create2 {
                            source,
                            init,
                            salt,
                            value,
                            gas_limit,
                            max_fee_per_gas,
                            max_priority_fee_per_gas,
                            nonce,
                            access_list,
                        },
                        [
                            73u8, 157u8, 32u8, 232u8, 164u8, 93u8, 191u8, 129u8, 171u8, 104u8,
                            212u8, 108u8, 167u8, 5u8, 61u8, 171u8, 247u8, 97u8, 122u8, 162u8,
                            102u8, 152u8, 224u8, 130u8, 94u8, 112u8, 115u8, 68u8, 249u8, 215u8,
                            233u8, 115u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_evm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Ethereum events from contracts."]
            pub struct Log {
                pub log: runtime_types::ethereum::log::Log,
            }
            impl ::subxt::events::StaticEvent for Log {
                const PALLET: &'static str = "EVM";
                const EVENT: &'static str = "Log";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A contract has been created at given address."]
            pub struct Created {
                pub address: ::subxt::utils::H160,
            }
            impl ::subxt::events::StaticEvent for Created {
                const PALLET: &'static str = "EVM";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A contract was attempted to be created, but the execution failed."]
            pub struct CreatedFailed {
                pub address: ::subxt::utils::H160,
            }
            impl ::subxt::events::StaticEvent for CreatedFailed {
                const PALLET: &'static str = "EVM";
                const EVENT: &'static str = "CreatedFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A contract has been executed successfully with states applied."]
            pub struct Executed {
                pub address: ::subxt::utils::H160,
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "EVM";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A contract has been executed with errors. States are reverted with only gas fees applied."]
            pub struct ExecutedFailed {
                pub address: ::subxt::utils::H160,
            }
            impl ::subxt::events::StaticEvent for ExecutedFailed {
                const PALLET: &'static str = "EVM";
                const EVENT: &'static str = "ExecutedFailed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn account_codes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H160>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EVM",
                        "AccountCodes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            49u8, 73u8, 188u8, 164u8, 3u8, 40u8, 187u8, 216u8, 70u8, 119u8, 176u8,
                            187u8, 76u8, 24u8, 49u8, 174u8, 54u8, 98u8, 208u8, 255u8, 38u8, 214u8,
                            120u8, 116u8, 130u8, 139u8, 44u8, 102u8, 115u8, 222u8, 63u8, 56u8,
                        ],
                    )
                }
                pub fn account_codes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EVM",
                        "AccountCodes",
                        Vec::new(),
                        [
                            49u8, 73u8, 188u8, 164u8, 3u8, 40u8, 187u8, 216u8, 70u8, 119u8, 176u8,
                            187u8, 76u8, 24u8, 49u8, 174u8, 54u8, 98u8, 208u8, 255u8, 38u8, 214u8,
                            120u8, 116u8, 130u8, 139u8, 44u8, 102u8, 115u8, 222u8, 63u8, 56u8,
                        ],
                    )
                }
                pub fn account_codes_metadata(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H160>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_evm::CodeMetadata,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EVM",
                        "AccountCodesMetadata",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            17u8, 83u8, 22u8, 15u8, 158u8, 242u8, 39u8, 174u8, 61u8, 230u8, 0u8,
                            161u8, 173u8, 242u8, 155u8, 156u8, 149u8, 108u8, 47u8, 129u8, 190u8,
                            223u8, 25u8, 235u8, 168u8, 86u8, 49u8, 118u8, 132u8, 93u8, 100u8,
                            173u8,
                        ],
                    )
                }
                pub fn account_codes_metadata_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_evm::CodeMetadata,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EVM",
                        "AccountCodesMetadata",
                        Vec::new(),
                        [
                            17u8, 83u8, 22u8, 15u8, 158u8, 242u8, 39u8, 174u8, 61u8, 230u8, 0u8,
                            161u8, 173u8, 242u8, 155u8, 156u8, 149u8, 108u8, 47u8, 129u8, 190u8,
                            223u8, 25u8, 235u8, 168u8, 86u8, 49u8, 118u8, 132u8, 93u8, 100u8,
                            173u8,
                        ],
                    )
                }
                pub fn account_storages(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H160>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EVM",
                        "AccountStorages",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            63u8, 69u8, 109u8, 3u8, 190u8, 233u8, 39u8, 122u8, 94u8, 37u8, 74u8,
                            90u8, 197u8, 191u8, 12u8, 119u8, 165u8, 61u8, 217u8, 15u8, 36u8, 167u8,
                            211u8, 120u8, 169u8, 97u8, 13u8, 38u8, 148u8, 224u8, 167u8, 199u8,
                        ],
                    )
                }
                pub fn account_storages_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EVM",
                        "AccountStorages",
                        Vec::new(),
                        [
                            63u8, 69u8, 109u8, 3u8, 190u8, 233u8, 39u8, 122u8, 94u8, 37u8, 74u8,
                            90u8, 197u8, 191u8, 12u8, 119u8, 165u8, 61u8, 217u8, 15u8, 36u8, 167u8,
                            211u8, 120u8, 169u8, 97u8, 13u8, 38u8, 148u8, 224u8, 167u8, 199u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod ethereum {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_ethereum::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_ethereum::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transact {
                    pub transaction: runtime_types::ethereum::transaction::TransactionV2,
                }
                impl ::subxt::blocks::StaticExtrinsic for Transact {
                    const PALLET: &'static str = "Ethereum";
                    const CALL: &'static str = "transact";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Transact an Ethereum transaction."]
                pub fn transact(
                    &self,
                    transaction: runtime_types::ethereum::transaction::TransactionV2,
                ) -> ::subxt::tx::Payload<types::Transact> {
                    ::subxt::tx::Payload::new_static(
                        "Ethereum",
                        "transact",
                        types::Transact { transaction },
                        [
                            124u8, 9u8, 75u8, 222u8, 225u8, 49u8, 255u8, 53u8, 207u8, 220u8, 198u8,
                            31u8, 26u8, 150u8, 238u8, 140u8, 230u8, 77u8, 248u8, 1u8, 97u8, 222u8,
                            9u8, 32u8, 217u8, 160u8, 195u8, 4u8, 69u8, 210u8, 251u8, 109u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_ethereum::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An ethereum transaction was successfully executed."]
            pub struct Executed {
                pub from: ::subxt::utils::H160,
                pub to: ::subxt::utils::H160,
                pub transaction_hash: ::subxt::utils::H256,
                pub exit_reason: runtime_types::evm_core::error::ExitReason,
                pub extra_data: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "Ethereum";
                const EVENT: &'static str = "Executed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Current building block's transactions and receipts."]
                pub fn pending(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(
                        runtime_types::ethereum::transaction::TransactionV2,
                        runtime_types::fp_rpc::TransactionStatus,
                        runtime_types::ethereum::receipt::ReceiptV3,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ethereum",
                        "Pending",
                        vec![],
                        [
                            249u8, 60u8, 121u8, 166u8, 91u8, 128u8, 146u8, 87u8, 240u8, 165u8,
                            236u8, 61u8, 65u8, 140u8, 14u8, 203u8, 169u8, 102u8, 126u8, 247u8,
                            245u8, 3u8, 166u8, 188u8, 144u8, 74u8, 13u8, 2u8, 244u8, 49u8, 223u8,
                            198u8,
                        ],
                    )
                }
                #[doc = " The current Ethereum block."]
                pub fn current_block(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::ethereum::block::Block<
                        runtime_types::ethereum::transaction::TransactionV2,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ethereum",
                        "CurrentBlock",
                        vec![],
                        [
                            54u8, 128u8, 41u8, 16u8, 65u8, 25u8, 184u8, 85u8, 192u8, 220u8, 208u8,
                            92u8, 166u8, 132u8, 223u8, 50u8, 252u8, 112u8, 236u8, 217u8, 108u8,
                            166u8, 131u8, 224u8, 141u8, 59u8, 248u8, 42u8, 197u8, 96u8, 240u8,
                            88u8,
                        ],
                    )
                }
                #[doc = " The current Ethereum receipts."]
                pub fn current_receipts(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::ethereum::receipt::ReceiptV3>,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ethereum",
                        "CurrentReceipts",
                        vec![],
                        [
                            97u8, 46u8, 228u8, 135u8, 133u8, 148u8, 98u8, 3u8, 128u8, 26u8, 83u8,
                            12u8, 33u8, 135u8, 88u8, 205u8, 147u8, 176u8, 13u8, 113u8, 148u8, 48u8,
                            31u8, 200u8, 105u8, 224u8, 201u8, 225u8, 157u8, 108u8, 55u8, 209u8,
                        ],
                    )
                }
                #[doc = " The current transaction statuses."]
                pub fn current_transaction_statuses(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::fp_rpc::TransactionStatus>,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ethereum",
                        "CurrentTransactionStatuses",
                        vec![],
                        [
                            29u8, 20u8, 106u8, 243u8, 226u8, 102u8, 121u8, 20u8, 222u8, 53u8, 99u8,
                            68u8, 173u8, 238u8, 167u8, 165u8, 192u8, 192u8, 230u8, 46u8, 231u8,
                            88u8, 144u8, 159u8, 3u8, 171u8, 72u8, 125u8, 68u8, 66u8, 125u8, 165u8,
                        ],
                    )
                }
                pub fn block_hash(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::primitive_types::U256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ethereum",
                        "BlockHash",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            131u8, 87u8, 201u8, 82u8, 203u8, 241u8, 176u8, 149u8, 39u8, 243u8,
                            227u8, 1u8, 86u8, 62u8, 6u8, 231u8, 55u8, 6u8, 212u8, 96u8, 207u8,
                            73u8, 56u8, 204u8, 215u8, 227u8, 48u8, 249u8, 67u8, 137u8, 139u8, 76u8,
                        ],
                    )
                }
                pub fn block_hash_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Ethereum",
                        "BlockHash",
                        Vec::new(),
                        [
                            131u8, 87u8, 201u8, 82u8, 203u8, 241u8, 176u8, 149u8, 39u8, 243u8,
                            227u8, 1u8, 86u8, 62u8, 6u8, 231u8, 55u8, 6u8, 212u8, 96u8, 207u8,
                            73u8, 56u8, 204u8, 215u8, 227u8, 48u8, 249u8, 67u8, 137u8, 139u8, 76u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachain_staking {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_parachain_staking::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_parachain_staking::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetStakingExpectations {
                    pub expectations: runtime_types::pallet_parachain_staking::inflation::Range<
                        ::core::primitive::u128,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetStakingExpectations {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "set_staking_expectations";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetInflation {
                    pub schedule: runtime_types::pallet_parachain_staking::inflation::Range<
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetInflation {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "set_inflation";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetParachainBondAccount {
                    pub new: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetParachainBondAccount {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "set_parachain_bond_account";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetParachainBondReservePercent {
                    pub new: runtime_types::sp_arithmetic::per_things::Percent,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetParachainBondReservePercent {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "set_parachain_bond_reserve_percent";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetTotalSelected {
                    pub new: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetTotalSelected {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "set_total_selected";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCollatorCommission {
                    pub new: runtime_types::sp_arithmetic::per_things::Perbill,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCollatorCommission {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "set_collator_commission";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetBlocksPerRound {
                    pub new: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetBlocksPerRound {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "set_blocks_per_round";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct JoinCandidates {
                    pub bond: ::core::primitive::u128,
                    pub candidate_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for JoinCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "join_candidates";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ScheduleLeaveCandidates {
                    pub candidate_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ScheduleLeaveCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "schedule_leave_candidates";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExecuteLeaveCandidates {
                    pub candidate: runtime_types::account::AccountId20,
                    pub candidate_delegation_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ExecuteLeaveCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "execute_leave_candidates";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelLeaveCandidates {
                    pub candidate_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelLeaveCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "cancel_leave_candidates";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GoOffline;
                impl ::subxt::blocks::StaticExtrinsic for GoOffline {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "go_offline";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GoOnline;
                impl ::subxt::blocks::StaticExtrinsic for GoOnline {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "go_online";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CandidateBondMore {
                    pub more: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for CandidateBondMore {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "candidate_bond_more";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ScheduleCandidateBondLess {
                    pub less: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ScheduleCandidateBondLess {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "schedule_candidate_bond_less";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExecuteCandidateBondLess {
                    pub candidate: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for ExecuteCandidateBondLess {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "execute_candidate_bond_less";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelCandidateBondLess;
                impl ::subxt::blocks::StaticExtrinsic for CancelCandidateBondLess {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "cancel_candidate_bond_less";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegate {
                    pub candidate: runtime_types::account::AccountId20,
                    pub amount: ::core::primitive::u128,
                    pub candidate_delegation_count: ::core::primitive::u32,
                    pub delegation_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Delegate {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "delegate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DelegateWithAutoCompound {
                    pub candidate: runtime_types::account::AccountId20,
                    pub amount: ::core::primitive::u128,
                    pub auto_compound: runtime_types::sp_arithmetic::per_things::Percent,
                    pub candidate_delegation_count: ::core::primitive::u32,
                    pub candidate_auto_compounding_delegation_count: ::core::primitive::u32,
                    pub delegation_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for DelegateWithAutoCompound {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "delegate_with_auto_compound";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemovedCall19;
                impl ::subxt::blocks::StaticExtrinsic for RemovedCall19 {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "removed_call_19";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemovedCall20;
                impl ::subxt::blocks::StaticExtrinsic for RemovedCall20 {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "removed_call_20";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemovedCall21;
                impl ::subxt::blocks::StaticExtrinsic for RemovedCall21 {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "removed_call_21";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ScheduleRevokeDelegation {
                    pub collator: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for ScheduleRevokeDelegation {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "schedule_revoke_delegation";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DelegatorBondMore {
                    pub candidate: runtime_types::account::AccountId20,
                    pub more: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for DelegatorBondMore {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "delegator_bond_more";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ScheduleDelegatorBondLess {
                    pub candidate: runtime_types::account::AccountId20,
                    pub less: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ScheduleDelegatorBondLess {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "schedule_delegator_bond_less";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExecuteDelegationRequest {
                    pub delegator: runtime_types::account::AccountId20,
                    pub candidate: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for ExecuteDelegationRequest {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "execute_delegation_request";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelDelegationRequest {
                    pub candidate: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelDelegationRequest {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "cancel_delegation_request";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetAutoCompound {
                    pub candidate: runtime_types::account::AccountId20,
                    pub value: runtime_types::sp_arithmetic::per_things::Percent,
                    pub candidate_auto_compounding_delegation_count_hint: ::core::primitive::u32,
                    pub delegation_count_hint: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetAutoCompound {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "set_auto_compound";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HotfixRemoveDelegationRequestsExitedCandidates {
                    pub candidates: ::std::vec::Vec<runtime_types::account::AccountId20>,
                }
                impl ::subxt::blocks::StaticExtrinsic for HotfixRemoveDelegationRequestsExitedCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str =
                        "hotfix_remove_delegation_requests_exited_candidates";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the expectations for total staked. These expectations determine the issuance for"]
                #[doc = "the round according to logic in `fn compute_issuance`"]
                pub fn set_staking_expectations(
                    &self,
                    expectations: runtime_types::pallet_parachain_staking::inflation::Range<
                        ::core::primitive::u128,
                    >,
                ) -> ::subxt::tx::Payload<types::SetStakingExpectations> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "set_staking_expectations",
                        types::SetStakingExpectations { expectations },
                        [
                            155u8, 194u8, 28u8, 69u8, 52u8, 160u8, 182u8, 40u8, 220u8, 227u8, 35u8,
                            78u8, 29u8, 252u8, 218u8, 230u8, 2u8, 224u8, 180u8, 5u8, 169u8, 237u8,
                            187u8, 149u8, 0u8, 55u8, 188u8, 142u8, 73u8, 157u8, 121u8, 66u8,
                        ],
                    )
                }
                #[doc = "Set the annual inflation rate to derive per-round inflation"]
                pub fn set_inflation(
                    &self,
                    schedule: runtime_types::pallet_parachain_staking::inflation::Range<
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    >,
                ) -> ::subxt::tx::Payload<types::SetInflation> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "set_inflation",
                        types::SetInflation { schedule },
                        [
                            203u8, 129u8, 17u8, 18u8, 85u8, 158u8, 30u8, 207u8, 33u8, 95u8, 31u8,
                            146u8, 116u8, 62u8, 17u8, 84u8, 50u8, 108u8, 246u8, 191u8, 240u8,
                            130u8, 203u8, 70u8, 56u8, 70u8, 223u8, 200u8, 82u8, 21u8, 88u8, 191u8,
                        ],
                    )
                }
                #[doc = "Set the account that will hold funds set aside for parachain bond"]
                pub fn set_parachain_bond_account(
                    &self,
                    new: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::SetParachainBondAccount> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "set_parachain_bond_account",
                        types::SetParachainBondAccount { new },
                        [
                            237u8, 99u8, 48u8, 93u8, 207u8, 218u8, 225u8, 48u8, 56u8, 104u8, 167u8,
                            221u8, 121u8, 122u8, 26u8, 122u8, 32u8, 20u8, 71u8, 71u8, 222u8, 180u8,
                            33u8, 112u8, 133u8, 110u8, 34u8, 46u8, 248u8, 210u8, 93u8, 148u8,
                        ],
                    )
                }
                #[doc = "Set the percent of inflation set aside for parachain bond"]
                pub fn set_parachain_bond_reserve_percent(
                    &self,
                    new: runtime_types::sp_arithmetic::per_things::Percent,
                ) -> ::subxt::tx::Payload<types::SetParachainBondReservePercent> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "set_parachain_bond_reserve_percent",
                        types::SetParachainBondReservePercent { new },
                        [
                            141u8, 154u8, 136u8, 24u8, 63u8, 197u8, 94u8, 9u8, 176u8, 27u8, 10u8,
                            75u8, 165u8, 218u8, 230u8, 185u8, 254u8, 40u8, 243u8, 19u8, 148u8,
                            252u8, 74u8, 236u8, 24u8, 103u8, 100u8, 65u8, 10u8, 89u8, 97u8, 7u8,
                        ],
                    )
                }
                #[doc = "Set the total number of collator candidates selected per round"]
                #[doc = "- changes are not applied until the start of the next round"]
                pub fn set_total_selected(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetTotalSelected> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "set_total_selected",
                        types::SetTotalSelected { new },
                        [
                            79u8, 99u8, 189u8, 86u8, 137u8, 181u8, 252u8, 121u8, 117u8, 188u8,
                            204u8, 247u8, 36u8, 179u8, 253u8, 211u8, 108u8, 234u8, 149u8, 239u8,
                            120u8, 27u8, 90u8, 7u8, 85u8, 150u8, 31u8, 134u8, 224u8, 248u8, 18u8,
                            179u8,
                        ],
                    )
                }
                #[doc = "Set the commission for all collators"]
                pub fn set_collator_commission(
                    &self,
                    new: runtime_types::sp_arithmetic::per_things::Perbill,
                ) -> ::subxt::tx::Payload<types::SetCollatorCommission> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "set_collator_commission",
                        types::SetCollatorCommission { new },
                        [
                            166u8, 106u8, 4u8, 178u8, 151u8, 254u8, 151u8, 254u8, 73u8, 228u8,
                            144u8, 234u8, 186u8, 200u8, 200u8, 49u8, 247u8, 158u8, 87u8, 173u8,
                            110u8, 97u8, 184u8, 69u8, 145u8, 224u8, 173u8, 198u8, 236u8, 5u8,
                            248u8, 161u8,
                        ],
                    )
                }
                #[doc = "Set blocks per round"]
                #[doc = "- if called with `new` less than length of current round, will transition immediately"]
                #[doc = "in the next block"]
                #[doc = "- also updates per-round inflation config"]
                pub fn set_blocks_per_round(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetBlocksPerRound> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "set_blocks_per_round",
                        types::SetBlocksPerRound { new },
                        [
                            15u8, 238u8, 7u8, 157u8, 190u8, 212u8, 210u8, 16u8, 192u8, 27u8, 74u8,
                            162u8, 239u8, 90u8, 149u8, 176u8, 227u8, 29u8, 155u8, 209u8, 94u8,
                            157u8, 63u8, 253u8, 21u8, 54u8, 116u8, 154u8, 234u8, 48u8, 70u8, 66u8,
                        ],
                    )
                }
                #[doc = "Join the set of collator candidates"]
                pub fn join_candidates(
                    &self,
                    bond: ::core::primitive::u128,
                    candidate_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::JoinCandidates> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "join_candidates",
                        types::JoinCandidates {
                            bond,
                            candidate_count,
                        },
                        [
                            122u8, 240u8, 57u8, 122u8, 25u8, 58u8, 53u8, 111u8, 54u8, 10u8, 191u8,
                            193u8, 167u8, 216u8, 183u8, 155u8, 236u8, 101u8, 136u8, 44u8, 30u8,
                            178u8, 34u8, 56u8, 158u8, 45u8, 207u8, 89u8, 74u8, 224u8, 15u8, 58u8,
                        ],
                    )
                }
                #[doc = "Request to leave the set of candidates. If successful, the account is immediately"]
                #[doc = "removed from the candidate pool to prevent selection as a collator."]
                pub fn schedule_leave_candidates(
                    &self,
                    candidate_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ScheduleLeaveCandidates> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "schedule_leave_candidates",
                        types::ScheduleLeaveCandidates { candidate_count },
                        [
                            38u8, 95u8, 168u8, 104u8, 240u8, 115u8, 200u8, 24u8, 171u8, 60u8, 75u8,
                            183u8, 58u8, 126u8, 195u8, 186u8, 246u8, 204u8, 3u8, 68u8, 109u8,
                            110u8, 157u8, 141u8, 115u8, 38u8, 99u8, 252u8, 217u8, 254u8, 67u8,
                            226u8,
                        ],
                    )
                }
                #[doc = "Execute leave candidates request"]
                pub fn execute_leave_candidates(
                    &self,
                    candidate: runtime_types::account::AccountId20,
                    candidate_delegation_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ExecuteLeaveCandidates> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "execute_leave_candidates",
                        types::ExecuteLeaveCandidates {
                            candidate,
                            candidate_delegation_count,
                        },
                        [
                            85u8, 60u8, 236u8, 59u8, 6u8, 58u8, 12u8, 80u8, 199u8, 158u8, 164u8,
                            191u8, 36u8, 101u8, 246u8, 90u8, 35u8, 196u8, 13u8, 157u8, 213u8,
                            100u8, 158u8, 242u8, 143u8, 56u8, 12u8, 222u8, 146u8, 233u8, 76u8,
                            76u8,
                        ],
                    )
                }
                #[doc = "Cancel open request to leave candidates"]
                #[doc = "- only callable by collator account"]
                #[doc = "- result upon successful call is the candidate is active in the candidate pool"]
                pub fn cancel_leave_candidates(
                    &self,
                    candidate_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CancelLeaveCandidates> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "cancel_leave_candidates",
                        types::CancelLeaveCandidates { candidate_count },
                        [
                            142u8, 203u8, 196u8, 63u8, 28u8, 190u8, 133u8, 202u8, 72u8, 85u8,
                            143u8, 29u8, 41u8, 8u8, 50u8, 232u8, 123u8, 197u8, 174u8, 198u8, 100u8,
                            162u8, 167u8, 233u8, 62u8, 39u8, 230u8, 31u8, 172u8, 101u8, 72u8,
                            234u8,
                        ],
                    )
                }
                #[doc = "Temporarily leave the set of collator candidates without unbonding"]
                pub fn go_offline(&self) -> ::subxt::tx::Payload<types::GoOffline> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "go_offline",
                        types::GoOffline {},
                        [
                            229u8, 123u8, 37u8, 67u8, 121u8, 41u8, 249u8, 87u8, 1u8, 78u8, 249u8,
                            173u8, 135u8, 228u8, 239u8, 244u8, 177u8, 153u8, 242u8, 112u8, 157u8,
                            150u8, 12u8, 213u8, 38u8, 250u8, 85u8, 150u8, 252u8, 60u8, 204u8,
                            134u8,
                        ],
                    )
                }
                #[doc = "Rejoin the set of collator candidates if previously had called `go_offline`"]
                pub fn go_online(&self) -> ::subxt::tx::Payload<types::GoOnline> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "go_online",
                        types::GoOnline {},
                        [
                            58u8, 44u8, 183u8, 212u8, 2u8, 121u8, 216u8, 100u8, 238u8, 222u8,
                            118u8, 20u8, 145u8, 231u8, 226u8, 156u8, 130u8, 2u8, 113u8, 3u8, 49u8,
                            119u8, 211u8, 112u8, 151u8, 192u8, 181u8, 139u8, 108u8, 209u8, 80u8,
                            47u8,
                        ],
                    )
                }
                #[doc = "Increase collator candidate self bond by `more`"]
                pub fn candidate_bond_more(
                    &self,
                    more: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::CandidateBondMore> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "candidate_bond_more",
                        types::CandidateBondMore { more },
                        [
                            14u8, 255u8, 179u8, 188u8, 169u8, 177u8, 241u8, 66u8, 17u8, 69u8, 87u8,
                            29u8, 55u8, 86u8, 22u8, 14u8, 198u8, 184u8, 18u8, 12u8, 153u8, 36u8,
                            146u8, 35u8, 15u8, 93u8, 106u8, 75u8, 30u8, 230u8, 20u8, 73u8,
                        ],
                    )
                }
                #[doc = "Request by collator candidate to decrease self bond by `less`"]
                pub fn schedule_candidate_bond_less(
                    &self,
                    less: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ScheduleCandidateBondLess> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "schedule_candidate_bond_less",
                        types::ScheduleCandidateBondLess { less },
                        [
                            128u8, 77u8, 9u8, 178u8, 190u8, 213u8, 12u8, 108u8, 117u8, 174u8,
                            210u8, 130u8, 78u8, 111u8, 181u8, 173u8, 0u8, 92u8, 43u8, 79u8, 134u8,
                            9u8, 120u8, 241u8, 3u8, 58u8, 88u8, 113u8, 249u8, 22u8, 0u8, 177u8,
                        ],
                    )
                }
                #[doc = "Execute pending request to adjust the collator candidate self bond"]
                pub fn execute_candidate_bond_less(
                    &self,
                    candidate: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::ExecuteCandidateBondLess> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "execute_candidate_bond_less",
                        types::ExecuteCandidateBondLess { candidate },
                        [
                            221u8, 226u8, 75u8, 84u8, 87u8, 253u8, 234u8, 191u8, 145u8, 77u8,
                            203u8, 218u8, 249u8, 93u8, 77u8, 162u8, 48u8, 158u8, 174u8, 39u8, 61u8,
                            73u8, 156u8, 115u8, 237u8, 125u8, 116u8, 186u8, 232u8, 166u8, 83u8,
                            65u8,
                        ],
                    )
                }
                #[doc = "Cancel pending request to adjust the collator candidate self bond"]
                pub fn cancel_candidate_bond_less(
                    &self,
                ) -> ::subxt::tx::Payload<types::CancelCandidateBondLess> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "cancel_candidate_bond_less",
                        types::CancelCandidateBondLess {},
                        [
                            77u8, 45u8, 124u8, 162u8, 55u8, 171u8, 40u8, 192u8, 101u8, 96u8, 58u8,
                            112u8, 9u8, 112u8, 72u8, 135u8, 200u8, 115u8, 103u8, 177u8, 152u8,
                            185u8, 29u8, 8u8, 130u8, 208u8, 27u8, 74u8, 9u8, 57u8, 76u8, 71u8,
                        ],
                    )
                }
                #[doc = "DEPRECATED use delegateWithAutoCompound"]
                #[doc = "If caller is not a delegator and not a collator, then join the set of delegators"]
                #[doc = "If caller is a delegator, then makes delegation to change their delegation state"]
                pub fn delegate(
                    &self,
                    candidate: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                    candidate_delegation_count: ::core::primitive::u32,
                    delegation_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Delegate> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "delegate",
                        types::Delegate {
                            candidate,
                            amount,
                            candidate_delegation_count,
                            delegation_count,
                        },
                        [
                            74u8, 17u8, 197u8, 253u8, 35u8, 152u8, 106u8, 249u8, 207u8, 233u8,
                            125u8, 57u8, 129u8, 182u8, 47u8, 45u8, 192u8, 207u8, 164u8, 14u8, 17u8,
                            188u8, 209u8, 33u8, 100u8, 164u8, 252u8, 21u8, 160u8, 159u8, 158u8,
                            221u8,
                        ],
                    )
                }
                #[doc = "If caller is not a delegator and not a collator, then join the set of delegators"]
                #[doc = "If caller is a delegator, then makes delegation to change their delegation state"]
                #[doc = "Sets the auto-compound config for the delegation"]
                pub fn delegate_with_auto_compound(
                    &self,
                    candidate: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                    auto_compound: runtime_types::sp_arithmetic::per_things::Percent,
                    candidate_delegation_count: ::core::primitive::u32,
                    candidate_auto_compounding_delegation_count: ::core::primitive::u32,
                    delegation_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::DelegateWithAutoCompound> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "delegate_with_auto_compound",
                        types::DelegateWithAutoCompound {
                            candidate,
                            amount,
                            auto_compound,
                            candidate_delegation_count,
                            candidate_auto_compounding_delegation_count,
                            delegation_count,
                        },
                        [
                            237u8, 27u8, 216u8, 124u8, 131u8, 19u8, 82u8, 94u8, 34u8, 2u8, 104u8,
                            121u8, 239u8, 149u8, 38u8, 231u8, 54u8, 117u8, 173u8, 6u8, 70u8, 85u8,
                            146u8, 179u8, 188u8, 224u8, 71u8, 95u8, 34u8, 2u8, 50u8, 201u8,
                        ],
                    )
                }
                #[doc = "REMOVED, was schedule_leave_delegators"]
                pub fn removed_call_19(&self) -> ::subxt::tx::Payload<types::RemovedCall19> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "removed_call_19",
                        types::RemovedCall19 {},
                        [
                            118u8, 113u8, 52u8, 53u8, 48u8, 234u8, 31u8, 58u8, 197u8, 195u8, 74u8,
                            156u8, 192u8, 149u8, 52u8, 19u8, 134u8, 17u8, 143u8, 186u8, 135u8,
                            43u8, 160u8, 159u8, 228u8, 156u8, 46u8, 56u8, 227u8, 90u8, 174u8,
                            145u8,
                        ],
                    )
                }
                #[doc = "REMOVED, was execute_leave_delegators"]
                pub fn removed_call_20(&self) -> ::subxt::tx::Payload<types::RemovedCall20> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "removed_call_20",
                        types::RemovedCall20 {},
                        [
                            65u8, 138u8, 152u8, 238u8, 189u8, 207u8, 63u8, 25u8, 66u8, 2u8, 58u8,
                            52u8, 70u8, 91u8, 242u8, 210u8, 32u8, 133u8, 132u8, 19u8, 202u8, 58u8,
                            106u8, 151u8, 221u8, 48u8, 128u8, 193u8, 56u8, 163u8, 11u8, 109u8,
                        ],
                    )
                }
                #[doc = "REMOVED, was cancel_leave_delegators"]
                pub fn removed_call_21(&self) -> ::subxt::tx::Payload<types::RemovedCall21> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "removed_call_21",
                        types::RemovedCall21 {},
                        [
                            78u8, 80u8, 0u8, 35u8, 75u8, 16u8, 194u8, 243u8, 91u8, 203u8, 47u8,
                            81u8, 44u8, 245u8, 12u8, 197u8, 55u8, 109u8, 172u8, 238u8, 171u8, 53u8,
                            92u8, 97u8, 147u8, 212u8, 240u8, 7u8, 253u8, 86u8, 118u8, 181u8,
                        ],
                    )
                }
                #[doc = "Request to revoke an existing delegation. If successful, the delegation is scheduled"]
                #[doc = "to be allowed to be revoked via the `execute_delegation_request` extrinsic."]
                #[doc = "The delegation receives no rewards for the rounds while a revoke is pending."]
                #[doc = "A revoke may not be performed if any other scheduled request is pending."]
                pub fn schedule_revoke_delegation(
                    &self,
                    collator: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::ScheduleRevokeDelegation> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "schedule_revoke_delegation",
                        types::ScheduleRevokeDelegation { collator },
                        [
                            49u8, 14u8, 47u8, 15u8, 255u8, 98u8, 144u8, 195u8, 236u8, 20u8, 71u8,
                            162u8, 231u8, 204u8, 216u8, 147u8, 186u8, 202u8, 204u8, 191u8, 96u8,
                            187u8, 229u8, 1u8, 71u8, 161u8, 35u8, 100u8, 59u8, 80u8, 155u8, 185u8,
                        ],
                    )
                }
                #[doc = "Bond more for delegators wrt a specific collator candidate."]
                pub fn delegator_bond_more(
                    &self,
                    candidate: runtime_types::account::AccountId20,
                    more: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::DelegatorBondMore> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "delegator_bond_more",
                        types::DelegatorBondMore { candidate, more },
                        [
                            139u8, 61u8, 57u8, 204u8, 17u8, 5u8, 213u8, 249u8, 13u8, 110u8, 84u8,
                            157u8, 48u8, 93u8, 1u8, 173u8, 62u8, 143u8, 213u8, 135u8, 124u8, 236u8,
                            34u8, 3u8, 43u8, 208u8, 221u8, 138u8, 180u8, 232u8, 188u8, 228u8,
                        ],
                    )
                }
                #[doc = "Request bond less for delegators wrt a specific collator candidate. The delegation's"]
                #[doc = "rewards for rounds while the request is pending use the reduced bonded amount."]
                #[doc = "A bond less may not be performed if any other scheduled request is pending."]
                pub fn schedule_delegator_bond_less(
                    &self,
                    candidate: runtime_types::account::AccountId20,
                    less: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ScheduleDelegatorBondLess> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "schedule_delegator_bond_less",
                        types::ScheduleDelegatorBondLess { candidate, less },
                        [
                            236u8, 220u8, 191u8, 205u8, 149u8, 32u8, 160u8, 164u8, 201u8, 47u8,
                            106u8, 191u8, 56u8, 26u8, 79u8, 51u8, 76u8, 128u8, 33u8, 141u8, 184u8,
                            112u8, 86u8, 132u8, 66u8, 26u8, 40u8, 116u8, 99u8, 53u8, 80u8, 182u8,
                        ],
                    )
                }
                #[doc = "Execute pending request to change an existing delegation"]
                pub fn execute_delegation_request(
                    &self,
                    delegator: runtime_types::account::AccountId20,
                    candidate: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::ExecuteDelegationRequest> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "execute_delegation_request",
                        types::ExecuteDelegationRequest {
                            delegator,
                            candidate,
                        },
                        [
                            99u8, 164u8, 241u8, 10u8, 190u8, 57u8, 133u8, 51u8, 66u8, 5u8, 129u8,
                            174u8, 29u8, 59u8, 52u8, 96u8, 110u8, 223u8, 5u8, 205u8, 156u8, 174u8,
                            35u8, 55u8, 148u8, 254u8, 232u8, 241u8, 3u8, 168u8, 170u8, 55u8,
                        ],
                    )
                }
                #[doc = "Cancel request to change an existing delegation."]
                pub fn cancel_delegation_request(
                    &self,
                    candidate: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::CancelDelegationRequest> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "cancel_delegation_request",
                        types::CancelDelegationRequest { candidate },
                        [
                            149u8, 224u8, 75u8, 66u8, 75u8, 187u8, 222u8, 81u8, 1u8, 199u8, 18u8,
                            189u8, 228u8, 3u8, 6u8, 238u8, 188u8, 141u8, 68u8, 82u8, 228u8, 130u8,
                            56u8, 251u8, 173u8, 15u8, 75u8, 143u8, 95u8, 117u8, 215u8, 144u8,
                        ],
                    )
                }
                #[doc = "Sets the auto-compounding reward percentage for a delegation."]
                pub fn set_auto_compound(
                    &self,
                    candidate: runtime_types::account::AccountId20,
                    value: runtime_types::sp_arithmetic::per_things::Percent,
                    candidate_auto_compounding_delegation_count_hint: ::core::primitive::u32,
                    delegation_count_hint: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetAutoCompound> {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "set_auto_compound",
                        types::SetAutoCompound {
                            candidate,
                            value,
                            candidate_auto_compounding_delegation_count_hint,
                            delegation_count_hint,
                        },
                        [
                            228u8, 5u8, 198u8, 3u8, 178u8, 131u8, 109u8, 54u8, 123u8, 146u8, 174u8,
                            77u8, 86u8, 58u8, 17u8, 216u8, 60u8, 203u8, 21u8, 100u8, 33u8, 54u8,
                            155u8, 178u8, 123u8, 1u8, 12u8, 215u8, 245u8, 198u8, 113u8, 154u8,
                        ],
                    )
                }
                #[doc = "Hotfix to remove existing empty entries for candidates that have left."]
                pub fn hotfix_remove_delegation_requests_exited_candidates(
                    &self,
                    candidates: ::std::vec::Vec<runtime_types::account::AccountId20>,
                ) -> ::subxt::tx::Payload<types::HotfixRemoveDelegationRequestsExitedCandidates>
                {
                    ::subxt::tx::Payload::new_static(
                        "ParachainStaking",
                        "hotfix_remove_delegation_requests_exited_candidates",
                        types::HotfixRemoveDelegationRequestsExitedCandidates { candidates },
                        [
                            100u8, 202u8, 62u8, 245u8, 141u8, 143u8, 60u8, 123u8, 85u8, 176u8,
                            10u8, 163u8, 199u8, 33u8, 154u8, 24u8, 71u8, 249u8, 56u8, 235u8, 137u8,
                            225u8, 155u8, 230u8, 173u8, 152u8, 157u8, 7u8, 165u8, 220u8, 120u8,
                            141u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_parachain_staking::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Started new round."]
            pub struct NewRound {
                pub starting_block: ::core::primitive::u32,
                pub round: ::core::primitive::u32,
                pub selected_collators_number: ::core::primitive::u32,
                pub total_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for NewRound {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "NewRound";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Account joined the set of collator candidates."]
            pub struct JoinedCollatorCandidates {
                pub account: runtime_types::account::AccountId20,
                pub amount_locked: ::core::primitive::u128,
                pub new_total_amt_locked: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for JoinedCollatorCandidates {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "JoinedCollatorCandidates";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Candidate selected for collators. Total Exposed Amount includes all delegations."]
            pub struct CollatorChosen {
                pub round: ::core::primitive::u32,
                pub collator_account: runtime_types::account::AccountId20,
                pub total_exposed_amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for CollatorChosen {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CollatorChosen";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Candidate requested to decrease a self bond."]
            pub struct CandidateBondLessRequested {
                pub candidate: runtime_types::account::AccountId20,
                pub amount_to_decrease: ::core::primitive::u128,
                pub execute_round: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for CandidateBondLessRequested {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateBondLessRequested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Candidate has increased a self bond."]
            pub struct CandidateBondedMore {
                pub candidate: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
                pub new_total_bond: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for CandidateBondedMore {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateBondedMore";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Candidate has decreased a self bond."]
            pub struct CandidateBondedLess {
                pub candidate: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
                pub new_bond: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for CandidateBondedLess {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateBondedLess";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Candidate temporarily leave the set of collator candidates without unbonding."]
            pub struct CandidateWentOffline {
                pub candidate: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for CandidateWentOffline {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateWentOffline";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Candidate rejoins the set of collator candidates."]
            pub struct CandidateBackOnline {
                pub candidate: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for CandidateBackOnline {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateBackOnline";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Candidate has requested to leave the set of candidates."]
            pub struct CandidateScheduledExit {
                pub exit_allowed_round: ::core::primitive::u32,
                pub candidate: runtime_types::account::AccountId20,
                pub scheduled_exit: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for CandidateScheduledExit {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateScheduledExit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Cancelled request to leave the set of candidates."]
            pub struct CancelledCandidateExit {
                pub candidate: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for CancelledCandidateExit {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CancelledCandidateExit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Cancelled request to decrease candidate's bond."]
            pub struct CancelledCandidateBondLess {
                pub candidate: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
                pub execute_round: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for CancelledCandidateBondLess {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CancelledCandidateBondLess";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Candidate has left the set of candidates."]
            pub struct CandidateLeft {
                pub ex_candidate: runtime_types::account::AccountId20,
                pub unlocked_amount: ::core::primitive::u128,
                pub new_total_amt_locked: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for CandidateLeft {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateLeft";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Delegator requested to decrease a bond for the collator candidate."]
            pub struct DelegationDecreaseScheduled {
                pub delegator: runtime_types::account::AccountId20,
                pub candidate: runtime_types::account::AccountId20,
                pub amount_to_decrease: ::core::primitive::u128,
                pub execute_round: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for DelegationDecreaseScheduled {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegationDecreaseScheduled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DelegationIncreased {
                pub delegator: runtime_types::account::AccountId20,
                pub candidate: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
                pub in_top: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for DelegationIncreased {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegationIncreased";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DelegationDecreased {
                pub delegator: runtime_types::account::AccountId20,
                pub candidate: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
                pub in_top: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for DelegationDecreased {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegationDecreased";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Delegator requested to leave the set of delegators."]
            pub struct DelegatorExitScheduled {
                pub round: ::core::primitive::u32,
                pub delegator: runtime_types::account::AccountId20,
                pub scheduled_exit: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for DelegatorExitScheduled {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegatorExitScheduled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Delegator requested to revoke delegation."]
            pub struct DelegationRevocationScheduled {
                pub round: ::core::primitive::u32,
                pub delegator: runtime_types::account::AccountId20,
                pub candidate: runtime_types::account::AccountId20,
                pub scheduled_exit: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for DelegationRevocationScheduled {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegationRevocationScheduled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Delegator has left the set of delegators."]
            pub struct DelegatorLeft {
                pub delegator: runtime_types::account::AccountId20,
                pub unstaked_amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DelegatorLeft {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegatorLeft";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Delegation revoked."]
            pub struct DelegationRevoked {
                pub delegator: runtime_types::account::AccountId20,
                pub candidate: runtime_types::account::AccountId20,
                pub unstaked_amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DelegationRevoked {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegationRevoked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Delegation kicked."]
            pub struct DelegationKicked {
                pub delegator: runtime_types::account::AccountId20,
                pub candidate: runtime_types::account::AccountId20,
                pub unstaked_amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DelegationKicked {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegationKicked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Cancelled a pending request to exit the set of delegators."]
            pub struct DelegatorExitCancelled {
                pub delegator: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for DelegatorExitCancelled {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegatorExitCancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Cancelled request to change an existing delegation."]
            pub struct CancelledDelegationRequest { pub delegator : runtime_types :: account :: AccountId20 , pub cancelled_request : runtime_types :: pallet_parachain_staking :: delegation_requests :: CancelledScheduledRequest < :: core :: primitive :: u128 > , pub collator : runtime_types :: account :: AccountId20 , }
            impl ::subxt::events::StaticEvent for CancelledDelegationRequest {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CancelledDelegationRequest";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New delegation (increase of the existing one)."]
            pub struct Delegation {
                pub delegator: runtime_types::account::AccountId20,
                pub locked_amount: ::core::primitive::u128,
                pub candidate: runtime_types::account::AccountId20,
                pub delegator_position:
                    runtime_types::pallet_parachain_staking::types::DelegatorAdded<
                        ::core::primitive::u128,
                    >,
                pub auto_compound: runtime_types::sp_arithmetic::per_things::Percent,
            }
            impl ::subxt::events::StaticEvent for Delegation {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "Delegation";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Delegation from candidate state has been remove."]
            pub struct DelegatorLeftCandidate {
                pub delegator: runtime_types::account::AccountId20,
                pub candidate: runtime_types::account::AccountId20,
                pub unstaked_amount: ::core::primitive::u128,
                pub total_candidate_staked: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DelegatorLeftCandidate {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegatorLeftCandidate";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Paid the account (delegator or collator) the balance as liquid rewards."]
            pub struct Rewarded {
                pub account: runtime_types::account::AccountId20,
                pub rewards: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rewarded {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "Rewarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Transferred to account which holds funds reserved for parachain bond."]
            pub struct ReservedForParachainBond {
                pub account: runtime_types::account::AccountId20,
                pub value: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for ReservedForParachainBond {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "ReservedForParachainBond";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Account (re)set for parachain bond treasury."]
            pub struct ParachainBondAccountSet {
                pub old: runtime_types::account::AccountId20,
                pub new: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for ParachainBondAccountSet {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "ParachainBondAccountSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Percent of inflation reserved for parachain bond (re)set."]
            pub struct ParachainBondReservePercentSet {
                pub old: runtime_types::sp_arithmetic::per_things::Percent,
                pub new: runtime_types::sp_arithmetic::per_things::Percent,
            }
            impl ::subxt::events::StaticEvent for ParachainBondReservePercentSet {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "ParachainBondReservePercentSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Annual inflation input (first 3) was used to derive new per-round inflation (last 3)"]
            pub struct InflationSet {
                pub annual_min: runtime_types::sp_arithmetic::per_things::Perbill,
                pub annual_ideal: runtime_types::sp_arithmetic::per_things::Perbill,
                pub annual_max: runtime_types::sp_arithmetic::per_things::Perbill,
                pub round_min: runtime_types::sp_arithmetic::per_things::Perbill,
                pub round_ideal: runtime_types::sp_arithmetic::per_things::Perbill,
                pub round_max: runtime_types::sp_arithmetic::per_things::Perbill,
            }
            impl ::subxt::events::StaticEvent for InflationSet {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "InflationSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Staking expectations set."]
            pub struct StakeExpectationsSet {
                pub expect_min: ::core::primitive::u128,
                pub expect_ideal: ::core::primitive::u128,
                pub expect_max: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for StakeExpectationsSet {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "StakeExpectationsSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Set total selected candidates to this value."]
            pub struct TotalSelectedSet {
                pub old: ::core::primitive::u32,
                pub new: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for TotalSelectedSet {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "TotalSelectedSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Set collator commission to this value."]
            pub struct CollatorCommissionSet {
                pub old: runtime_types::sp_arithmetic::per_things::Perbill,
                pub new: runtime_types::sp_arithmetic::per_things::Perbill,
            }
            impl ::subxt::events::StaticEvent for CollatorCommissionSet {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CollatorCommissionSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Set blocks per round"]
            pub struct BlocksPerRoundSet {
                pub current_round: ::core::primitive::u32,
                pub first_block: ::core::primitive::u32,
                pub old: ::core::primitive::u32,
                pub new: ::core::primitive::u32,
                pub new_per_round_inflation_min: runtime_types::sp_arithmetic::per_things::Perbill,
                pub new_per_round_inflation_ideal:
                    runtime_types::sp_arithmetic::per_things::Perbill,
                pub new_per_round_inflation_max: runtime_types::sp_arithmetic::per_things::Perbill,
            }
            impl ::subxt::events::StaticEvent for BlocksPerRoundSet {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "BlocksPerRoundSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Auto-compounding reward percent was set for a delegation."]
            pub struct AutoCompoundSet {
                pub candidate: runtime_types::account::AccountId20,
                pub delegator: runtime_types::account::AccountId20,
                pub value: runtime_types::sp_arithmetic::per_things::Percent,
            }
            impl ::subxt::events::StaticEvent for AutoCompoundSet {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "AutoCompoundSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Compounded a portion of rewards towards the delegation."]
            pub struct Compounded {
                pub candidate: runtime_types::account::AccountId20,
                pub delegator: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Compounded {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "Compounded";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Commission percent taken off of rewards for all collators"]
                pub fn collator_commission(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_arithmetic::per_things::Perbill,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "CollatorCommission",
                        vec![],
                        [
                            224u8, 174u8, 87u8, 155u8, 58u8, 228u8, 184u8, 141u8, 241u8, 63u8,
                            115u8, 13u8, 105u8, 242u8, 194u8, 185u8, 226u8, 225u8, 225u8, 75u8,
                            150u8, 118u8, 8u8, 15u8, 122u8, 144u8, 234u8, 202u8, 25u8, 200u8, 2u8,
                            86u8,
                        ],
                    )
                }
                #[doc = " The total candidates selected every round"]
                pub fn total_selected(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "TotalSelected",
                        vec![],
                        [
                            197u8, 168u8, 229u8, 97u8, 69u8, 217u8, 117u8, 140u8, 226u8, 215u8,
                            255u8, 171u8, 236u8, 171u8, 4u8, 253u8, 41u8, 59u8, 227u8, 237u8,
                            198u8, 99u8, 4u8, 239u8, 60u8, 75u8, 41u8, 161u8, 28u8, 234u8, 255u8,
                            127u8,
                        ],
                    )
                }
                #[doc = " Parachain bond config info { account, percent_of_inflation }"]
                pub fn parachain_bond_info(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::ParachainBondConfig<
                        runtime_types::account::AccountId20,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "ParachainBondInfo",
                        vec![],
                        [
                            173u8, 141u8, 68u8, 56u8, 177u8, 213u8, 76u8, 86u8, 111u8, 226u8,
                            193u8, 169u8, 147u8, 92u8, 66u8, 29u8, 253u8, 43u8, 73u8, 174u8, 183u8,
                            130u8, 153u8, 146u8, 145u8, 193u8, 115u8, 221u8, 45u8, 185u8, 178u8,
                            51u8,
                        ],
                    )
                }
                #[doc = " Current round index and next round scheduled transition"]
                pub fn round(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::RoundInfo<
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "Round",
                        vec![],
                        [
                            63u8, 128u8, 229u8, 212u8, 121u8, 0u8, 188u8, 77u8, 121u8, 83u8, 235u8,
                            70u8, 162u8, 37u8, 8u8, 204u8, 13u8, 238u8, 180u8, 145u8, 159u8, 106u8,
                            183u8, 209u8, 119u8, 75u8, 68u8, 5u8, 144u8, 159u8, 201u8, 29u8,
                        ],
                    )
                }
                #[doc = " Get delegator state associated with an account if account is delegating else None"]
                pub fn delegator_state(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::Delegator<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "DelegatorState",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            142u8, 95u8, 99u8, 71u8, 13u8, 113u8, 251u8, 166u8, 143u8, 233u8, 52u8,
                            252u8, 160u8, 47u8, 127u8, 105u8, 171u8, 169u8, 63u8, 128u8, 238u8,
                            106u8, 197u8, 87u8, 4u8, 202u8, 13u8, 131u8, 159u8, 67u8, 100u8, 103u8,
                        ],
                    )
                }
                #[doc = " Get delegator state associated with an account if account is delegating else None"]
                pub fn delegator_state_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::Delegator<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "DelegatorState",
                        Vec::new(),
                        [
                            142u8, 95u8, 99u8, 71u8, 13u8, 113u8, 251u8, 166u8, 143u8, 233u8, 52u8,
                            252u8, 160u8, 47u8, 127u8, 105u8, 171u8, 169u8, 63u8, 128u8, 238u8,
                            106u8, 197u8, 87u8, 4u8, 202u8, 13u8, 131u8, 159u8, 67u8, 100u8, 103u8,
                        ],
                    )
                }
                #[doc = " Get collator candidate info associated with an account if account is candidate else None"]
                pub fn candidate_info(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::CandidateMetadata<
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "CandidateInfo",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            153u8, 63u8, 64u8, 238u8, 222u8, 250u8, 180u8, 203u8, 2u8, 230u8,
                            105u8, 27u8, 7u8, 21u8, 230u8, 235u8, 135u8, 68u8, 209u8, 150u8, 65u8,
                            114u8, 228u8, 119u8, 73u8, 130u8, 132u8, 191u8, 125u8, 139u8, 231u8,
                            221u8,
                        ],
                    )
                }
                #[doc = " Get collator candidate info associated with an account if account is candidate else None"]
                pub fn candidate_info_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::CandidateMetadata<
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "CandidateInfo",
                        Vec::new(),
                        [
                            153u8, 63u8, 64u8, 238u8, 222u8, 250u8, 180u8, 203u8, 2u8, 230u8,
                            105u8, 27u8, 7u8, 21u8, 230u8, 235u8, 135u8, 68u8, 209u8, 150u8, 65u8,
                            114u8, 228u8, 119u8, 73u8, 130u8, 132u8, 191u8, 125u8, 139u8, 231u8,
                            221u8,
                        ],
                    )
                }
                #[doc = " Stores outstanding delegation requests per collator."]                pub fn delegation_scheduled_requests (& self , _0 : impl :: std :: borrow :: Borrow < runtime_types :: account :: AccountId20 > ,) -> :: subxt :: storage :: address :: Address :: < :: subxt :: storage :: address :: StaticStorageMapKey , runtime_types :: bounded_collections :: bounded_vec :: BoundedVec < runtime_types :: pallet_parachain_staking :: delegation_requests :: ScheduledRequest < runtime_types :: account :: AccountId20 , :: core :: primitive :: u128 > > , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "DelegationScheduledRequests",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            22u8, 118u8, 17u8, 73u8, 106u8, 68u8, 249u8, 53u8, 223u8, 160u8, 220u8,
                            22u8, 28u8, 180u8, 30u8, 68u8, 178u8, 3u8, 117u8, 214u8, 161u8, 3u8,
                            89u8, 82u8, 195u8, 30u8, 80u8, 185u8, 182u8, 140u8, 217u8, 101u8,
                        ],
                    )
                }
                #[doc = " Stores outstanding delegation requests per collator."]                pub fn delegation_scheduled_requests_root (& self ,) -> :: subxt :: storage :: address :: Address :: < :: subxt :: storage :: address :: StaticStorageMapKey , runtime_types :: bounded_collections :: bounded_vec :: BoundedVec < runtime_types :: pallet_parachain_staking :: delegation_requests :: ScheduledRequest < runtime_types :: account :: AccountId20 , :: core :: primitive :: u128 > > , () , :: subxt :: storage :: address :: Yes , :: subxt :: storage :: address :: Yes >{
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "DelegationScheduledRequests",
                        Vec::new(),
                        [
                            22u8, 118u8, 17u8, 73u8, 106u8, 68u8, 249u8, 53u8, 223u8, 160u8, 220u8,
                            22u8, 28u8, 180u8, 30u8, 68u8, 178u8, 3u8, 117u8, 214u8, 161u8, 3u8,
                            89u8, 82u8, 195u8, 30u8, 80u8, 185u8, 182u8, 140u8, 217u8, 101u8,
                        ],
                    )
                }
                #[doc = " Stores auto-compounding configuration per collator."]
                pub fn auto_compounding_delegations(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_parachain_staking::auto_compound::AutoCompoundConfig<
                            runtime_types::account::AccountId20,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "AutoCompoundingDelegations",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            119u8, 77u8, 118u8, 55u8, 204u8, 166u8, 15u8, 30u8, 88u8, 10u8, 139u8,
                            245u8, 4u8, 194u8, 202u8, 60u8, 225u8, 233u8, 69u8, 77u8, 72u8, 64u8,
                            79u8, 72u8, 168u8, 74u8, 60u8, 30u8, 121u8, 88u8, 53u8, 22u8,
                        ],
                    )
                }
                #[doc = " Stores auto-compounding configuration per collator."]
                pub fn auto_compounding_delegations_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_parachain_staking::auto_compound::AutoCompoundConfig<
                            runtime_types::account::AccountId20,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "AutoCompoundingDelegations",
                        Vec::new(),
                        [
                            119u8, 77u8, 118u8, 55u8, 204u8, 166u8, 15u8, 30u8, 88u8, 10u8, 139u8,
                            245u8, 4u8, 194u8, 202u8, 60u8, 225u8, 233u8, 69u8, 77u8, 72u8, 64u8,
                            79u8, 72u8, 168u8, 74u8, 60u8, 30u8, 121u8, 88u8, 53u8, 22u8,
                        ],
                    )
                }
                #[doc = " Top delegations for collator candidate"]
                pub fn top_delegations(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::Delegations<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "TopDelegations",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            94u8, 38u8, 155u8, 208u8, 161u8, 68u8, 157u8, 14u8, 241u8, 186u8,
                            163u8, 119u8, 103u8, 47u8, 99u8, 148u8, 209u8, 83u8, 234u8, 52u8, 38u8,
                            171u8, 122u8, 216u8, 167u8, 214u8, 106u8, 0u8, 126u8, 191u8, 21u8,
                            106u8,
                        ],
                    )
                }
                #[doc = " Top delegations for collator candidate"]
                pub fn top_delegations_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::Delegations<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "TopDelegations",
                        Vec::new(),
                        [
                            94u8, 38u8, 155u8, 208u8, 161u8, 68u8, 157u8, 14u8, 241u8, 186u8,
                            163u8, 119u8, 103u8, 47u8, 99u8, 148u8, 209u8, 83u8, 234u8, 52u8, 38u8,
                            171u8, 122u8, 216u8, 167u8, 214u8, 106u8, 0u8, 126u8, 191u8, 21u8,
                            106u8,
                        ],
                    )
                }
                #[doc = " Bottom delegations for collator candidate"]
                pub fn bottom_delegations(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::Delegations<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "BottomDelegations",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            202u8, 31u8, 199u8, 33u8, 211u8, 216u8, 125u8, 204u8, 24u8, 173u8,
                            77u8, 124u8, 204u8, 147u8, 174u8, 38u8, 45u8, 52u8, 161u8, 158u8,
                            137u8, 36u8, 14u8, 135u8, 109u8, 165u8, 192u8, 43u8, 40u8, 92u8, 147u8,
                            34u8,
                        ],
                    )
                }
                #[doc = " Bottom delegations for collator candidate"]
                pub fn bottom_delegations_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::Delegations<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "BottomDelegations",
                        Vec::new(),
                        [
                            202u8, 31u8, 199u8, 33u8, 211u8, 216u8, 125u8, 204u8, 24u8, 173u8,
                            77u8, 124u8, 204u8, 147u8, 174u8, 38u8, 45u8, 52u8, 161u8, 158u8,
                            137u8, 36u8, 14u8, 135u8, 109u8, 165u8, 192u8, 43u8, 40u8, 92u8, 147u8,
                            34u8,
                        ],
                    )
                }
                #[doc = " The collator candidates selected for the current round"]
                pub fn selected_candidates(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::account::AccountId20,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "SelectedCandidates",
                        vec![],
                        [
                            0u8, 194u8, 254u8, 191u8, 255u8, 16u8, 230u8, 124u8, 104u8, 113u8,
                            66u8, 94u8, 129u8, 160u8, 93u8, 168u8, 59u8, 6u8, 228u8, 218u8, 146u8,
                            251u8, 2u8, 25u8, 102u8, 75u8, 214u8, 106u8, 103u8, 210u8, 83u8, 165u8,
                        ],
                    )
                }
                #[doc = " Total capital locked by this staking pallet"]
                pub fn total(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "Total",
                        vec![],
                        [
                            188u8, 31u8, 219u8, 189u8, 49u8, 213u8, 203u8, 89u8, 125u8, 58u8,
                            232u8, 159u8, 131u8, 155u8, 166u8, 113u8, 99u8, 24u8, 40u8, 242u8,
                            118u8, 183u8, 108u8, 230u8, 135u8, 150u8, 84u8, 86u8, 118u8, 91u8,
                            168u8, 62u8,
                        ],
                    )
                }
                #[doc = " The pool of collator candidates, each with their total backing stake"]
                pub fn candidate_pool(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::set::BoundedOrderedSet<
                        runtime_types::pallet_parachain_staking::types::Bond<
                            runtime_types::account::AccountId20,
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "CandidatePool",
                        vec![],
                        [
                            125u8, 199u8, 189u8, 78u8, 49u8, 220u8, 154u8, 184u8, 138u8, 12u8,
                            247u8, 2u8, 111u8, 76u8, 211u8, 200u8, 156u8, 102u8, 40u8, 44u8, 196u8,
                            114u8, 150u8, 153u8, 122u8, 108u8, 198u8, 18u8, 233u8, 215u8, 183u8,
                            239u8,
                        ],
                    )
                }
                #[doc = " Snapshot of collator delegation stake at the start of the round"]
                pub fn at_stake(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::CollatorSnapshot<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "AtStake",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            134u8, 9u8, 2u8, 16u8, 220u8, 159u8, 2u8, 10u8, 146u8, 114u8, 189u8,
                            191u8, 119u8, 97u8, 57u8, 227u8, 210u8, 222u8, 17u8, 151u8, 85u8,
                            110u8, 194u8, 180u8, 159u8, 235u8, 70u8, 140u8, 116u8, 13u8, 36u8,
                            237u8,
                        ],
                    )
                }
                #[doc = " Snapshot of collator delegation stake at the start of the round"]
                pub fn at_stake_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::CollatorSnapshot<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "AtStake",
                        Vec::new(),
                        [
                            134u8, 9u8, 2u8, 16u8, 220u8, 159u8, 2u8, 10u8, 146u8, 114u8, 189u8,
                            191u8, 119u8, 97u8, 57u8, 227u8, 210u8, 222u8, 17u8, 151u8, 85u8,
                            110u8, 194u8, 180u8, 159u8, 235u8, 70u8, 140u8, 116u8, 13u8, 36u8,
                            237u8,
                        ],
                    )
                }
                #[doc = " Delayed payouts"]
                pub fn delayed_payouts(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::DelayedPayout<
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "DelayedPayouts",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            160u8, 16u8, 120u8, 191u8, 50u8, 29u8, 157u8, 223u8, 25u8, 227u8,
                            253u8, 126u8, 213u8, 142u8, 188u8, 212u8, 27u8, 91u8, 19u8, 158u8,
                            172u8, 4u8, 10u8, 160u8, 175u8, 204u8, 229u8, 230u8, 181u8, 74u8, 11u8,
                            144u8,
                        ],
                    )
                }
                #[doc = " Delayed payouts"]
                pub fn delayed_payouts_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::types::DelayedPayout<
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "DelayedPayouts",
                        Vec::new(),
                        [
                            160u8, 16u8, 120u8, 191u8, 50u8, 29u8, 157u8, 223u8, 25u8, 227u8,
                            253u8, 126u8, 213u8, 142u8, 188u8, 212u8, 27u8, 91u8, 19u8, 158u8,
                            172u8, 4u8, 10u8, 160u8, 175u8, 204u8, 229u8, 230u8, 181u8, 74u8, 11u8,
                            144u8,
                        ],
                    )
                }
                #[doc = " Total counted stake for selected candidates in the round"]
                pub fn staked(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "Staked",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            245u8, 200u8, 139u8, 234u8, 94u8, 128u8, 236u8, 14u8, 251u8, 213u8,
                            2u8, 196u8, 227u8, 90u8, 26u8, 108u8, 73u8, 133u8, 18u8, 234u8, 84u8,
                            30u8, 19u8, 85u8, 81u8, 252u8, 189u8, 83u8, 186u8, 3u8, 29u8, 61u8,
                        ],
                    )
                }
                #[doc = " Total counted stake for selected candidates in the round"]
                pub fn staked_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "Staked",
                        Vec::new(),
                        [
                            245u8, 200u8, 139u8, 234u8, 94u8, 128u8, 236u8, 14u8, 251u8, 213u8,
                            2u8, 196u8, 227u8, 90u8, 26u8, 108u8, 73u8, 133u8, 18u8, 234u8, 84u8,
                            30u8, 19u8, 85u8, 81u8, 252u8, 189u8, 83u8, 186u8, 3u8, 29u8, 61u8,
                        ],
                    )
                }
                #[doc = " Inflation configuration"]
                pub fn inflation_config(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_parachain_staking::inflation::InflationInfo<
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "InflationConfig",
                        vec![],
                        [
                            249u8, 22u8, 47u8, 245u8, 35u8, 169u8, 245u8, 14u8, 247u8, 117u8,
                            133u8, 93u8, 46u8, 250u8, 148u8, 76u8, 251u8, 137u8, 84u8, 168u8, 16u8,
                            98u8, 6u8, 218u8, 24u8, 241u8, 163u8, 213u8, 44u8, 31u8, 190u8, 86u8,
                        ],
                    )
                }
                #[doc = " Total points awarded to collators for block production in the round"]
                pub fn points(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "Points",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            72u8, 3u8, 145u8, 244u8, 22u8, 10u8, 182u8, 153u8, 13u8, 175u8, 94u8,
                            117u8, 53u8, 89u8, 18u8, 171u8, 147u8, 72u8, 93u8, 135u8, 155u8, 80u8,
                            192u8, 61u8, 145u8, 70u8, 144u8, 10u8, 33u8, 213u8, 154u8, 161u8,
                        ],
                    )
                }
                #[doc = " Total points awarded to collators for block production in the round"]
                pub fn points_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "Points",
                        Vec::new(),
                        [
                            72u8, 3u8, 145u8, 244u8, 22u8, 10u8, 182u8, 153u8, 13u8, 175u8, 94u8,
                            117u8, 53u8, 89u8, 18u8, 171u8, 147u8, 72u8, 93u8, 135u8, 155u8, 80u8,
                            192u8, 61u8, 145u8, 70u8, 144u8, 10u8, 33u8, 213u8, 154u8, 161u8,
                        ],
                    )
                }
                #[doc = " Points for each collator per round"]
                pub fn awarded_pts(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "AwardedPts",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            205u8, 111u8, 81u8, 222u8, 104u8, 240u8, 213u8, 106u8, 246u8, 32u8,
                            78u8, 203u8, 237u8, 252u8, 105u8, 246u8, 24u8, 24u8, 102u8, 33u8,
                            215u8, 13u8, 229u8, 162u8, 27u8, 188u8, 89u8, 131u8, 119u8, 169u8,
                            242u8, 176u8,
                        ],
                    )
                }
                #[doc = " Points for each collator per round"]
                pub fn awarded_pts_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ParachainStaking",
                        "AwardedPts",
                        Vec::new(),
                        [
                            205u8, 111u8, 81u8, 222u8, 104u8, 240u8, 213u8, 106u8, 246u8, 32u8,
                            78u8, 203u8, 237u8, 252u8, 105u8, 246u8, 24u8, 24u8, 102u8, 33u8,
                            215u8, 13u8, 229u8, 162u8, 27u8, 188u8, 89u8, 131u8, 119u8, 169u8,
                            242u8, 176u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Minimum number of blocks per round"]
                pub fn min_blocks_per_round(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MinBlocksPerRound",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds that candidates remain bonded before exit request is executable"]
                pub fn leave_candidates_delay(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "LeaveCandidatesDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds candidate requests to decrease self-bond must wait to be executable"]
                pub fn candidate_bond_less_delay(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "CandidateBondLessDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds that delegators remain bonded before exit request is executable"]
                pub fn leave_delegators_delay(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "LeaveDelegatorsDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds that delegations remain bonded before revocation request is executable"]
                pub fn revoke_delegation_delay(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "RevokeDelegationDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds that delegation less requests must wait before executable"]
                pub fn delegation_bond_less_delay(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "DelegationBondLessDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds after which block authors are rewarded"]
                pub fn reward_payment_delay(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "RewardPaymentDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Minimum number of selected candidates every round"]
                pub fn min_selected_candidates(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MinSelectedCandidates",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum top delegations counted per candidate"]
                pub fn max_top_delegations_per_candidate(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MaxTopDelegationsPerCandidate",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum bottom delegations (not counted) per candidate"]
                pub fn max_bottom_delegations_per_candidate(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MaxBottomDelegationsPerCandidate",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum delegations per delegator"]
                pub fn max_delegations_per_delegator(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MaxDelegationsPerDelegator",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Minimum stake required for any account to be a collator candidate"]
                pub fn min_candidate_stk(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MinCandidateStk",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Minimum stake for any registered on-chain account to delegate"]
                pub fn min_delegation(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MinDelegation",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Maximum candidates"]
                pub fn max_candidates(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ParachainStaking",
                        "MaxCandidates",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod scheduler {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_scheduler::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_scheduler::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Schedule {
                    pub when: ::core::primitive::u32,
                    pub maybe_periodic:
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                    pub priority: ::core::primitive::u8,
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Schedule {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Cancel {
                    pub when: ::core::primitive::u32,
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Cancel {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "cancel";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ScheduleNamed {
                    pub id: [::core::primitive::u8; 32usize],
                    pub when: ::core::primitive::u32,
                    pub maybe_periodic:
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                    pub priority: ::core::primitive::u8,
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ScheduleNamed {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule_named";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelNamed {
                    pub id: [::core::primitive::u8; 32usize],
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelNamed {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "cancel_named";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ScheduleAfter {
                    pub after: ::core::primitive::u32,
                    pub maybe_periodic:
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                    pub priority: ::core::primitive::u8,
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ScheduleAfter {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule_after";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ScheduleNamedAfter {
                    pub id: [::core::primitive::u8; 32usize],
                    pub after: ::core::primitive::u32,
                    pub maybe_periodic:
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                    pub priority: ::core::primitive::u8,
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ScheduleNamedAfter {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule_named_after";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Anonymously schedule a task."]
                pub fn schedule(
                    &self,
                    when: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::Schedule> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule",
                        types::Schedule {
                            when,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            198u8, 112u8, 93u8, 206u8, 33u8, 68u8, 62u8, 235u8, 253u8, 242u8,
                            243u8, 194u8, 120u8, 175u8, 87u8, 53u8, 230u8, 174u8, 122u8, 246u8,
                            158u8, 223u8, 80u8, 126u8, 93u8, 201u8, 221u8, 239u8, 175u8, 217u8,
                            116u8, 15u8,
                        ],
                    )
                }
                #[doc = "Cancel an anonymously scheduled task."]
                pub fn cancel(
                    &self,
                    when: ::core::primitive::u32,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Cancel> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "cancel",
                        types::Cancel { when, index },
                        [
                            183u8, 204u8, 143u8, 86u8, 17u8, 130u8, 132u8, 91u8, 133u8, 168u8,
                            103u8, 129u8, 114u8, 56u8, 123u8, 42u8, 123u8, 120u8, 221u8, 211u8,
                            26u8, 85u8, 82u8, 246u8, 192u8, 39u8, 254u8, 45u8, 147u8, 56u8, 178u8,
                            133u8,
                        ],
                    )
                }
                #[doc = "Schedule a named task."]
                pub fn schedule_named(
                    &self,
                    id: [::core::primitive::u8; 32usize],
                    when: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::ScheduleNamed> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule_named",
                        types::ScheduleNamed {
                            id,
                            when,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            102u8, 14u8, 89u8, 92u8, 76u8, 177u8, 162u8, 54u8, 231u8, 205u8, 25u8,
                            176u8, 199u8, 27u8, 16u8, 130u8, 42u8, 47u8, 102u8, 51u8, 192u8, 211u8,
                            12u8, 232u8, 254u8, 145u8, 147u8, 158u8, 53u8, 145u8, 167u8, 177u8,
                        ],
                    )
                }
                #[doc = "Cancel a named scheduled task."]
                pub fn cancel_named(
                    &self,
                    id: [::core::primitive::u8; 32usize],
                ) -> ::subxt::tx::Payload<types::CancelNamed> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "cancel_named",
                        types::CancelNamed { id },
                        [
                            205u8, 35u8, 28u8, 57u8, 224u8, 7u8, 49u8, 233u8, 236u8, 163u8, 93u8,
                            236u8, 103u8, 69u8, 65u8, 51u8, 121u8, 84u8, 9u8, 196u8, 147u8, 122u8,
                            227u8, 200u8, 181u8, 233u8, 62u8, 240u8, 174u8, 83u8, 129u8, 193u8,
                        ],
                    )
                }
                #[doc = "Anonymously schedule a task after a delay."]
                pub fn schedule_after(
                    &self,
                    after: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::ScheduleAfter> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule_after",
                        types::ScheduleAfter {
                            after,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            137u8, 75u8, 121u8, 213u8, 85u8, 228u8, 140u8, 240u8, 97u8, 143u8,
                            242u8, 141u8, 196u8, 82u8, 160u8, 126u8, 152u8, 17u8, 2u8, 43u8, 0u8,
                            36u8, 143u8, 79u8, 87u8, 74u8, 220u8, 161u8, 16u8, 69u8, 65u8, 174u8,
                        ],
                    )
                }
                #[doc = "Schedule a named task after a delay."]
                pub fn schedule_named_after(
                    &self,
                    id: [::core::primitive::u8; 32usize],
                    after: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::ScheduleNamedAfter> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule_named_after",
                        types::ScheduleNamedAfter {
                            id,
                            after,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            126u8, 238u8, 93u8, 170u8, 29u8, 37u8, 180u8, 143u8, 174u8, 83u8,
                            181u8, 71u8, 54u8, 182u8, 193u8, 76u8, 249u8, 183u8, 139u8, 176u8,
                            235u8, 68u8, 63u8, 128u8, 128u8, 75u8, 55u8, 52u8, 89u8, 55u8, 219u8,
                            236u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Events type."]
        pub type Event = runtime_types::pallet_scheduler::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Scheduled some task."]
            pub struct Scheduled {
                pub when: ::core::primitive::u32,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Scheduled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Scheduled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Canceled some task."]
            pub struct Canceled {
                pub when: ::core::primitive::u32,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Canceled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Canceled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Dispatched some task."]
            pub struct Dispatched {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Dispatched {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Dispatched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The call for the provided hash was not found so the task has been aborted."]
            pub struct CallUnavailable {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
            }
            impl ::subxt::events::StaticEvent for CallUnavailable {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "CallUnavailable";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The given task was unable to be renewed since the agenda is full at that block."]
            pub struct PeriodicFailed {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
            }
            impl ::subxt::events::StaticEvent for PeriodicFailed {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "PeriodicFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The given task can never be executed since it is overweight."]
            pub struct PermanentlyOverweight {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
            }
            impl ::subxt::events::StaticEvent for PermanentlyOverweight {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "PermanentlyOverweight";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn incomplete_since(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "IncompleteSince",
                        vec![],
                        [
                            250u8, 83u8, 64u8, 167u8, 205u8, 59u8, 225u8, 97u8, 205u8, 12u8, 76u8,
                            130u8, 197u8, 4u8, 111u8, 208u8, 92u8, 217u8, 145u8, 119u8, 38u8,
                            135u8, 1u8, 242u8, 228u8, 143u8, 56u8, 25u8, 115u8, 233u8, 227u8, 66u8,
                        ],
                    )
                }
                #[doc = " Items to be executed, indexed by the block number that they should be executed on."]
                pub fn agenda(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::option::Option<
                            runtime_types::pallet_scheduler::Scheduled<
                                [::core::primitive::u8; 32usize],
                                runtime_types::frame_support::traits::preimages::Bounded<
                                    runtime_types::moonbase_runtime::RuntimeCall,
                                >,
                                ::core::primitive::u32,
                                runtime_types::moonbase_runtime::OriginCaller,
                                runtime_types::account::AccountId20,
                            >,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Agenda",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            228u8, 151u8, 209u8, 43u8, 224u8, 223u8, 25u8, 196u8, 16u8, 221u8,
                            57u8, 213u8, 100u8, 136u8, 182u8, 142u8, 235u8, 176u8, 101u8, 93u8,
                            234u8, 91u8, 136u8, 25u8, 99u8, 19u8, 25u8, 177u8, 237u8, 63u8, 245u8,
                            121u8,
                        ],
                    )
                }
                #[doc = " Items to be executed, indexed by the block number that they should be executed on."]
                pub fn agenda_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::option::Option<
                            runtime_types::pallet_scheduler::Scheduled<
                                [::core::primitive::u8; 32usize],
                                runtime_types::frame_support::traits::preimages::Bounded<
                                    runtime_types::moonbase_runtime::RuntimeCall,
                                >,
                                ::core::primitive::u32,
                                runtime_types::moonbase_runtime::OriginCaller,
                                runtime_types::account::AccountId20,
                            >,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Agenda",
                        Vec::new(),
                        [
                            228u8, 151u8, 209u8, 43u8, 224u8, 223u8, 25u8, 196u8, 16u8, 221u8,
                            57u8, 213u8, 100u8, 136u8, 182u8, 142u8, 235u8, 176u8, 101u8, 93u8,
                            234u8, 91u8, 136u8, 25u8, 99u8, 19u8, 25u8, 177u8, 237u8, 63u8, 245u8,
                            121u8,
                        ],
                    )
                }
                #[doc = " Lookup from a name to the block number and index of the task."]
                #[doc = ""]
                #[doc = " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4"]
                #[doc = " identities."]
                pub fn lookup(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Lookup",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            24u8, 87u8, 96u8, 127u8, 136u8, 205u8, 238u8, 174u8, 71u8, 110u8, 65u8,
                            98u8, 228u8, 167u8, 99u8, 71u8, 171u8, 186u8, 12u8, 218u8, 137u8, 70u8,
                            70u8, 228u8, 153u8, 111u8, 165u8, 114u8, 229u8, 136u8, 118u8, 131u8,
                        ],
                    )
                }
                #[doc = " Lookup from a name to the block number and index of the task."]
                #[doc = ""]
                #[doc = " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4"]
                #[doc = " identities."]
                pub fn lookup_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Lookup",
                        Vec::new(),
                        [
                            24u8, 87u8, 96u8, 127u8, 136u8, 205u8, 238u8, 174u8, 71u8, 110u8, 65u8,
                            98u8, 228u8, 167u8, 99u8, 71u8, 171u8, 186u8, 12u8, 218u8, 137u8, 70u8,
                            70u8, 228u8, 153u8, 111u8, 165u8, 114u8, 229u8, 136u8, 118u8, 131u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight that may be scheduled per block for any dispatchables."]
                pub fn maximum_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "Scheduler",
                        "MaximumWeight",
                        [
                            149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
                            56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
                            128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
                            112u8,
                        ],
                    )
                }
                #[doc = " The maximum number of scheduled calls in the queue for a single block."]
                #[doc = ""]
                #[doc = " NOTE:"]
                #[doc = " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a"]
                #[doc = " higher limit under `runtime-benchmarks` feature."]
                pub fn max_scheduled_per_block(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Scheduler",
                        "MaxScheduledPerBlock",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod democracy {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_democracy::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_democracy::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Propose {
                    pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::moonbase_runtime::RuntimeCall,
                    >,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Second {
                    #[codec(compact)]
                    pub proposal: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Second {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "second";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    #[codec(compact)]
                    pub ref_index: ::core::primitive::u32,
                    pub vote:
                        runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EmergencyCancel {
                    pub ref_index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for EmergencyCancel {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "emergency_cancel";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExternalPropose {
                    pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::moonbase_runtime::RuntimeCall,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ExternalPropose {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "external_propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExternalProposeMajority {
                    pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::moonbase_runtime::RuntimeCall,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ExternalProposeMajority {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "external_propose_majority";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExternalProposeDefault {
                    pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::moonbase_runtime::RuntimeCall,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ExternalProposeDefault {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "external_propose_default";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FastTrack {
                    pub proposal_hash: ::subxt::utils::H256,
                    pub voting_period: ::core::primitive::u32,
                    pub delay: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for FastTrack {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "fast_track";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct VetoExternal {
                    pub proposal_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for VetoExternal {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "veto_external";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelReferendum {
                    #[codec(compact)]
                    pub ref_index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelReferendum {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "cancel_referendum";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegate {
                    pub to: runtime_types::account::AccountId20,
                    pub conviction: runtime_types::pallet_democracy::conviction::Conviction,
                    pub balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Delegate {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "delegate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Undelegate;
                impl ::subxt::blocks::StaticExtrinsic for Undelegate {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "undelegate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearPublicProposals;
                impl ::subxt::blocks::StaticExtrinsic for ClearPublicProposals {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "clear_public_proposals";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Unlock {
                    pub target: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for Unlock {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "unlock";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveVote {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveVote {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "remove_vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveOtherVote {
                    pub target: runtime_types::account::AccountId20,
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveOtherVote {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "remove_other_vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Blacklist {
                    pub proposal_hash: ::subxt::utils::H256,
                    pub maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Blacklist {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "blacklist";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelProposal {
                    #[codec(compact)]
                    pub prop_index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelProposal {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "cancel_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMetadata {
                    pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
                    pub maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "set_metadata";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Propose a sensitive action to be taken."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
                #[doc = "have funds to cover the deposit."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The hash of the proposal preimage."]
                #[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
                #[doc = ""]
                #[doc = "Emits `Proposed`."]
                pub fn propose(
                    &self,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::moonbase_runtime::RuntimeCall,
                    >,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Propose> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "propose",
                        types::Propose { proposal, value },
                        [
                            164u8, 45u8, 183u8, 137u8, 222u8, 27u8, 138u8, 45u8, 20u8, 18u8, 234u8,
                            211u8, 52u8, 184u8, 234u8, 222u8, 193u8, 9u8, 160u8, 58u8, 198u8,
                            106u8, 236u8, 210u8, 172u8, 34u8, 194u8, 107u8, 135u8, 83u8, 22u8,
                            238u8,
                        ],
                    )
                }
                #[doc = "Signals agreement with a particular proposal."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
                #[doc = "must have funds to cover the deposit, equal to the original deposit."]
                #[doc = ""]
                #[doc = "- `proposal`: The index of the proposal to second."]
                pub fn second(
                    &self,
                    proposal: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Second> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "second",
                        types::Second { proposal },
                        [
                            195u8, 55u8, 178u8, 55u8, 129u8, 64u8, 10u8, 131u8, 217u8, 79u8, 1u8,
                            187u8, 73u8, 126u8, 191u8, 221u8, 110u8, 10u8, 13u8, 65u8, 190u8,
                            107u8, 21u8, 236u8, 175u8, 130u8, 227u8, 179u8, 173u8, 39u8, 32u8,
                            147u8,
                        ],
                    )
                }
                #[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
                #[doc = "otherwise it is a vote to keep the status quo."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `ref_index`: The index of the referendum to vote for."]
                #[doc = "- `vote`: The vote configuration."]
                pub fn vote(
                    &self,
                    ref_index: ::core::primitive::u32,
                    vote: runtime_types::pallet_democracy::vote::AccountVote<
                        ::core::primitive::u128,
                    >,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "vote",
                        types::Vote { ref_index, vote },
                        [
                            106u8, 195u8, 229u8, 44u8, 217u8, 214u8, 8u8, 234u8, 175u8, 62u8, 97u8,
                            83u8, 193u8, 180u8, 103u8, 26u8, 174u8, 8u8, 2u8, 158u8, 25u8, 122u8,
                            203u8, 122u8, 32u8, 14u8, 107u8, 169u8, 43u8, 240u8, 143u8, 103u8,
                        ],
                    )
                }
                #[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
                #[doc = "referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
                #[doc = ""]
                #[doc = "-`ref_index`: The index of the referendum to cancel."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`."]
                pub fn emergency_cancel(
                    &self,
                    ref_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::EmergencyCancel> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "emergency_cancel",
                        types::EmergencyCancel { ref_index },
                        [
                            82u8, 232u8, 19u8, 158u8, 88u8, 69u8, 96u8, 225u8, 106u8, 253u8, 6u8,
                            136u8, 87u8, 0u8, 68u8, 128u8, 122u8, 16u8, 107u8, 76u8, 209u8, 14u8,
                            230u8, 49u8, 228u8, 100u8, 187u8, 10u8, 76u8, 71u8, 197u8, 72u8,
                        ],
                    )
                }
                #[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
                #[doc = "referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                pub fn external_propose(
                    &self,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::moonbase_runtime::RuntimeCall,
                    >,
                ) -> ::subxt::tx::Payload<types::ExternalPropose> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "external_propose",
                        types::ExternalPropose { proposal },
                        [
                            99u8, 120u8, 61u8, 124u8, 244u8, 68u8, 12u8, 240u8, 11u8, 168u8, 4u8,
                            50u8, 19u8, 152u8, 255u8, 97u8, 20u8, 195u8, 141u8, 199u8, 31u8, 250u8,
                            222u8, 136u8, 47u8, 162u8, 0u8, 32u8, 215u8, 110u8, 94u8, 109u8,
                        ],
                    )
                }
                #[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
                #[doc = "an external referendum."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                #[doc = ""]
                #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                #[doc = "pre-scheduled `external_propose` call."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn external_propose_majority(
                    &self,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::moonbase_runtime::RuntimeCall,
                    >,
                ) -> ::subxt::tx::Payload<types::ExternalProposeMajority> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "external_propose_majority",
                        types::ExternalProposeMajority { proposal },
                        [
                            35u8, 61u8, 130u8, 81u8, 81u8, 180u8, 127u8, 202u8, 67u8, 84u8, 105u8,
                            113u8, 112u8, 210u8, 1u8, 191u8, 10u8, 39u8, 157u8, 164u8, 9u8, 231u8,
                            75u8, 25u8, 17u8, 175u8, 128u8, 180u8, 238u8, 58u8, 236u8, 214u8,
                        ],
                    )
                }
                #[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
                #[doc = "schedule an external referendum."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                #[doc = ""]
                #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                #[doc = "pre-scheduled `external_propose` call."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn external_propose_default(
                    &self,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::moonbase_runtime::RuntimeCall,
                    >,
                ) -> ::subxt::tx::Payload<types::ExternalProposeDefault> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "external_propose_default",
                        types::ExternalProposeDefault { proposal },
                        [
                            136u8, 199u8, 244u8, 69u8, 5u8, 174u8, 166u8, 251u8, 102u8, 196u8,
                            25u8, 6u8, 33u8, 216u8, 141u8, 78u8, 118u8, 125u8, 128u8, 218u8, 120u8,
                            170u8, 166u8, 15u8, 124u8, 216u8, 128u8, 178u8, 5u8, 74u8, 170u8, 25u8,
                        ],
                    )
                }
                #[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
                #[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
                #[doc = "but it is not a majority-carries referendum then it fails."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `FastTrackOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The hash of the current external proposal."]
                #[doc = "- `voting_period`: The period that is allowed for voting on this proposal. Increased to"]
                #[doc = "\tMust be always greater than zero."]
                #[doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."]
                #[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
                #[doc = "  enacted. This doesn't have a minimum amount."]
                #[doc = ""]
                #[doc = "Emits `Started`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn fast_track(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    voting_period: ::core::primitive::u32,
                    delay: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::FastTrack> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "fast_track",
                        types::FastTrack {
                            proposal_hash,
                            voting_period,
                            delay,
                        },
                        [
                            96u8, 201u8, 216u8, 109u8, 4u8, 244u8, 52u8, 237u8, 120u8, 234u8, 30u8,
                            102u8, 186u8, 132u8, 214u8, 22u8, 40u8, 75u8, 118u8, 23u8, 56u8, 68u8,
                            192u8, 129u8, 74u8, 61u8, 247u8, 98u8, 103u8, 127u8, 200u8, 171u8,
                        ],
                    )
                }
                #[doc = "Veto and blacklist the external proposal hash."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `VetoOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
                #[doc = ""]
                #[doc = "Emits `Vetoed`."]
                #[doc = ""]
                #[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
                pub fn veto_external(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::VetoExternal> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "veto_external",
                        types::VetoExternal { proposal_hash },
                        [
                            121u8, 217u8, 249u8, 134u8, 45u8, 19u8, 126u8, 166u8, 218u8, 223u8,
                            165u8, 124u8, 162u8, 59u8, 56u8, 200u8, 227u8, 125u8, 23u8, 133u8,
                            196u8, 93u8, 210u8, 15u8, 39u8, 26u8, 58u8, 236u8, 9u8, 101u8, 202u8,
                            168u8,
                        ],
                    )
                }
                #[doc = "Remove a referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `ref_index`: The index of the referendum to cancel."]
                #[doc = ""]
                #[doc = "# Weight: `O(1)`."]
                pub fn cancel_referendum(
                    &self,
                    ref_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CancelReferendum> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "cancel_referendum",
                        types::CancelReferendum { ref_index },
                        [
                            149u8, 120u8, 70u8, 20u8, 126u8, 21u8, 30u8, 33u8, 82u8, 124u8, 229u8,
                            179u8, 169u8, 243u8, 173u8, 146u8, 140u8, 22u8, 124u8, 154u8, 228u8,
                            117u8, 109u8, 88u8, 11u8, 100u8, 235u8, 243u8, 118u8, 99u8, 250u8,
                            140u8,
                        ],
                    )
                }
                #[doc = "Delegate the voting power (with some given conviction) of the sending account."]
                #[doc = ""]
                #[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
                #[doc = "time appropriate for the conviction's lock period."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
                #[doc = "  - be delegating already; or"]
                #[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
                #[doc = "    through `reap_vote` or `unvote`)."]
                #[doc = ""]
                #[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
                #[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
                #[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
                #[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
                #[doc = "  be more than the account's current balance."]
                #[doc = ""]
                #[doc = "Emits `Delegated`."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                #[doc = "  voted on. Weight is charged as if maximum votes."]
                pub fn delegate(
                    &self,
                    to: runtime_types::account::AccountId20,
                    conviction: runtime_types::pallet_democracy::conviction::Conviction,
                    balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Delegate> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "delegate",
                        types::Delegate {
                            to,
                            conviction,
                            balance,
                        },
                        [
                            41u8, 59u8, 244u8, 124u8, 221u8, 138u8, 66u8, 47u8, 44u8, 176u8, 249u8,
                            61u8, 51u8, 78u8, 131u8, 239u8, 186u8, 41u8, 234u8, 108u8, 251u8,
                            110u8, 246u8, 177u8, 55u8, 234u8, 228u8, 14u8, 220u8, 109u8, 126u8,
                            78u8,
                        ],
                    )
                }
                #[doc = "Undelegate the voting power of the sending account."]
                #[doc = ""]
                #[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
                #[doc = "of the conviction with which the delegation was issued."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
                #[doc = "currently delegating."]
                #[doc = ""]
                #[doc = "Emits `Undelegated`."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                #[doc = "  voted on. Weight is charged as if maximum votes."]
                pub fn undelegate(&self) -> ::subxt::tx::Payload<types::Undelegate> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "undelegate",
                        types::Undelegate {},
                        [
                            225u8, 156u8, 102u8, 1u8, 172u8, 145u8, 88u8, 12u8, 89u8, 32u8, 51u8,
                            83u8, 25u8, 149u8, 132u8, 203u8, 246u8, 98u8, 155u8, 36u8, 165u8,
                            206u8, 233u8, 169u8, 91u8, 85u8, 105u8, 67u8, 46u8, 134u8, 244u8,
                            250u8,
                        ],
                    )
                }
                #[doc = "Clears all public proposals."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Root_."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`."]
                pub fn clear_public_proposals(
                    &self,
                ) -> ::subxt::tx::Payload<types::ClearPublicProposals> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "clear_public_proposals",
                        types::ClearPublicProposals {},
                        [
                            116u8, 160u8, 246u8, 216u8, 23u8, 188u8, 144u8, 63u8, 97u8, 198u8,
                            11u8, 243u8, 165u8, 84u8, 159u8, 153u8, 235u8, 169u8, 166u8, 15u8,
                            23u8, 116u8, 30u8, 56u8, 133u8, 31u8, 158u8, 114u8, 158u8, 86u8, 106u8,
                            93u8,
                        ],
                    )
                }
                #[doc = "Unlock tokens that have an expired lock."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account to remove the lock on."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` with R number of vote of target."]
                pub fn unlock(
                    &self,
                    target: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::Unlock> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "unlock",
                        types::Unlock { target },
                        [
                            229u8, 214u8, 212u8, 192u8, 101u8, 156u8, 149u8, 255u8, 156u8, 231u8,
                            66u8, 108u8, 203u8, 69u8, 140u8, 167u8, 54u8, 166u8, 72u8, 103u8,
                            154u8, 58u8, 43u8, 21u8, 28u8, 121u8, 34u8, 99u8, 21u8, 203u8, 106u8,
                            13u8,
                        ],
                    )
                }
                #[doc = "Remove a vote for a referendum."]
                #[doc = ""]
                #[doc = "If:"]
                #[doc = "- the referendum was cancelled, or"]
                #[doc = "- the referendum is ongoing, or"]
                #[doc = "- the referendum has ended such that"]
                #[doc = "  - the vote of the account was in opposition to the result; or"]
                #[doc = "  - there was no conviction to the account's vote; or"]
                #[doc = "  - the account made a split vote"]
                #[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
                #[doc = "funds being available."]
                #[doc = ""]
                #[doc = "If, however, the referendum has ended and:"]
                #[doc = "- it finished corresponding to the vote of the account, and"]
                #[doc = "- the account made a standard vote with conviction, and"]
                #[doc = "- the lock period of the conviction is not over"]
                #[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
                #[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
                #[doc = "of both the amount locked and the time is it locked for)."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
                #[doc = "registered for referendum `index`."]
                #[doc = ""]
                #[doc = "- `index`: The index of referendum of the vote to be removed."]
                #[doc = ""]
                #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                #[doc = "  Weight is calculated for the maximum number of vote."]
                pub fn remove_vote(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveVote> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "remove_vote",
                        types::RemoveVote { index },
                        [
                            98u8, 146u8, 215u8, 63u8, 222u8, 70u8, 61u8, 186u8, 90u8, 34u8, 63u8,
                            25u8, 195u8, 119u8, 228u8, 189u8, 38u8, 163u8, 58u8, 210u8, 216u8,
                            156u8, 20u8, 204u8, 136u8, 192u8, 33u8, 210u8, 124u8, 65u8, 153u8,
                            105u8,
                        ],
                    )
                }
                #[doc = "Remove a vote for a referendum."]
                #[doc = ""]
                #[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
                #[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
                #[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
                #[doc = "because the conviction period is over."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
                #[doc = "  referendum `index`."]
                #[doc = "- `index`: The index of referendum of the vote to be removed."]
                #[doc = ""]
                #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                #[doc = "  Weight is calculated for the maximum number of vote."]
                pub fn remove_other_vote(
                    &self,
                    target: runtime_types::account::AccountId20,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveOtherVote> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "remove_other_vote",
                        types::RemoveOtherVote { target, index },
                        [
                            142u8, 22u8, 60u8, 72u8, 113u8, 255u8, 191u8, 106u8, 83u8, 93u8, 40u8,
                            130u8, 89u8, 38u8, 147u8, 250u8, 43u8, 246u8, 40u8, 247u8, 129u8, 69u8,
                            99u8, 246u8, 114u8, 117u8, 134u8, 35u8, 165u8, 178u8, 205u8, 235u8,
                        ],
                    )
                }
                #[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
                #[doc = "proposed again."]
                #[doc = ""]
                #[doc = "If called on a queued public or external proposal, then this will result in it being"]
                #[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
                #[doc = "then it will be cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
                #[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
                #[doc = "cancelled."]
                #[doc = ""]
                #[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
                #[doc = "  reasonable value)."]
                pub fn blacklist(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<types::Blacklist> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "blacklist",
                        types::Blacklist {
                            proposal_hash,
                            maybe_ref_index,
                        },
                        [
                            227u8, 200u8, 88u8, 154u8, 134u8, 121u8, 131u8, 177u8, 94u8, 119u8,
                            12u8, 129u8, 150u8, 59u8, 108u8, 103u8, 109u8, 55u8, 220u8, 211u8,
                            250u8, 103u8, 160u8, 170u8, 63u8, 142u8, 112u8, 244u8, 29u8, 238u8,
                            101u8, 24u8,
                        ],
                    )
                }
                #[doc = "Remove a proposal."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
                #[doc = ""]
                #[doc = "- `prop_index`: The index of the proposal to cancel."]
                #[doc = ""]
                #[doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"]
                pub fn cancel_proposal(
                    &self,
                    prop_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CancelProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "cancel_proposal",
                        types::CancelProposal { prop_index },
                        [
                            213u8, 5u8, 215u8, 209u8, 71u8, 229u8, 66u8, 38u8, 171u8, 38u8, 14u8,
                            103u8, 248u8, 176u8, 217u8, 143u8, 234u8, 89u8, 110u8, 250u8, 3u8,
                            190u8, 151u8, 74u8, 55u8, 58u8, 249u8, 138u8, 25u8, 191u8, 55u8, 142u8,
                        ],
                    )
                }
                #[doc = "Set or clear a metadata of a proposal or a referendum."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `origin`: Must correspond to the `MetadataOwner`."]
                #[doc = "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`"]
                #[doc = "      threshold."]
                #[doc = "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`"]
                #[doc = "      threshold."]
                #[doc = "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`"]
                #[doc = "      threshold."]
                #[doc = "    - `Signed` by a creator for a public proposal."]
                #[doc = "    - `Signed` to clear a metadata for a finished referendum."]
                #[doc = "    - `Root` to set a metadata for an ongoing referendum."]
                #[doc = "- `owner`: an identifier of a metadata owner."]
                #[doc = "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."]
                pub fn set_metadata(
                    &self,
                    owner: runtime_types::pallet_democracy::types::MetadataOwner,
                    maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                ) -> ::subxt::tx::Payload<types::SetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "set_metadata",
                        types::SetMetadata { owner, maybe_hash },
                        [
                            191u8, 200u8, 139u8, 27u8, 167u8, 250u8, 72u8, 78u8, 18u8, 98u8, 108u8,
                            1u8, 122u8, 120u8, 47u8, 77u8, 174u8, 60u8, 247u8, 69u8, 228u8, 196u8,
                            149u8, 107u8, 239u8, 45u8, 47u8, 118u8, 87u8, 233u8, 79u8, 29u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_democracy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion has been proposed by a public account."]
            pub struct Proposed {
                pub proposal_index: ::core::primitive::u32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A public proposal has been tabled for referendum vote."]
            pub struct Tabled {
                pub proposal_index: ::core::primitive::u32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Tabled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Tabled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An external proposal has been tabled."]
            pub struct ExternalTabled;
            impl ::subxt::events::StaticEvent for ExternalTabled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "ExternalTabled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has begun."]
            pub struct Started {
                pub ref_index: ::core::primitive::u32,
                pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
            }
            impl ::subxt::events::StaticEvent for Started {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Started";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal has been approved by referendum."]
            pub struct Passed {
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Passed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Passed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal has been rejected by referendum."]
            pub struct NotPassed {
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for NotPassed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "NotPassed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been cancelled."]
            pub struct Cancelled {
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Cancelled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Cancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has delegated their vote to another account."]
            pub struct Delegated {
                pub who: runtime_types::account::AccountId20,
                pub target: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Delegated {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Delegated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has cancelled a previous delegation operation."]
            pub struct Undelegated {
                pub account: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Undelegated {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Undelegated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An external proposal has been vetoed."]
            pub struct Vetoed {
                pub who: runtime_types::account::AccountId20,
                pub proposal_hash: ::subxt::utils::H256,
                pub until: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Vetoed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Vetoed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal_hash has been blacklisted permanently."]
            pub struct Blacklisted {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Blacklisted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Blacklisted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has voted in a referendum"]
            pub struct Voted {
                pub voter: runtime_types::account::AccountId20,
                pub ref_index: ::core::primitive::u32,
                pub vote:
                    runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has secconded a proposal"]
            pub struct Seconded {
                pub seconder: runtime_types::account::AccountId20,
                pub prop_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Seconded {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Seconded";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal got canceled."]
            pub struct ProposalCanceled {
                pub prop_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ProposalCanceled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "ProposalCanceled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata for a proposal or a referendum has been set."]
            pub struct MetadataSet {
                pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata for a proposal or a referendum has been cleared."]
            pub struct MetadataCleared {
                pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataCleared {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "MetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata has been transferred to new owner."]
            pub struct MetadataTransferred {
                pub prev_owner: runtime_types::pallet_democracy::types::MetadataOwner,
                pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataTransferred {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "MetadataTransferred";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The number of (public) proposals that have been made so far."]
                pub fn public_prop_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "PublicPropCount",
                        vec![],
                        [
                            51u8, 175u8, 184u8, 94u8, 91u8, 212u8, 100u8, 108u8, 127u8, 162u8,
                            233u8, 137u8, 12u8, 209u8, 29u8, 130u8, 125u8, 179u8, 208u8, 160u8,
                            173u8, 149u8, 12u8, 111u8, 1u8, 82u8, 196u8, 137u8, 51u8, 204u8, 153u8,
                            198u8,
                        ],
                    )
                }
                #[doc = " The public proposals. Unsorted. The second item is the proposal."]
                pub fn public_props(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::moonbase_runtime::RuntimeCall,
                        >,
                        runtime_types::account::AccountId20,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "PublicProps",
                        vec![],
                        [
                            32u8, 60u8, 72u8, 89u8, 218u8, 126u8, 165u8, 16u8, 46u8, 40u8, 247u8,
                            171u8, 28u8, 199u8, 94u8, 166u8, 219u8, 140u8, 20u8, 13u8, 110u8,
                            179u8, 239u8, 24u8, 114u8, 113u8, 39u8, 224u8, 139u8, 180u8, 202u8,
                            180u8,
                        ],
                    )
                }
                #[doc = " Those who have locked a deposit."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
                pub fn deposit_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::account::AccountId20,
                        >,
                        ::core::primitive::u128,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "DepositOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            241u8, 252u8, 135u8, 12u8, 16u8, 82u8, 14u8, 13u8, 70u8, 211u8, 193u8,
                            154u8, 30u8, 152u8, 139u8, 119u8, 160u8, 81u8, 6u8, 229u8, 31u8, 150u8,
                            208u8, 177u8, 40u8, 176u8, 28u8, 48u8, 84u8, 102u8, 142u8, 94u8,
                        ],
                    )
                }
                #[doc = " Those who have locked a deposit."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
                pub fn deposit_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::account::AccountId20,
                        >,
                        ::core::primitive::u128,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "DepositOf",
                        Vec::new(),
                        [
                            241u8, 252u8, 135u8, 12u8, 16u8, 82u8, 14u8, 13u8, 70u8, 211u8, 193u8,
                            154u8, 30u8, 152u8, 139u8, 119u8, 160u8, 81u8, 6u8, 229u8, 31u8, 150u8,
                            208u8, 177u8, 40u8, 176u8, 28u8, 48u8, 84u8, 102u8, 142u8, 94u8,
                        ],
                    )
                }
                #[doc = " The next free referendum index, aka the number of referenda started so far."]
                pub fn referendum_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "ReferendumCount",
                        vec![],
                        [
                            64u8, 145u8, 232u8, 153u8, 121u8, 87u8, 128u8, 253u8, 170u8, 192u8,
                            139u8, 18u8, 0u8, 33u8, 243u8, 11u8, 238u8, 222u8, 244u8, 5u8, 247u8,
                            198u8, 149u8, 31u8, 122u8, 208u8, 86u8, 179u8, 166u8, 167u8, 93u8,
                            67u8,
                        ],
                    )
                }
                #[doc = " The lowest referendum index representing an unbaked referendum. Equal to"]
                #[doc = " `ReferendumCount` if there isn't a unbaked referendum."]
                pub fn lowest_unbaked(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "LowestUnbaked",
                        vec![],
                        [
                            237u8, 222u8, 144u8, 214u8, 0u8, 186u8, 81u8, 176u8, 51u8, 14u8, 204u8,
                            184u8, 147u8, 97u8, 187u8, 84u8, 40u8, 8u8, 86u8, 241u8, 16u8, 157u8,
                            202u8, 44u8, 185u8, 111u8, 70u8, 114u8, 40u8, 135u8, 1u8, 155u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
                pub fn referendum_info_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_democracy::types::ReferendumInfo<
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::moonbase_runtime::RuntimeCall,
                        >,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "ReferendumInfoOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            245u8, 152u8, 149u8, 236u8, 59u8, 164u8, 120u8, 142u8, 130u8, 25u8,
                            119u8, 158u8, 103u8, 140u8, 203u8, 213u8, 110u8, 151u8, 137u8, 226u8,
                            186u8, 130u8, 233u8, 245u8, 145u8, 145u8, 140u8, 54u8, 222u8, 219u8,
                            234u8, 206u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
                pub fn referendum_info_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_democracy::types::ReferendumInfo<
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::moonbase_runtime::RuntimeCall,
                        >,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "ReferendumInfoOf",
                        Vec::new(),
                        [
                            245u8, 152u8, 149u8, 236u8, 59u8, 164u8, 120u8, 142u8, 130u8, 25u8,
                            119u8, 158u8, 103u8, 140u8, 203u8, 213u8, 110u8, 151u8, 137u8, 226u8,
                            186u8, 130u8, 233u8, 245u8, 145u8, 145u8, 140u8, 54u8, 222u8, 219u8,
                            234u8, 206u8,
                        ],
                    )
                }
                #[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
                #[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
                pub fn voting_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_democracy::vote::Voting<
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "VotingOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            68u8, 92u8, 13u8, 178u8, 204u8, 38u8, 12u8, 166u8, 34u8, 195u8, 93u8,
                            124u8, 239u8, 191u8, 121u8, 80u8, 119u8, 25u8, 161u8, 36u8, 222u8,
                            104u8, 89u8, 4u8, 137u8, 23u8, 240u8, 14u8, 119u8, 67u8, 77u8, 33u8,
                        ],
                    )
                }
                #[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
                #[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
                pub fn voting_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_democracy::vote::Voting<
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "VotingOf",
                        Vec::new(),
                        [
                            68u8, 92u8, 13u8, 178u8, 204u8, 38u8, 12u8, 166u8, 34u8, 195u8, 93u8,
                            124u8, 239u8, 191u8, 121u8, 80u8, 119u8, 25u8, 161u8, 36u8, 222u8,
                            104u8, 89u8, 4u8, 137u8, 23u8, 240u8, 14u8, 119u8, 67u8, 77u8, 33u8,
                        ],
                    )
                }
                #[doc = " True if the last referendum tabled was submitted externally. False if it was a public"]
                #[doc = " proposal."]
                pub fn last_tabled_was_external(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "LastTabledWasExternal",
                        vec![],
                        [
                            162u8, 201u8, 72u8, 9u8, 78u8, 49u8, 72u8, 62u8, 240u8, 69u8, 20u8,
                            135u8, 26u8, 59u8, 71u8, 46u8, 19u8, 25u8, 195u8, 11u8, 99u8, 31u8,
                            104u8, 4u8, 24u8, 129u8, 47u8, 69u8, 219u8, 178u8, 104u8, 190u8,
                        ],
                    )
                }
                #[doc = " The referendum to be tabled whenever it would be valid to table an external proposal."]
                #[doc = " This happens when a referendum needs to be tabled and one of two conditions are met:"]
                #[doc = " - `LastTabledWasExternal` is `false`; or"]
                #[doc = " - `PublicProps` is empty."]
                pub fn next_external(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::moonbase_runtime::RuntimeCall,
                        >,
                        runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "NextExternal",
                        vec![],
                        [
                            240u8, 58u8, 238u8, 86u8, 35u8, 48u8, 192u8, 51u8, 91u8, 4u8, 47u8,
                            202u8, 21u8, 74u8, 158u8, 64u8, 107u8, 247u8, 248u8, 240u8, 122u8,
                            109u8, 204u8, 180u8, 103u8, 239u8, 156u8, 68u8, 141u8, 253u8, 131u8,
                            239u8,
                        ],
                    )
                }
                #[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
                #[doc = " (until when it may not be resubmitted) and who vetoed it."]
                pub fn blacklist(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u32,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::account::AccountId20,
                        >,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "Blacklist",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            161u8, 38u8, 138u8, 52u8, 86u8, 221u8, 74u8, 102u8, 111u8, 62u8, 130u8,
                            49u8, 2u8, 223u8, 120u8, 127u8, 190u8, 106u8, 158u8, 228u8, 75u8,
                            131u8, 233u8, 81u8, 157u8, 39u8, 21u8, 26u8, 216u8, 12u8, 59u8, 221u8,
                        ],
                    )
                }
                #[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
                #[doc = " (until when it may not be resubmitted) and who vetoed it."]
                pub fn blacklist_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u32,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::account::AccountId20,
                        >,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "Blacklist",
                        Vec::new(),
                        [
                            161u8, 38u8, 138u8, 52u8, 86u8, 221u8, 74u8, 102u8, 111u8, 62u8, 130u8,
                            49u8, 2u8, 223u8, 120u8, 127u8, 190u8, 106u8, 158u8, 228u8, 75u8,
                            131u8, 233u8, 81u8, 157u8, 39u8, 21u8, 26u8, 216u8, 12u8, 59u8, 221u8,
                        ],
                    )
                }
                #[doc = " Record of all proposals that have been subject to emergency cancellation."]
                pub fn cancellations(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "Cancellations",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            80u8, 190u8, 98u8, 105u8, 129u8, 25u8, 167u8, 180u8, 74u8, 128u8,
                            232u8, 29u8, 193u8, 209u8, 185u8, 60u8, 18u8, 180u8, 59u8, 192u8,
                            149u8, 13u8, 123u8, 232u8, 34u8, 208u8, 48u8, 104u8, 35u8, 181u8,
                            186u8, 244u8,
                        ],
                    )
                }
                #[doc = " Record of all proposals that have been subject to emergency cancellation."]
                pub fn cancellations_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "Cancellations",
                        Vec::new(),
                        [
                            80u8, 190u8, 98u8, 105u8, 129u8, 25u8, 167u8, 180u8, 74u8, 128u8,
                            232u8, 29u8, 193u8, 209u8, 185u8, 60u8, 18u8, 180u8, 59u8, 192u8,
                            149u8, 13u8, 123u8, 232u8, 34u8, 208u8, 48u8, 104u8, 35u8, 181u8,
                            186u8, 244u8,
                        ],
                    )
                }
                #[doc = " General information concerning any proposal or referendum."]
                #[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
                #[doc = " dump or IPFS hash of a JSON file."]
                #[doc = ""]
                #[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
                #[doc = " large preimages."]
                pub fn metadata_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::pallet_democracy::types::MetadataOwner,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "MetadataOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            52u8, 151u8, 124u8, 110u8, 85u8, 173u8, 181u8, 86u8, 174u8, 183u8,
                            102u8, 22u8, 8u8, 36u8, 224u8, 114u8, 98u8, 0u8, 220u8, 215u8, 19u8,
                            147u8, 32u8, 238u8, 242u8, 187u8, 235u8, 163u8, 183u8, 235u8, 9u8,
                            180u8,
                        ],
                    )
                }
                #[doc = " General information concerning any proposal or referendum."]
                #[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
                #[doc = " dump or IPFS hash of a JSON file."]
                #[doc = ""]
                #[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
                #[doc = " large preimages."]
                pub fn metadata_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "MetadataOf",
                        Vec::new(),
                        [
                            52u8, 151u8, 124u8, 110u8, 85u8, 173u8, 181u8, 86u8, 174u8, 183u8,
                            102u8, 22u8, 8u8, 36u8, 224u8, 114u8, 98u8, 0u8, 220u8, 215u8, 19u8,
                            147u8, 32u8, 238u8, 242u8, 187u8, 235u8, 163u8, 183u8, 235u8, 9u8,
                            180u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The period between a proposal being approved and enacted."]
                #[doc = ""]
                #[doc = " It should generally be a little more than the unstake period to ensure that"]
                #[doc = " voting stakers have an opportunity to remove themselves from the system in the case"]
                #[doc = " where they are on the losing side of a vote."]
                pub fn enactment_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "EnactmentPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " How often (in blocks) new public referenda are launched."]
                pub fn launch_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "LaunchPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " How often (in blocks) to check for new votes."]
                pub fn voting_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "VotingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The minimum period of vote locking."]
                #[doc = ""]
                #[doc = " It should be no shorter than enactment period to ensure that in the case of an approval,"]
                #[doc = " those successful voters are locked into the consequences that their votes entail."]
                pub fn vote_locking_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "VoteLockingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
                pub fn minimum_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MinimumDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Indicator for whether an emergency origin is even allowed to happen. Some chains may"]
                #[doc = " want to set this permanently to `false`, others may want to condition it on things such"]
                #[doc = " as an upgrade having happened recently."]
                pub fn instant_allowed(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::bool> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "InstantAllowed",
                        [
                            165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
                            252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
                            100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
                        ],
                    )
                }
                #[doc = " Minimum voting period allowed for a fast-track referendum."]
                pub fn fast_track_voting_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "FastTrackVotingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Period in blocks where an external proposal may not be re-submitted after being vetoed."]
                pub fn cooloff_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "CooloffPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of votes for an account."]
                #[doc = ""]
                #[doc = " Also used to compute weight, an overly big value can"]
                #[doc = " lead to extrinsic with very big weight: see `delegate` for instance."]
                pub fn max_votes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MaxVotes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of public proposals that can exist at any time."]
                pub fn max_proposals(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MaxProposals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of deposits a public proposal may have at any time."]
                pub fn max_deposits(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MaxDeposits",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of items which can be blacklisted."]
                pub fn max_blacklisted(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MaxBlacklisted",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod council_collective {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_collective::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_collective::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMembers {
                    pub new_members: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    pub prime: ::core::option::Option<runtime_types::account::AccountId20>,
                    pub old_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMembers {
                    const PALLET: &'static str = "CouncilCollective";
                    const CALL: &'static str = "set_members";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Execute {
                    pub proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "CouncilCollective";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Propose {
                    #[codec(compact)]
                    pub threshold: ::core::primitive::u32,
                    pub proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "CouncilCollective";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    pub proposal: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub approve: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "CouncilCollective";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisapproveProposal {
                    pub proposal_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for DisapproveProposal {
                    const PALLET: &'static str = "CouncilCollective";
                    const CALL: &'static str = "disapprove_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Close {
                    pub proposal_hash: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Close {
                    const PALLET: &'static str = "CouncilCollective";
                    const CALL: &'static str = "close";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the collective's membership."]
                #[doc = ""]
                #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                #[doc = "- `prime`: The prime member whose vote sets the default."]
                #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                #[doc = "  weight estimation."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                #[doc = ""]
                #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                #[doc = ""]
                #[doc = "# WARNING:"]
                #[doc = ""]
                #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                #[doc = "implementation of the trait [`ChangeMembers`]."]
                #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                #[doc = "with other logic managing the member set."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(MP + N)` where:"]
                #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                #[doc = "  - `P` proposals-count (code-bounded)"]
                pub fn set_members(
                    &self,
                    new_members: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    prime: ::core::option::Option<runtime_types::account::AccountId20>,
                    old_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "CouncilCollective",
                        "set_members",
                        types::SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            57u8, 48u8, 193u8, 19u8, 33u8, 214u8, 209u8, 67u8, 27u8, 228u8, 99u8,
                            142u8, 118u8, 147u8, 228u8, 12u8, 25u8, 250u8, 141u8, 100u8, 98u8,
                            206u8, 128u8, 17u8, 226u8, 68u8, 96u8, 177u8, 196u8, 192u8, 4u8, 67u8,
                        ],
                    )
                }
                #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                #[doc = ""]
                #[doc = "Origin must be a member of the collective."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(B + M + P)` where:"]
                #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "- `M` members-count (code-bounded)"]
                #[doc = "- `P` complexity of dispatching `proposal`"]
                pub fn execute(
                    &self,
                    proposal: runtime_types::moonbase_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Execute> {
                    ::subxt::tx::Payload::new_static(
                        "CouncilCollective",
                        "execute",
                        types::Execute {
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            46u8, 232u8, 151u8, 1u8, 147u8, 192u8, 62u8, 63u8, 0u8, 254u8, 157u8,
                            44u8, 94u8, 5u8, 31u8, 15u8, 16u8, 208u8, 38u8, 142u8, 71u8, 169u8,
                            139u8, 158u8, 162u8, 102u8, 100u8, 49u8, 66u8, 255u8, 123u8, 163u8,
                        ],
                    )
                }
                #[doc = "Add a new proposal to either be voted on or executed directly."]
                #[doc = ""]
                #[doc = "Requires the sender to be member."]
                #[doc = ""]
                #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                #[doc = "or put up for voting."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - branching is influenced by `threshold` where:"]
                #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                pub fn propose(
                    &self,
                    threshold: ::core::primitive::u32,
                    proposal: runtime_types::moonbase_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Propose> {
                    ::subxt::tx::Payload::new_static(
                        "CouncilCollective",
                        "propose",
                        types::Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            114u8, 103u8, 23u8, 11u8, 199u8, 241u8, 42u8, 57u8, 215u8, 223u8,
                            152u8, 236u8, 32u8, 240u8, 165u8, 65u8, 246u8, 222u8, 195u8, 252u8,
                            93u8, 163u8, 43u8, 85u8, 150u8, 127u8, 146u8, 135u8, 215u8, 213u8,
                            152u8, 99u8,
                        ],
                    )
                }
                #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                #[doc = ""]
                #[doc = "Requires the sender to be a member."]
                #[doc = ""]
                #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                #[doc = "fee."]
                #[doc = "## Complexity"]
                #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                pub fn vote(
                    &self,
                    proposal: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "CouncilCollective",
                        "vote",
                        types::Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
                            129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
                            176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
                            120u8,
                        ],
                    )
                }
                #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                #[doc = "state."]
                #[doc = ""]
                #[doc = "Must be called by the Root origin."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(P) where P is the number of max proposals"]
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::DisapproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "CouncilCollective",
                        "disapprove_proposal",
                        types::DisapproveProposal { proposal_hash },
                        [
                            26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
                            155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
                            156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
                        ],
                    )
                }
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                pub fn close(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Close> {
                    ::subxt::tx::Payload::new_static(
                        "CouncilCollective",
                        "close",
                        types::Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            136u8, 48u8, 243u8, 34u8, 60u8, 109u8, 186u8, 158u8, 72u8, 48u8, 62u8,
                            34u8, 167u8, 46u8, 33u8, 142u8, 239u8, 43u8, 238u8, 125u8, 94u8, 80u8,
                            157u8, 245u8, 220u8, 126u8, 58u8, 244u8, 186u8, 195u8, 30u8, 127u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_collective::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
            #[doc = "`MemberCount`)."]
            pub struct Proposed {
                pub account: runtime_types::account::AccountId20,
                pub proposal_index: ::core::primitive::u32,
                pub proposal_hash: ::subxt::utils::H256,
                pub threshold: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "CouncilCollective";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been voted on by given account, leaving"]
            #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
            pub struct Voted {
                pub account: runtime_types::account::AccountId20,
                pub proposal_hash: ::subxt::utils::H256,
                pub voted: ::core::primitive::bool,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "CouncilCollective";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was approved by the required threshold."]
            pub struct Approved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "CouncilCollective";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was not approved by the required threshold."]
            pub struct Disapproved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "CouncilCollective";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
            pub struct Executed {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "CouncilCollective";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
            pub struct MemberExecuted {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "CouncilCollective";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
            pub struct Closed {
                pub proposal_hash: ::subxt::utils::H256,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "CouncilCollective";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The hashes of the active proposals."]
                pub fn proposals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::H256,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CouncilCollective",
                        "Proposals",
                        vec![],
                        [
                            210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
                            147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
                            198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::moonbase_runtime::RuntimeCall,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CouncilCollective",
                        "ProposalOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            72u8, 150u8, 102u8, 62u8, 13u8, 225u8, 203u8, 109u8, 26u8, 138u8,
                            181u8, 159u8, 164u8, 57u8, 83u8, 90u8, 177u8, 162u8, 250u8, 224u8,
                            176u8, 206u8, 28u8, 214u8, 219u8, 235u8, 31u8, 65u8, 1u8, 143u8, 246u8,
                            171u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::moonbase_runtime::RuntimeCall,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CouncilCollective",
                        "ProposalOf",
                        Vec::new(),
                        [
                            72u8, 150u8, 102u8, 62u8, 13u8, 225u8, 203u8, 109u8, 26u8, 138u8,
                            181u8, 159u8, 164u8, 57u8, 83u8, 90u8, 177u8, 162u8, 250u8, 224u8,
                            176u8, 206u8, 28u8, 214u8, 219u8, 235u8, 31u8, 65u8, 1u8, 143u8, 246u8,
                            171u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CouncilCollective",
                        "Voting",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            98u8, 196u8, 41u8, 133u8, 250u8, 43u8, 117u8, 234u8, 220u8, 251u8,
                            209u8, 250u8, 141u8, 167u8, 161u8, 75u8, 192u8, 37u8, 144u8, 123u8,
                            18u8, 140u8, 173u8, 98u8, 87u8, 143u8, 145u8, 58u8, 37u8, 80u8, 173u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CouncilCollective",
                        "Voting",
                        Vec::new(),
                        [
                            98u8, 196u8, 41u8, 133u8, 250u8, 43u8, 117u8, 234u8, 220u8, 251u8,
                            209u8, 250u8, 141u8, 167u8, 161u8, 75u8, 192u8, 37u8, 144u8, 123u8,
                            18u8, 140u8, 173u8, 98u8, 87u8, 143u8, 145u8, 58u8, 37u8, 80u8, 173u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " Proposals so far."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CouncilCollective",
                        "ProposalCount",
                        vec![],
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective. This is stored sorted (just by value)."]
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::account::AccountId20>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CouncilCollective",
                        "Members",
                        vec![],
                        [
                            239u8, 177u8, 211u8, 65u8, 244u8, 88u8, 99u8, 62u8, 211u8, 52u8, 40u8,
                            10u8, 99u8, 162u8, 212u8, 203u8, 225u8, 253u8, 182u8, 133u8, 107u8,
                            103u8, 77u8, 238u8, 148u8, 255u8, 65u8, 106u8, 9u8, 230u8, 236u8,
                            224u8,
                        ],
                    )
                }
                #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::account::AccountId20,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CouncilCollective",
                        "Prime",
                        vec![],
                        [
                            37u8, 41u8, 188u8, 54u8, 33u8, 64u8, 159u8, 123u8, 190u8, 96u8, 187u8,
                            46u8, 35u8, 217u8, 157u8, 189u8, 243u8, 40u8, 118u8, 144u8, 104u8,
                            27u8, 188u8, 54u8, 55u8, 241u8, 78u8, 33u8, 116u8, 44u8, 88u8, 62u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
                pub fn max_proposal_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "CouncilCollective",
                        "MaxProposalWeight",
                        [
                            149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
                            56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
                            128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
                            112u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod tech_committee_collective {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_collective::pallet::Error2;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_collective::pallet::Call2;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMembers {
                    pub new_members: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    pub prime: ::core::option::Option<runtime_types::account::AccountId20>,
                    pub old_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMembers {
                    const PALLET: &'static str = "TechCommitteeCollective";
                    const CALL: &'static str = "set_members";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Execute {
                    pub proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "TechCommitteeCollective";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Propose {
                    #[codec(compact)]
                    pub threshold: ::core::primitive::u32,
                    pub proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "TechCommitteeCollective";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    pub proposal: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub approve: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "TechCommitteeCollective";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisapproveProposal {
                    pub proposal_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for DisapproveProposal {
                    const PALLET: &'static str = "TechCommitteeCollective";
                    const CALL: &'static str = "disapprove_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Close {
                    pub proposal_hash: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Close {
                    const PALLET: &'static str = "TechCommitteeCollective";
                    const CALL: &'static str = "close";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the collective's membership."]
                #[doc = ""]
                #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                #[doc = "- `prime`: The prime member whose vote sets the default."]
                #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                #[doc = "  weight estimation."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                #[doc = ""]
                #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                #[doc = ""]
                #[doc = "# WARNING:"]
                #[doc = ""]
                #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                #[doc = "implementation of the trait [`ChangeMembers`]."]
                #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                #[doc = "with other logic managing the member set."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(MP + N)` where:"]
                #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                #[doc = "  - `P` proposals-count (code-bounded)"]
                pub fn set_members(
                    &self,
                    new_members: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    prime: ::core::option::Option<runtime_types::account::AccountId20>,
                    old_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "TechCommitteeCollective",
                        "set_members",
                        types::SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            57u8, 48u8, 193u8, 19u8, 33u8, 214u8, 209u8, 67u8, 27u8, 228u8, 99u8,
                            142u8, 118u8, 147u8, 228u8, 12u8, 25u8, 250u8, 141u8, 100u8, 98u8,
                            206u8, 128u8, 17u8, 226u8, 68u8, 96u8, 177u8, 196u8, 192u8, 4u8, 67u8,
                        ],
                    )
                }
                #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                #[doc = ""]
                #[doc = "Origin must be a member of the collective."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(B + M + P)` where:"]
                #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "- `M` members-count (code-bounded)"]
                #[doc = "- `P` complexity of dispatching `proposal`"]
                pub fn execute(
                    &self,
                    proposal: runtime_types::moonbase_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Execute> {
                    ::subxt::tx::Payload::new_static(
                        "TechCommitteeCollective",
                        "execute",
                        types::Execute {
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            46u8, 232u8, 151u8, 1u8, 147u8, 192u8, 62u8, 63u8, 0u8, 254u8, 157u8,
                            44u8, 94u8, 5u8, 31u8, 15u8, 16u8, 208u8, 38u8, 142u8, 71u8, 169u8,
                            139u8, 158u8, 162u8, 102u8, 100u8, 49u8, 66u8, 255u8, 123u8, 163u8,
                        ],
                    )
                }
                #[doc = "Add a new proposal to either be voted on or executed directly."]
                #[doc = ""]
                #[doc = "Requires the sender to be member."]
                #[doc = ""]
                #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                #[doc = "or put up for voting."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - branching is influenced by `threshold` where:"]
                #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                pub fn propose(
                    &self,
                    threshold: ::core::primitive::u32,
                    proposal: runtime_types::moonbase_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Propose> {
                    ::subxt::tx::Payload::new_static(
                        "TechCommitteeCollective",
                        "propose",
                        types::Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            114u8, 103u8, 23u8, 11u8, 199u8, 241u8, 42u8, 57u8, 215u8, 223u8,
                            152u8, 236u8, 32u8, 240u8, 165u8, 65u8, 246u8, 222u8, 195u8, 252u8,
                            93u8, 163u8, 43u8, 85u8, 150u8, 127u8, 146u8, 135u8, 215u8, 213u8,
                            152u8, 99u8,
                        ],
                    )
                }
                #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                #[doc = ""]
                #[doc = "Requires the sender to be a member."]
                #[doc = ""]
                #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                #[doc = "fee."]
                #[doc = "## Complexity"]
                #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                pub fn vote(
                    &self,
                    proposal: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "TechCommitteeCollective",
                        "vote",
                        types::Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
                            129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
                            176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
                            120u8,
                        ],
                    )
                }
                #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                #[doc = "state."]
                #[doc = ""]
                #[doc = "Must be called by the Root origin."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(P) where P is the number of max proposals"]
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::DisapproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "TechCommitteeCollective",
                        "disapprove_proposal",
                        types::DisapproveProposal { proposal_hash },
                        [
                            26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
                            155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
                            156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
                        ],
                    )
                }
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                pub fn close(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Close> {
                    ::subxt::tx::Payload::new_static(
                        "TechCommitteeCollective",
                        "close",
                        types::Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            136u8, 48u8, 243u8, 34u8, 60u8, 109u8, 186u8, 158u8, 72u8, 48u8, 62u8,
                            34u8, 167u8, 46u8, 33u8, 142u8, 239u8, 43u8, 238u8, 125u8, 94u8, 80u8,
                            157u8, 245u8, 220u8, 126u8, 58u8, 244u8, 186u8, 195u8, 30u8, 127u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_collective::pallet::Event2;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
            #[doc = "`MemberCount`)."]
            pub struct Proposed {
                pub account: runtime_types::account::AccountId20,
                pub proposal_index: ::core::primitive::u32,
                pub proposal_hash: ::subxt::utils::H256,
                pub threshold: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "TechCommitteeCollective";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been voted on by given account, leaving"]
            #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
            pub struct Voted {
                pub account: runtime_types::account::AccountId20,
                pub proposal_hash: ::subxt::utils::H256,
                pub voted: ::core::primitive::bool,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "TechCommitteeCollective";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was approved by the required threshold."]
            pub struct Approved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "TechCommitteeCollective";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was not approved by the required threshold."]
            pub struct Disapproved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "TechCommitteeCollective";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
            pub struct Executed {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "TechCommitteeCollective";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
            pub struct MemberExecuted {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "TechCommitteeCollective";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
            pub struct Closed {
                pub proposal_hash: ::subxt::utils::H256,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "TechCommitteeCollective";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The hashes of the active proposals."]
                pub fn proposals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::H256,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechCommitteeCollective",
                        "Proposals",
                        vec![],
                        [
                            210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
                            147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
                            198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::moonbase_runtime::RuntimeCall,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechCommitteeCollective",
                        "ProposalOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            72u8, 150u8, 102u8, 62u8, 13u8, 225u8, 203u8, 109u8, 26u8, 138u8,
                            181u8, 159u8, 164u8, 57u8, 83u8, 90u8, 177u8, 162u8, 250u8, 224u8,
                            176u8, 206u8, 28u8, 214u8, 219u8, 235u8, 31u8, 65u8, 1u8, 143u8, 246u8,
                            171u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::moonbase_runtime::RuntimeCall,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechCommitteeCollective",
                        "ProposalOf",
                        Vec::new(),
                        [
                            72u8, 150u8, 102u8, 62u8, 13u8, 225u8, 203u8, 109u8, 26u8, 138u8,
                            181u8, 159u8, 164u8, 57u8, 83u8, 90u8, 177u8, 162u8, 250u8, 224u8,
                            176u8, 206u8, 28u8, 214u8, 219u8, 235u8, 31u8, 65u8, 1u8, 143u8, 246u8,
                            171u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechCommitteeCollective",
                        "Voting",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            98u8, 196u8, 41u8, 133u8, 250u8, 43u8, 117u8, 234u8, 220u8, 251u8,
                            209u8, 250u8, 141u8, 167u8, 161u8, 75u8, 192u8, 37u8, 144u8, 123u8,
                            18u8, 140u8, 173u8, 98u8, 87u8, 143u8, 145u8, 58u8, 37u8, 80u8, 173u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechCommitteeCollective",
                        "Voting",
                        Vec::new(),
                        [
                            98u8, 196u8, 41u8, 133u8, 250u8, 43u8, 117u8, 234u8, 220u8, 251u8,
                            209u8, 250u8, 141u8, 167u8, 161u8, 75u8, 192u8, 37u8, 144u8, 123u8,
                            18u8, 140u8, 173u8, 98u8, 87u8, 143u8, 145u8, 58u8, 37u8, 80u8, 173u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " Proposals so far."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechCommitteeCollective",
                        "ProposalCount",
                        vec![],
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective. This is stored sorted (just by value)."]
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::account::AccountId20>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechCommitteeCollective",
                        "Members",
                        vec![],
                        [
                            239u8, 177u8, 211u8, 65u8, 244u8, 88u8, 99u8, 62u8, 211u8, 52u8, 40u8,
                            10u8, 99u8, 162u8, 212u8, 203u8, 225u8, 253u8, 182u8, 133u8, 107u8,
                            103u8, 77u8, 238u8, 148u8, 255u8, 65u8, 106u8, 9u8, 230u8, 236u8,
                            224u8,
                        ],
                    )
                }
                #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::account::AccountId20,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechCommitteeCollective",
                        "Prime",
                        vec![],
                        [
                            37u8, 41u8, 188u8, 54u8, 33u8, 64u8, 159u8, 123u8, 190u8, 96u8, 187u8,
                            46u8, 35u8, 217u8, 157u8, 189u8, 243u8, 40u8, 118u8, 144u8, 104u8,
                            27u8, 188u8, 54u8, 55u8, 241u8, 78u8, 33u8, 116u8, 44u8, 88u8, 62u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
                pub fn max_proposal_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "TechCommitteeCollective",
                        "MaxProposalWeight",
                        [
                            149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
                            56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
                            128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
                            112u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod treasury {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the treasury pallet."]
        pub type Error = runtime_types::pallet_treasury::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_treasury::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ProposeSpend {
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                    pub beneficiary: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for ProposeSpend {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "propose_spend";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RejectProposal {
                    #[codec(compact)]
                    pub proposal_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RejectProposal {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "reject_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveProposal {
                    #[codec(compact)]
                    pub proposal_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveProposal {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "approve_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Spend {
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                    pub beneficiary: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for Spend {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "spend";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveApproval {
                    #[codec(compact)]
                    pub proposal_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveApproval {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "remove_approval";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
                #[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
                #[doc = "proposal is awarded."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)"]
                pub fn propose_spend(
                    &self,
                    value: ::core::primitive::u128,
                    beneficiary: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::ProposeSpend> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "propose_spend",
                        types::ProposeSpend { value, beneficiary },
                        [
                            159u8, 123u8, 137u8, 51u8, 19u8, 246u8, 128u8, 49u8, 228u8, 129u8,
                            89u8, 3u8, 247u8, 43u8, 102u8, 154u8, 159u8, 190u8, 206u8, 5u8, 52u8,
                            143u8, 16u8, 43u8, 91u8, 88u8, 221u8, 47u8, 99u8, 209u8, 94u8, 149u8,
                        ],
                    )
                }
                #[doc = "Reject a proposed spend. The original deposit will be slashed."]
                #[doc = ""]
                #[doc = "May only be called from `T::RejectOrigin`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)"]
                pub fn reject_proposal(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RejectProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "reject_proposal",
                        types::RejectProposal { proposal_id },
                        [
                            18u8, 166u8, 80u8, 141u8, 222u8, 230u8, 4u8, 36u8, 7u8, 76u8, 12u8,
                            40u8, 145u8, 114u8, 12u8, 43u8, 223u8, 78u8, 189u8, 222u8, 120u8, 80u8,
                            225u8, 215u8, 119u8, 68u8, 200u8, 15u8, 25u8, 172u8, 192u8, 173u8,
                        ],
                    )
                }
                #[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
                #[doc = "and the original deposit will be returned."]
                #[doc = ""]
                #[doc = "May only be called from `T::ApproveOrigin`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = " - O(1)."]
                pub fn approve_proposal(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ApproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "approve_proposal",
                        types::ApproveProposal { proposal_id },
                        [
                            154u8, 176u8, 152u8, 97u8, 167u8, 177u8, 78u8, 9u8, 235u8, 229u8,
                            199u8, 193u8, 214u8, 3u8, 16u8, 30u8, 4u8, 104u8, 27u8, 184u8, 100u8,
                            65u8, 179u8, 13u8, 91u8, 62u8, 115u8, 5u8, 219u8, 211u8, 251u8, 153u8,
                        ],
                    )
                }
                #[doc = "Propose and approve a spend of treasury funds."]
                #[doc = ""]
                #[doc = "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`."]
                #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                #[doc = "- `beneficiary`: The destination account for the transfer."]
                #[doc = ""]
                #[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
                #[doc = "beneficiary."]
                pub fn spend(
                    &self,
                    amount: ::core::primitive::u128,
                    beneficiary: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::Spend> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "spend",
                        types::Spend {
                            amount,
                            beneficiary,
                        },
                        [
                            177u8, 49u8, 35u8, 63u8, 67u8, 115u8, 176u8, 181u8, 200u8, 163u8,
                            227u8, 164u8, 4u8, 130u8, 251u8, 158u8, 111u8, 42u8, 30u8, 237u8,
                            219u8, 207u8, 46u8, 16u8, 28u8, 47u8, 178u8, 126u8, 23u8, 56u8, 39u8,
                            188u8,
                        ],
                    )
                }
                #[doc = "Force a previously approved proposal to be removed from the approval queue."]
                #[doc = "The original deposit will no longer be returned."]
                #[doc = ""]
                #[doc = "May only be called from `T::RejectOrigin`."]
                #[doc = "- `proposal_id`: The index of a proposal"]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(A) where `A` is the number of approvals"]
                #[doc = ""]
                #[doc = "Errors:"]
                #[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
                #[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
                #[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
                pub fn remove_approval(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveApproval> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "remove_approval",
                        types::RemoveApproval { proposal_id },
                        [
                            180u8, 20u8, 39u8, 227u8, 29u8, 228u8, 234u8, 36u8, 155u8, 114u8,
                            197u8, 135u8, 185u8, 31u8, 56u8, 247u8, 224u8, 168u8, 254u8, 233u8,
                            250u8, 134u8, 186u8, 155u8, 108u8, 84u8, 94u8, 226u8, 207u8, 130u8,
                            196u8, 100u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_treasury::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New proposal."]
            pub struct Proposed {
                pub proposal_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "We have ended a spend period and will now allocate funds."]
            pub struct Spending {
                pub budget_remaining: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Spending {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Spending";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some funds have been allocated."]
            pub struct Awarded {
                pub proposal_index: ::core::primitive::u32,
                pub award: ::core::primitive::u128,
                pub account: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Awarded {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Awarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal was rejected; funds were slashed."]
            pub struct Rejected {
                pub proposal_index: ::core::primitive::u32,
                pub slashed: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rejected {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rejected";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some of our funds have been burnt."]
            pub struct Burnt {
                pub burnt_funds: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Burnt {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Burnt";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
            pub struct Rollover {
                pub rollover_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rollover {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rollover";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some funds have been deposited."]
            pub struct Deposit {
                pub value: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new spend proposal has been approved."]
            pub struct SpendApproved {
                pub proposal_index: ::core::primitive::u32,
                pub amount: ::core::primitive::u128,
                pub beneficiary: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for SpendApproved {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "SpendApproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The inactive funds of the pallet have been updated."]
            pub struct UpdatedInactive {
                pub reactivated: ::core::primitive::u128,
                pub deactivated: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for UpdatedInactive {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "UpdatedInactive";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Number of proposals that have been made."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "ProposalCount",
                        vec![],
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " Proposals that have been made."]
                pub fn proposals(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_treasury::Proposal<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Proposals",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            27u8, 204u8, 232u8, 218u8, 41u8, 17u8, 78u8, 244u8, 133u8, 134u8,
                            111u8, 227u8, 229u8, 204u8, 63u8, 219u8, 250u8, 61u8, 81u8, 91u8,
                            251u8, 240u8, 228u8, 189u8, 82u8, 60u8, 193u8, 174u8, 177u8, 116u8,
                            194u8, 3u8,
                        ],
                    )
                }
                #[doc = " Proposals that have been made."]
                pub fn proposals_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_treasury::Proposal<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Proposals",
                        Vec::new(),
                        [
                            27u8, 204u8, 232u8, 218u8, 41u8, 17u8, 78u8, 244u8, 133u8, 134u8,
                            111u8, 227u8, 229u8, 204u8, 63u8, 219u8, 250u8, 61u8, 81u8, 91u8,
                            251u8, 240u8, 228u8, 189u8, 82u8, 60u8, 193u8, 174u8, 177u8, 116u8,
                            194u8, 3u8,
                        ],
                    )
                }
                #[doc = " The amount which has been reported as inactive to Currency."]
                pub fn deactivated(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Deactivated",
                        vec![],
                        [
                            120u8, 221u8, 159u8, 56u8, 161u8, 44u8, 54u8, 233u8, 47u8, 114u8,
                            170u8, 150u8, 52u8, 24u8, 137u8, 212u8, 122u8, 247u8, 40u8, 17u8,
                            208u8, 130u8, 42u8, 154u8, 33u8, 222u8, 59u8, 116u8, 0u8, 15u8, 79u8,
                            123u8,
                        ],
                    )
                }
                #[doc = " Proposal indices that have been approved but not yet awarded."]
                pub fn approvals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Approvals",
                        vec![],
                        [
                            78u8, 147u8, 186u8, 235u8, 17u8, 40u8, 247u8, 235u8, 67u8, 222u8, 3u8,
                            14u8, 248u8, 17u8, 67u8, 180u8, 93u8, 161u8, 64u8, 35u8, 119u8, 194u8,
                            187u8, 226u8, 135u8, 162u8, 147u8, 174u8, 139u8, 72u8, 99u8, 212u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Fraction of a proposal's value that should be bonded in order to place the proposal."]
                #[doc = " An accepted proposal gets these back. A rejected proposal does not."]
                pub fn proposal_bond(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "ProposalBond",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn proposal_bond_minimum(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "ProposalBondMinimum",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn proposal_bond_maximum(
                    &self,
                ) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "ProposalBondMaximum",
                        [
                            198u8, 51u8, 89u8, 159u8, 124u8, 251u8, 51u8, 80u8, 167u8, 193u8, 44u8,
                            199u8, 80u8, 36u8, 41u8, 130u8, 137u8, 229u8, 178u8, 208u8, 37u8,
                            215u8, 169u8, 183u8, 180u8, 191u8, 140u8, 240u8, 250u8, 61u8, 42u8,
                            147u8,
                        ],
                    )
                }
                #[doc = " Period between successive spends."]
                pub fn spend_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "SpendPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Percentage of spare funds (if any) that are burnt per spend period."]
                pub fn burn(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "Burn",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " The treasury's pallet id, used for deriving its sovereign account ID."]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "PalletId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
                #[doc = " The maximum number of approvals that can wait in the spending queue."]
                #[doc = ""]
                #[doc = " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."]
                pub fn max_approvals(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "MaxApprovals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod author_inherent {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_author_inherent::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_author_inherent::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KickOffAuthorshipValidation;
                impl ::subxt::blocks::StaticExtrinsic for KickOffAuthorshipValidation {
                    const PALLET: &'static str = "AuthorInherent";
                    const CALL: &'static str = "kick_off_authorship_validation";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "This inherent is a workaround to run code after the \"real\" inherents have executed,"]
                #[doc = "but before transactions are executed."]
                pub fn kick_off_authorship_validation(
                    &self,
                ) -> ::subxt::tx::Payload<types::KickOffAuthorshipValidation> {
                    ::subxt::tx::Payload::new_static(
                        "AuthorInherent",
                        "kick_off_authorship_validation",
                        types::KickOffAuthorshipValidation {},
                        [
                            11u8, 217u8, 39u8, 76u8, 33u8, 143u8, 106u8, 219u8, 72u8, 44u8, 92u8,
                            66u8, 18u8, 134u8, 119u8, 157u8, 189u8, 225u8, 204u8, 236u8, 244u8,
                            198u8, 32u8, 233u8, 138u8, 240u8, 8u8, 133u8, 45u8, 147u8, 22u8, 180u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Author of current block."]
                pub fn author(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::account::AccountId20,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AuthorInherent",
                        "Author",
                        vec![],
                        [
                            7u8, 127u8, 74u8, 91u8, 81u8, 221u8, 194u8, 231u8, 235u8, 168u8, 73u8,
                            46u8, 213u8, 97u8, 197u8, 227u8, 72u8, 89u8, 2u8, 221u8, 28u8, 38u8,
                            77u8, 172u8, 153u8, 20u8, 189u8, 249u8, 101u8, 225u8, 183u8, 139u8,
                        ],
                    )
                }
                #[doc = " The highest slot that has been seen in the history of this chain."]
                #[doc = " This is a strictly-increasing value."]
                pub fn highest_slot_seen(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AuthorInherent",
                        "HighestSlotSeen",
                        vec![],
                        [
                            21u8, 211u8, 176u8, 151u8, 178u8, 58u8, 139u8, 53u8, 226u8, 186u8,
                            177u8, 13u8, 78u8, 157u8, 99u8, 227u8, 173u8, 129u8, 75u8, 95u8, 109u8,
                            7u8, 211u8, 20u8, 239u8, 9u8, 1u8, 52u8, 115u8, 46u8, 210u8, 255u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod author_filter {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_author_slot_filter::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetEligible {
                    pub new: runtime_types::pallet_author_slot_filter::num::NonZeroU32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetEligible {
                    const PALLET: &'static str = "AuthorFilter";
                    const CALL: &'static str = "set_eligible";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Update the eligible count. Intended to be called by governance."]
                pub fn set_eligible(
                    &self,
                    new: runtime_types::pallet_author_slot_filter::num::NonZeroU32,
                ) -> ::subxt::tx::Payload<types::SetEligible> {
                    ::subxt::tx::Payload::new_static(
                        "AuthorFilter",
                        "set_eligible",
                        types::SetEligible { new },
                        [
                            169u8, 180u8, 143u8, 245u8, 10u8, 213u8, 144u8, 115u8, 83u8, 108u8,
                            194u8, 239u8, 238u8, 176u8, 211u8, 189u8, 11u8, 244u8, 111u8, 108u8,
                            232u8, 236u8, 74u8, 221u8, 41u8, 215u8, 0u8, 56u8, 242u8, 133u8, 149u8,
                            243u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_author_slot_filter::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The amount of eligible authors for the filter to select has been changed."]
            pub struct EligibleUpdated(
                pub runtime_types::pallet_author_slot_filter::num::NonZeroU32,
            );
            impl ::subxt::events::StaticEvent for EligibleUpdated {
                const PALLET: &'static str = "AuthorFilter";
                const EVENT: &'static str = "EligibleUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn eligible_ratio(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_arithmetic::per_things::Percent,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AuthorFilter",
                        "EligibleRatio",
                        vec![],
                        [
                            130u8, 192u8, 107u8, 59u8, 226u8, 92u8, 13u8, 206u8, 151u8, 103u8,
                            186u8, 58u8, 187u8, 222u8, 11u8, 173u8, 170u8, 30u8, 0u8, 203u8, 197u8,
                            3u8, 150u8, 201u8, 123u8, 82u8, 160u8, 111u8, 28u8, 255u8, 57u8, 220u8,
                        ],
                    )
                }
                #[doc = " The number of active authors that will be eligible at each height."]
                pub fn eligible_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_author_slot_filter::num::NonZeroU32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AuthorFilter",
                        "EligibleCount",
                        vec![],
                        [
                            222u8, 118u8, 99u8, 114u8, 61u8, 74u8, 127u8, 52u8, 146u8, 141u8, 69u8,
                            11u8, 1u8, 62u8, 113u8, 143u8, 32u8, 94u8, 85u8, 237u8, 66u8, 79u8,
                            180u8, 0u8, 169u8, 44u8, 14u8, 11u8, 178u8, 185u8, 37u8, 157u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod crowdloan_rewards {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_crowdloan_rewards::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_crowdloan_rewards::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssociateNativeIdentity {
                    pub reward_account: runtime_types::account::AccountId20,
                    pub relay_account: [::core::primitive::u8; 32usize],
                    pub proof: runtime_types::sp_runtime::MultiSignature,
                }
                impl ::subxt::blocks::StaticExtrinsic for AssociateNativeIdentity {
                    const PALLET: &'static str = "CrowdloanRewards";
                    const CALL: &'static str = "associate_native_identity";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ChangeAssociationWithRelayKeys {
                    pub reward_account: runtime_types::account::AccountId20,
                    pub previous_account: runtime_types::account::AccountId20,
                    pub proofs: ::std::vec::Vec<(
                        [::core::primitive::u8; 32usize],
                        runtime_types::sp_runtime::MultiSignature,
                    )>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ChangeAssociationWithRelayKeys {
                    const PALLET: &'static str = "CrowdloanRewards";
                    const CALL: &'static str = "change_association_with_relay_keys";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Claim;
                impl ::subxt::blocks::StaticExtrinsic for Claim {
                    const PALLET: &'static str = "CrowdloanRewards";
                    const CALL: &'static str = "claim";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateRewardAddress {
                    pub new_reward_account: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateRewardAddress {
                    const PALLET: &'static str = "CrowdloanRewards";
                    const CALL: &'static str = "update_reward_address";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CompleteInitialization {
                    pub lease_ending_block: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CompleteInitialization {
                    const PALLET: &'static str = "CrowdloanRewards";
                    const CALL: &'static str = "complete_initialization";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InitializeRewardVec {
                    pub rewards: ::std::vec::Vec<(
                        [::core::primitive::u8; 32usize],
                        ::core::option::Option<runtime_types::account::AccountId20>,
                        ::core::primitive::u128,
                    )>,
                }
                impl ::subxt::blocks::StaticExtrinsic for InitializeRewardVec {
                    const PALLET: &'static str = "CrowdloanRewards";
                    const CALL: &'static str = "initialize_reward_vec";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Associate a native rewards_destination identity with a crowdloan contribution."]
                #[doc = ""]
                #[doc = "The caller needs to provide the unassociated relay account and a proof to succeed"]
                #[doc = "with the association"]
                #[doc = "The proof is nothing but a signature over the reward_address using the relay keys"]
                pub fn associate_native_identity(
                    &self,
                    reward_account: runtime_types::account::AccountId20,
                    relay_account: [::core::primitive::u8; 32usize],
                    proof: runtime_types::sp_runtime::MultiSignature,
                ) -> ::subxt::tx::Payload<types::AssociateNativeIdentity> {
                    ::subxt::tx::Payload::new_static(
                        "CrowdloanRewards",
                        "associate_native_identity",
                        types::AssociateNativeIdentity {
                            reward_account,
                            relay_account,
                            proof,
                        },
                        [
                            229u8, 200u8, 67u8, 39u8, 164u8, 128u8, 65u8, 232u8, 210u8, 226u8, 8u8,
                            156u8, 104u8, 98u8, 140u8, 21u8, 98u8, 152u8, 241u8, 215u8, 179u8,
                            246u8, 105u8, 85u8, 247u8, 92u8, 77u8, 179u8, 22u8, 70u8, 175u8, 44u8,
                        ],
                    )
                }
                #[doc = "Change reward account by submitting proofs from relay accounts"]
                #[doc = ""]
                #[doc = "The number of valid proofs needs to be bigger than 'RewardAddressRelayVoteThreshold'"]
                #[doc = "The account to be changed needs to be submitted as 'previous_account'"]
                #[doc = "Origin must be RewardAddressChangeOrigin"]
                pub fn change_association_with_relay_keys(
                    &self,
                    reward_account: runtime_types::account::AccountId20,
                    previous_account: runtime_types::account::AccountId20,
                    proofs: ::std::vec::Vec<(
                        [::core::primitive::u8; 32usize],
                        runtime_types::sp_runtime::MultiSignature,
                    )>,
                ) -> ::subxt::tx::Payload<types::ChangeAssociationWithRelayKeys> {
                    ::subxt::tx::Payload::new_static(
                        "CrowdloanRewards",
                        "change_association_with_relay_keys",
                        types::ChangeAssociationWithRelayKeys {
                            reward_account,
                            previous_account,
                            proofs,
                        },
                        [
                            94u8, 150u8, 252u8, 34u8, 132u8, 90u8, 183u8, 15u8, 32u8, 39u8, 20u8,
                            65u8, 130u8, 91u8, 230u8, 35u8, 252u8, 142u8, 44u8, 215u8, 108u8,
                            115u8, 160u8, 44u8, 240u8, 87u8, 225u8, 154u8, 62u8, 186u8, 169u8,
                            114u8,
                        ],
                    )
                }
                #[doc = "Collect whatever portion of your reward are currently vested."]
                pub fn claim(&self) -> ::subxt::tx::Payload<types::Claim> {
                    ::subxt::tx::Payload::new_static(
                        "CrowdloanRewards",
                        "claim",
                        types::Claim {},
                        [
                            190u8, 235u8, 250u8, 234u8, 67u8, 158u8, 3u8, 42u8, 214u8, 76u8, 33u8,
                            240u8, 24u8, 129u8, 206u8, 143u8, 161u8, 126u8, 135u8, 66u8, 242u8,
                            137u8, 95u8, 1u8, 242u8, 86u8, 156u8, 142u8, 121u8, 110u8, 178u8, 0u8,
                        ],
                    )
                }
                #[doc = "Update reward address, proving that the caller owns the current native key"]
                pub fn update_reward_address(
                    &self,
                    new_reward_account: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::UpdateRewardAddress> {
                    ::subxt::tx::Payload::new_static(
                        "CrowdloanRewards",
                        "update_reward_address",
                        types::UpdateRewardAddress { new_reward_account },
                        [
                            21u8, 71u8, 178u8, 85u8, 106u8, 222u8, 53u8, 53u8, 136u8, 75u8, 84u8,
                            172u8, 192u8, 209u8, 90u8, 47u8, 163u8, 138u8, 95u8, 63u8, 21u8, 66u8,
                            85u8, 234u8, 78u8, 205u8, 126u8, 46u8, 38u8, 35u8, 0u8, 124u8,
                        ],
                    )
                }
                #[doc = "This extrinsic completes the initialization if some checks are fullfiled. These checks are:"]
                #[doc = " -The reward contribution money matches the crowdloan pot"]
                #[doc = " -The end vesting block is higher than the init vesting block"]
                #[doc = " -The initialization has not complete yet"]
                pub fn complete_initialization(
                    &self,
                    lease_ending_block: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CompleteInitialization> {
                    ::subxt::tx::Payload::new_static(
                        "CrowdloanRewards",
                        "complete_initialization",
                        types::CompleteInitialization { lease_ending_block },
                        [
                            233u8, 201u8, 70u8, 112u8, 125u8, 155u8, 204u8, 171u8, 75u8, 157u8,
                            202u8, 124u8, 186u8, 211u8, 118u8, 217u8, 203u8, 237u8, 243u8, 243u8,
                            221u8, 241u8, 33u8, 115u8, 168u8, 48u8, 120u8, 174u8, 131u8, 152u8,
                            85u8, 81u8,
                        ],
                    )
                }
                #[doc = "Initialize the reward distribution storage. It shortcuts whenever an error is found"]
                #[doc = "This does not enforce any checks other than making sure we dont go over funds"]
                #[doc = "complete_initialization should perform any additional"]
                pub fn initialize_reward_vec(
                    &self,
                    rewards: ::std::vec::Vec<(
                        [::core::primitive::u8; 32usize],
                        ::core::option::Option<runtime_types::account::AccountId20>,
                        ::core::primitive::u128,
                    )>,
                ) -> ::subxt::tx::Payload<types::InitializeRewardVec> {
                    ::subxt::tx::Payload::new_static(
                        "CrowdloanRewards",
                        "initialize_reward_vec",
                        types::InitializeRewardVec { rewards },
                        [
                            213u8, 104u8, 113u8, 50u8, 87u8, 18u8, 250u8, 6u8, 88u8, 15u8, 190u8,
                            17u8, 204u8, 0u8, 44u8, 18u8, 152u8, 1u8, 250u8, 72u8, 191u8, 242u8,
                            120u8, 150u8, 196u8, 137u8, 133u8, 178u8, 251u8, 247u8, 60u8, 192u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_crowdloan_rewards::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The initial payment of InitializationPayment % was paid"]
            pub struct InitialPaymentMade(
                pub runtime_types::account::AccountId20,
                pub ::core::primitive::u128,
            );
            impl ::subxt::events::StaticEvent for InitialPaymentMade {
                const PALLET: &'static str = "CrowdloanRewards";
                const EVENT: &'static str = "InitialPaymentMade";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Someone has proven they made a contribution and associated a native identity with it."]
            #[doc = "Data is the relay account,  native account and the total amount of _rewards_ that will be paid"]
            pub struct NativeIdentityAssociated(
                pub [::core::primitive::u8; 32usize],
                pub runtime_types::account::AccountId20,
                pub ::core::primitive::u128,
            );
            impl ::subxt::events::StaticEvent for NativeIdentityAssociated {
                const PALLET: &'static str = "CrowdloanRewards";
                const EVENT: &'static str = "NativeIdentityAssociated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A contributor has claimed some rewards."]
            #[doc = "Data is the account getting paid and the amount of rewards paid."]
            pub struct RewardsPaid(
                pub runtime_types::account::AccountId20,
                pub ::core::primitive::u128,
            );
            impl ::subxt::events::StaticEvent for RewardsPaid {
                const PALLET: &'static str = "CrowdloanRewards";
                const EVENT: &'static str = "RewardsPaid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A contributor has updated the reward address."]
            pub struct RewardAddressUpdated(
                pub runtime_types::account::AccountId20,
                pub runtime_types::account::AccountId20,
            );
            impl ::subxt::events::StaticEvent for RewardAddressUpdated {
                const PALLET: &'static str = "CrowdloanRewards";
                const EVENT: &'static str = "RewardAddressUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "When initializing the reward vec an already initialized account was found"]
            pub struct InitializedAlreadyInitializedAccount(
                pub [::core::primitive::u8; 32usize],
                pub ::core::option::Option<runtime_types::account::AccountId20>,
                pub ::core::primitive::u128,
            );
            impl ::subxt::events::StaticEvent for InitializedAlreadyInitializedAccount {
                const PALLET: &'static str = "CrowdloanRewards";
                const EVENT: &'static str = "InitializedAlreadyInitializedAccount";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "When initializing the reward vec an already initialized account was found"]
            pub struct InitializedAccountWithNotEnoughContribution(
                pub [::core::primitive::u8; 32usize],
                pub ::core::option::Option<runtime_types::account::AccountId20>,
                pub ::core::primitive::u128,
            );
            impl ::subxt::events::StaticEvent for InitializedAccountWithNotEnoughContribution {
                const PALLET: &'static str = "CrowdloanRewards";
                const EVENT: &'static str = "InitializedAccountWithNotEnoughContribution";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn accounts_payable(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_crowdloan_rewards::pallet::RewardInfo,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CrowdloanRewards",
                        "AccountsPayable",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            164u8, 52u8, 234u8, 154u8, 148u8, 179u8, 184u8, 32u8, 129u8, 111u8,
                            14u8, 80u8, 90u8, 71u8, 124u8, 60u8, 156u8, 34u8, 13u8, 156u8, 94u8,
                            8u8, 0u8, 134u8, 221u8, 74u8, 120u8, 42u8, 175u8, 118u8, 185u8, 34u8,
                        ],
                    )
                }
                pub fn accounts_payable_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_crowdloan_rewards::pallet::RewardInfo,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CrowdloanRewards",
                        "AccountsPayable",
                        Vec::new(),
                        [
                            164u8, 52u8, 234u8, 154u8, 148u8, 179u8, 184u8, 32u8, 129u8, 111u8,
                            14u8, 80u8, 90u8, 71u8, 124u8, 60u8, 156u8, 34u8, 13u8, 156u8, 94u8,
                            8u8, 0u8, 134u8, 221u8, 74u8, 120u8, 42u8, 175u8, 118u8, 185u8, 34u8,
                        ],
                    )
                }
                pub fn claimed_relay_chain_ids(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CrowdloanRewards",
                        "ClaimedRelayChainIds",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            1u8, 183u8, 72u8, 20u8, 68u8, 113u8, 167u8, 141u8, 7u8, 83u8, 186u8,
                            58u8, 206u8, 58u8, 183u8, 208u8, 20u8, 136u8, 242u8, 151u8, 230u8,
                            102u8, 211u8, 212u8, 87u8, 21u8, 233u8, 101u8, 212u8, 20u8, 251u8,
                            79u8,
                        ],
                    )
                }
                pub fn claimed_relay_chain_ids_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CrowdloanRewards",
                        "ClaimedRelayChainIds",
                        Vec::new(),
                        [
                            1u8, 183u8, 72u8, 20u8, 68u8, 113u8, 167u8, 141u8, 7u8, 83u8, 186u8,
                            58u8, 206u8, 58u8, 183u8, 208u8, 20u8, 136u8, 242u8, 151u8, 230u8,
                            102u8, 211u8, 212u8, 87u8, 21u8, 233u8, 101u8, 212u8, 20u8, 251u8,
                            79u8,
                        ],
                    )
                }
                pub fn unassociated_contributions(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_crowdloan_rewards::pallet::RewardInfo,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CrowdloanRewards",
                        "UnassociatedContributions",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            227u8, 120u8, 12u8, 235u8, 174u8, 165u8, 168u8, 35u8, 47u8, 6u8, 181u8,
                            219u8, 27u8, 176u8, 139u8, 161u8, 31u8, 246u8, 91u8, 154u8, 44u8,
                            193u8, 221u8, 68u8, 137u8, 209u8, 77u8, 17u8, 108u8, 101u8, 254u8,
                            253u8,
                        ],
                    )
                }
                pub fn unassociated_contributions_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_crowdloan_rewards::pallet::RewardInfo,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CrowdloanRewards",
                        "UnassociatedContributions",
                        Vec::new(),
                        [
                            227u8, 120u8, 12u8, 235u8, 174u8, 165u8, 168u8, 35u8, 47u8, 6u8, 181u8,
                            219u8, 27u8, 176u8, 139u8, 161u8, 31u8, 246u8, 91u8, 154u8, 44u8,
                            193u8, 221u8, 68u8, 137u8, 209u8, 77u8, 17u8, 108u8, 101u8, 254u8,
                            253u8,
                        ],
                    )
                }
                pub fn initialized(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CrowdloanRewards",
                        "Initialized",
                        vec![],
                        [
                            113u8, 248u8, 192u8, 99u8, 251u8, 135u8, 33u8, 245u8, 102u8, 117u8,
                            5u8, 231u8, 111u8, 153u8, 197u8, 250u8, 144u8, 110u8, 49u8, 205u8,
                            112u8, 23u8, 210u8, 167u8, 172u8, 43u8, 65u8, 117u8, 230u8, 153u8,
                            58u8, 138u8,
                        ],
                    )
                }
                #[doc = " Vesting block height at the initialization of the pallet"]
                pub fn init_relay_block(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CrowdloanRewards",
                        "InitRelayBlock",
                        vec![],
                        [
                            226u8, 171u8, 244u8, 197u8, 16u8, 34u8, 2u8, 130u8, 238u8, 184u8, 63u8,
                            18u8, 253u8, 243u8, 235u8, 46u8, 107u8, 44u8, 117u8, 40u8, 173u8,
                            211u8, 57u8, 164u8, 61u8, 240u8, 8u8, 124u8, 101u8, 22u8, 115u8, 255u8,
                        ],
                    )
                }
                #[doc = " Vesting block height at the initialization of the pallet"]
                pub fn end_relay_block(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CrowdloanRewards",
                        "EndRelayBlock",
                        vec![],
                        [
                            28u8, 178u8, 185u8, 92u8, 237u8, 227u8, 43u8, 219u8, 51u8, 225u8, 74u8,
                            190u8, 173u8, 153u8, 252u8, 181u8, 35u8, 37u8, 178u8, 22u8, 253u8,
                            237u8, 32u8, 48u8, 49u8, 95u8, 171u8, 231u8, 223u8, 171u8, 166u8,
                            143u8,
                        ],
                    )
                }
                #[doc = " Total initialized amount so far. We store this to make pallet funds == contributors reward"]
                #[doc = " check easier and more efficient"]
                pub fn initialized_reward_amount(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CrowdloanRewards",
                        "InitializedRewardAmount",
                        vec![],
                        [
                            150u8, 191u8, 127u8, 237u8, 115u8, 153u8, 75u8, 105u8, 150u8, 225u8,
                            91u8, 24u8, 119u8, 207u8, 132u8, 93u8, 241u8, 62u8, 106u8, 84u8, 253u8,
                            91u8, 50u8, 188u8, 178u8, 72u8, 23u8, 199u8, 156u8, 165u8, 255u8, 77u8,
                        ],
                    )
                }
                #[doc = " Total number of contributors to aid hinting benchmarking"]
                pub fn total_contributors(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CrowdloanRewards",
                        "TotalContributors",
                        vec![],
                        [
                            182u8, 128u8, 61u8, 169u8, 43u8, 194u8, 117u8, 112u8, 214u8, 202u8,
                            73u8, 1u8, 2u8, 194u8, 212u8, 5u8, 70u8, 45u8, 50u8, 62u8, 97u8, 205u8,
                            199u8, 200u8, 103u8, 181u8, 205u8, 6u8, 217u8, 109u8, 47u8, 227u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Percentage to be payed at initialization"]
                pub fn initialization_payment(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Perbill>
                {
                    ::subxt::constants::Address::new_static(
                        "CrowdloanRewards",
                        "InitializationPayment",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                pub fn max_init_contributors(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "CrowdloanRewards",
                        "MaxInitContributors",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " A fraction representing the percentage of proofs"]
                #[doc = " that need to be presented to change a reward address through the relay keys"]
                pub fn reward_address_relay_vote_threshold(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Perbill>
                {
                    ::subxt::constants::Address::new_static(
                        "CrowdloanRewards",
                        "RewardAddressRelayVoteThreshold",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " Network Identifier to be appended into the signatures for reward address change/association"]
                #[doc = " Prevents replay attacks from one network to the other"]
                pub fn signature_network_identifier(
                    &self,
                ) -> ::subxt::constants::Address<::std::vec::Vec<::core::primitive::u8>>
                {
                    ::subxt::constants::Address::new_static(
                        "CrowdloanRewards",
                        "SignatureNetworkIdentifier",
                        [
                            64u8, 190u8, 244u8, 122u8, 87u8, 182u8, 217u8, 16u8, 55u8, 223u8,
                            128u8, 6u8, 112u8, 30u8, 236u8, 222u8, 153u8, 53u8, 247u8, 102u8,
                            196u8, 31u8, 6u8, 186u8, 251u8, 209u8, 114u8, 125u8, 213u8, 222u8,
                            240u8, 8u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod author_mapping {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "An error that can occur while executing the mapping pallet's logic."]
        pub type Error = runtime_types::pallet_author_mapping::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_author_mapping::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddAssociation {
                    pub nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                }
                impl ::subxt::blocks::StaticExtrinsic for AddAssociation {
                    const PALLET: &'static str = "AuthorMapping";
                    const CALL: &'static str = "add_association";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateAssociation {
                    pub old_nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                    pub new_nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateAssociation {
                    const PALLET: &'static str = "AuthorMapping";
                    const CALL: &'static str = "update_association";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearAssociation {
                    pub nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClearAssociation {
                    const PALLET: &'static str = "AuthorMapping";
                    const CALL: &'static str = "clear_association";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveKeys;
                impl ::subxt::blocks::StaticExtrinsic for RemoveKeys {
                    const PALLET: &'static str = "AuthorMapping";
                    const CALL: &'static str = "remove_keys";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetKeys {
                    pub keys: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetKeys {
                    const PALLET: &'static str = "AuthorMapping";
                    const CALL: &'static str = "set_keys";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Register your NimbusId onchain so blocks you author are associated with your account."]
                #[doc = ""]
                #[doc = "Users who have been (or will soon be) elected active collators in staking,"]
                #[doc = "should submit this extrinsic to have their blocks accepted and earn rewards."]
                pub fn add_association(
                    &self,
                    nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                ) -> ::subxt::tx::Payload<types::AddAssociation> {
                    ::subxt::tx::Payload::new_static(
                        "AuthorMapping",
                        "add_association",
                        types::AddAssociation { nimbus_id },
                        [
                            68u8, 48u8, 103u8, 144u8, 96u8, 136u8, 17u8, 56u8, 144u8, 107u8, 48u8,
                            203u8, 90u8, 169u8, 116u8, 98u8, 255u8, 38u8, 122u8, 108u8, 164u8,
                            66u8, 232u8, 44u8, 253u8, 41u8, 99u8, 236u8, 157u8, 94u8, 63u8, 85u8,
                        ],
                    )
                }
                #[doc = "Change your Mapping."]
                #[doc = ""]
                #[doc = "This is useful for normal key rotation or for when switching from one physical collator"]
                #[doc = "machine to another. No new security deposit is required."]
                #[doc = "This sets keys to new_nimbus_id.into() by default."]
                pub fn update_association(
                    &self,
                    old_nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                    new_nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                ) -> ::subxt::tx::Payload<types::UpdateAssociation> {
                    ::subxt::tx::Payload::new_static(
                        "AuthorMapping",
                        "update_association",
                        types::UpdateAssociation {
                            old_nimbus_id,
                            new_nimbus_id,
                        },
                        [
                            196u8, 16u8, 101u8, 36u8, 151u8, 82u8, 60u8, 136u8, 81u8, 147u8, 86u8,
                            204u8, 39u8, 142u8, 30u8, 172u8, 198u8, 244u8, 27u8, 38u8, 199u8,
                            113u8, 139u8, 188u8, 187u8, 12u8, 48u8, 149u8, 141u8, 230u8, 188u8,
                            34u8,
                        ],
                    )
                }
                #[doc = "Clear your Mapping."]
                #[doc = ""]
                #[doc = "This is useful when you are no longer an author and would like to re-claim your security"]
                #[doc = "deposit."]
                pub fn clear_association(
                    &self,
                    nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                ) -> ::subxt::tx::Payload<types::ClearAssociation> {
                    ::subxt::tx::Payload::new_static(
                        "AuthorMapping",
                        "clear_association",
                        types::ClearAssociation { nimbus_id },
                        [
                            227u8, 192u8, 98u8, 217u8, 157u8, 40u8, 45u8, 2u8, 3u8, 54u8, 149u8,
                            116u8, 67u8, 101u8, 162u8, 23u8, 144u8, 127u8, 116u8, 253u8, 14u8,
                            180u8, 165u8, 202u8, 222u8, 9u8, 68u8, 131u8, 11u8, 41u8, 148u8, 225u8,
                        ],
                    )
                }
                #[doc = "Remove your Mapping."]
                #[doc = ""]
                #[doc = "This is useful when you are no longer an author and would like to re-claim your security"]
                #[doc = "deposit."]
                pub fn remove_keys(&self) -> ::subxt::tx::Payload<types::RemoveKeys> {
                    ::subxt::tx::Payload::new_static(
                        "AuthorMapping",
                        "remove_keys",
                        types::RemoveKeys {},
                        [
                            112u8, 143u8, 132u8, 39u8, 160u8, 145u8, 245u8, 68u8, 68u8, 52u8, 45u8,
                            78u8, 220u8, 20u8, 149u8, 220u8, 127u8, 67u8, 116u8, 45u8, 21u8, 73u8,
                            160u8, 20u8, 251u8, 221u8, 254u8, 227u8, 169u8, 135u8, 121u8, 252u8,
                        ],
                    )
                }
                #[doc = "Set association and session keys at once."]
                #[doc = ""]
                #[doc = "This is useful for key rotation to update Nimbus and VRF keys in one call."]
                #[doc = "No new security deposit is required. Will replace `update_association` which is kept"]
                #[doc = "now for backwards compatibility reasons."]
                pub fn set_keys(
                    &self,
                    keys: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::SetKeys> {
                    ::subxt::tx::Payload::new_static(
                        "AuthorMapping",
                        "set_keys",
                        types::SetKeys { keys },
                        [
                            70u8, 164u8, 123u8, 94u8, 157u8, 190u8, 178u8, 23u8, 94u8, 252u8,
                            186u8, 66u8, 228u8, 216u8, 170u8, 2u8, 94u8, 21u8, 169u8, 5u8, 62u8,
                            163u8, 218u8, 118u8, 54u8, 106u8, 249u8, 137u8, 23u8, 82u8, 152u8,
                            98u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_author_mapping::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A NimbusId has been registered and mapped to an AccountId."]
            pub struct KeysRegistered {
                pub nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                pub account_id: runtime_types::account::AccountId20,
                pub keys: runtime_types::session_keys_primitives::vrf::vrf_crypto::Public,
            }
            impl ::subxt::events::StaticEvent for KeysRegistered {
                const PALLET: &'static str = "AuthorMapping";
                const EVENT: &'static str = "KeysRegistered";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An NimbusId has been de-registered, and its AccountId mapping removed."]
            pub struct KeysRemoved {
                pub nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                pub account_id: runtime_types::account::AccountId20,
                pub keys: runtime_types::session_keys_primitives::vrf::vrf_crypto::Public,
            }
            impl ::subxt::events::StaticEvent for KeysRemoved {
                const PALLET: &'static str = "AuthorMapping";
                const EVENT: &'static str = "KeysRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An NimbusId has been registered, replacing a previous registration and its mapping."]
            pub struct KeysRotated {
                pub new_nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                pub account_id: runtime_types::account::AccountId20,
                pub new_keys: runtime_types::session_keys_primitives::vrf::vrf_crypto::Public,
            }
            impl ::subxt::events::StaticEvent for KeysRotated {
                const PALLET: &'static str = "AuthorMapping";
                const EVENT: &'static str = "KeysRotated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " We maintain a mapping from the NimbusIds used in the consensus layer"]
                #[doc = " to the AccountIds runtime."]
                pub fn mapping_with_deposit(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::nimbus_primitives::nimbus_crypto::Public,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_author_mapping::pallet::RegistrationInfo,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AuthorMapping",
                        "MappingWithDeposit",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            66u8, 103u8, 252u8, 16u8, 199u8, 180u8, 172u8, 24u8, 172u8, 244u8,
                            112u8, 137u8, 251u8, 132u8, 222u8, 200u8, 252u8, 237u8, 129u8, 166u8,
                            70u8, 17u8, 129u8, 154u8, 88u8, 191u8, 229u8, 19u8, 62u8, 137u8, 106u8,
                            173u8,
                        ],
                    )
                }
                #[doc = " We maintain a mapping from the NimbusIds used in the consensus layer"]
                #[doc = " to the AccountIds runtime."]
                pub fn mapping_with_deposit_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_author_mapping::pallet::RegistrationInfo,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AuthorMapping",
                        "MappingWithDeposit",
                        Vec::new(),
                        [
                            66u8, 103u8, 252u8, 16u8, 199u8, 180u8, 172u8, 24u8, 172u8, 244u8,
                            112u8, 137u8, 251u8, 132u8, 222u8, 200u8, 252u8, 237u8, 129u8, 166u8,
                            70u8, 17u8, 129u8, 154u8, 88u8, 191u8, 229u8, 19u8, 62u8, 137u8, 106u8,
                            173u8,
                        ],
                    )
                }
                #[doc = " We maintain a reverse mapping from AccountIds to NimbusIDS"]
                pub fn nimbus_lookup(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::nimbus_primitives::nimbus_crypto::Public,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AuthorMapping",
                        "NimbusLookup",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            102u8, 166u8, 244u8, 153u8, 185u8, 227u8, 154u8, 4u8, 59u8, 54u8, 67u8,
                            37u8, 94u8, 212u8, 192u8, 127u8, 168u8, 38u8, 157u8, 45u8, 99u8, 110u8,
                            42u8, 6u8, 45u8, 33u8, 245u8, 119u8, 228u8, 115u8, 145u8, 195u8,
                        ],
                    )
                }
                #[doc = " We maintain a reverse mapping from AccountIds to NimbusIDS"]
                pub fn nimbus_lookup_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::nimbus_primitives::nimbus_crypto::Public,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AuthorMapping",
                        "NimbusLookup",
                        Vec::new(),
                        [
                            102u8, 166u8, 244u8, 153u8, 185u8, 227u8, 154u8, 4u8, 59u8, 54u8, 67u8,
                            37u8, 94u8, 212u8, 192u8, 127u8, 168u8, 38u8, 157u8, 45u8, 99u8, 110u8,
                            42u8, 6u8, 45u8, 33u8, 245u8, 119u8, 228u8, 115u8, 145u8, 195u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod proxy {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_proxy::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_proxy::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Proxy {
                    pub real: runtime_types::account::AccountId20,
                    pub force_proxy_type:
                        ::core::option::Option<runtime_types::moonbase_runtime::ProxyType>,
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Proxy {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "proxy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddProxy {
                    pub delegate: runtime_types::account::AccountId20,
                    pub proxy_type: runtime_types::moonbase_runtime::ProxyType,
                    pub delay: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for AddProxy {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "add_proxy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveProxy {
                    pub delegate: runtime_types::account::AccountId20,
                    pub proxy_type: runtime_types::moonbase_runtime::ProxyType,
                    pub delay: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveProxy {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "remove_proxy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveProxies;
                impl ::subxt::blocks::StaticExtrinsic for RemoveProxies {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "remove_proxies";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CreatePure {
                    pub proxy_type: runtime_types::moonbase_runtime::ProxyType,
                    pub delay: ::core::primitive::u32,
                    pub index: ::core::primitive::u16,
                }
                impl ::subxt::blocks::StaticExtrinsic for CreatePure {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "create_pure";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KillPure {
                    pub spawner: runtime_types::account::AccountId20,
                    pub proxy_type: runtime_types::moonbase_runtime::ProxyType,
                    pub index: ::core::primitive::u16,
                    #[codec(compact)]
                    pub height: ::core::primitive::u32,
                    #[codec(compact)]
                    pub ext_index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for KillPure {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "kill_pure";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Announce {
                    pub real: runtime_types::account::AccountId20,
                    pub call_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for Announce {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "announce";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveAnnouncement {
                    pub real: runtime_types::account::AccountId20,
                    pub call_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveAnnouncement {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "remove_announcement";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RejectAnnouncement {
                    pub delegate: runtime_types::account::AccountId20,
                    pub call_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for RejectAnnouncement {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "reject_announcement";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ProxyAnnounced {
                    pub delegate: runtime_types::account::AccountId20,
                    pub real: runtime_types::account::AccountId20,
                    pub force_proxy_type:
                        ::core::option::Option<runtime_types::moonbase_runtime::ProxyType>,
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ProxyAnnounced {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "proxy_announced";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                pub fn proxy(
                    &self,
                    real: runtime_types::account::AccountId20,
                    force_proxy_type: ::core::option::Option<
                        runtime_types::moonbase_runtime::ProxyType,
                    >,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::Proxy> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "proxy",
                        types::Proxy {
                            real,
                            force_proxy_type,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            48u8, 156u8, 176u8, 7u8, 33u8, 222u8, 191u8, 219u8, 248u8, 225u8,
                            181u8, 218u8, 84u8, 113u8, 19u8, 95u8, 101u8, 77u8, 17u8, 97u8, 0u8,
                            134u8, 196u8, 250u8, 201u8, 246u8, 19u8, 225u8, 253u8, 249u8, 237u8,
                            57u8,
                        ],
                    )
                }
                #[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
                #[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                pub fn add_proxy(
                    &self,
                    delegate: runtime_types::account::AccountId20,
                    proxy_type: runtime_types::moonbase_runtime::ProxyType,
                    delay: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::AddProxy> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "add_proxy",
                        types::AddProxy {
                            delegate,
                            proxy_type,
                            delay,
                        },
                        [
                            251u8, 230u8, 231u8, 52u8, 5u8, 115u8, 157u8, 171u8, 133u8, 191u8,
                            86u8, 183u8, 186u8, 81u8, 227u8, 235u8, 176u8, 76u8, 64u8, 98u8, 81u8,
                            88u8, 221u8, 140u8, 149u8, 151u8, 232u8, 143u8, 224u8, 209u8, 175u8,
                            163u8,
                        ],
                    )
                }
                #[doc = "Unregister a proxy account for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
                #[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
                pub fn remove_proxy(
                    &self,
                    delegate: runtime_types::account::AccountId20,
                    proxy_type: runtime_types::moonbase_runtime::ProxyType,
                    delay: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveProxy> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "remove_proxy",
                        types::RemoveProxy {
                            delegate,
                            proxy_type,
                            delay,
                        },
                        [
                            151u8, 136u8, 226u8, 41u8, 218u8, 203u8, 234u8, 235u8, 7u8, 245u8,
                            113u8, 229u8, 10u8, 47u8, 23u8, 87u8, 102u8, 208u8, 98u8, 101u8, 251u8,
                            81u8, 122u8, 221u8, 148u8, 16u8, 137u8, 174u8, 240u8, 122u8, 156u8,
                            129u8,
                        ],
                    )
                }
                #[doc = "Unregister all proxy accounts for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "WARNING: This may be called on accounts created by `pure`, however if done, then"]
                #[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
                pub fn remove_proxies(&self) -> ::subxt::tx::Payload<types::RemoveProxies> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "remove_proxies",
                        types::RemoveProxies {},
                        [
                            1u8, 126u8, 36u8, 227u8, 185u8, 34u8, 218u8, 236u8, 125u8, 231u8, 68u8,
                            185u8, 145u8, 63u8, 250u8, 225u8, 103u8, 3u8, 189u8, 37u8, 172u8,
                            195u8, 197u8, 216u8, 99u8, 210u8, 240u8, 162u8, 158u8, 132u8, 24u8,
                            6u8,
                        ],
                    )
                }
                #[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
                #[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin."]
                #[doc = ""]
                #[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
                #[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
                #[doc = "allow for maximum flexibility."]
                #[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
                #[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
                #[doc = "want to use `0`."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                #[doc = ""]
                #[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
                #[doc = "same sender, with the same parameters."]
                #[doc = ""]
                #[doc = "Fails if there are insufficient funds to pay for deposit."]
                pub fn create_pure(
                    &self,
                    proxy_type: runtime_types::moonbase_runtime::ProxyType,
                    delay: ::core::primitive::u32,
                    index: ::core::primitive::u16,
                ) -> ::subxt::tx::Payload<types::CreatePure> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "create_pure",
                        types::CreatePure {
                            proxy_type,
                            delay,
                            index,
                        },
                        [
                            42u8, 46u8, 51u8, 228u8, 172u8, 23u8, 117u8, 219u8, 214u8, 116u8,
                            218u8, 160u8, 27u8, 144u8, 209u8, 186u8, 192u8, 133u8, 241u8, 98u8,
                            32u8, 41u8, 25u8, 50u8, 232u8, 166u8, 146u8, 5u8, 46u8, 56u8, 122u8,
                            87u8,
                        ],
                    )
                }
                #[doc = "Removes a previously spawned pure proxy."]
                #[doc = ""]
                #[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
                #[doc = "inaccessible."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
                #[doc = "`pure` with corresponding parameters."]
                #[doc = ""]
                #[doc = "- `spawner`: The account that originally called `pure` to create this account."]
                #[doc = "- `index`: The disambiguation index originally passed to `pure`. Probably `0`."]
                #[doc = "- `proxy_type`: The proxy type originally passed to `pure`."]
                #[doc = "- `height`: The height of the chain when the call to `pure` was processed."]
                #[doc = "- `ext_index`: The extrinsic index in which the call to `pure` was processed."]
                #[doc = ""]
                #[doc = "Fails with `NoPermission` in case the caller is not a previously created pure"]
                #[doc = "account whose `pure` call has corresponding parameters."]
                pub fn kill_pure(
                    &self,
                    spawner: runtime_types::account::AccountId20,
                    proxy_type: runtime_types::moonbase_runtime::ProxyType,
                    index: ::core::primitive::u16,
                    height: ::core::primitive::u32,
                    ext_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::KillPure> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "kill_pure",
                        types::KillPure {
                            spawner,
                            proxy_type,
                            index,
                            height,
                            ext_index,
                        },
                        [
                            61u8, 173u8, 105u8, 88u8, 92u8, 121u8, 195u8, 124u8, 30u8, 163u8,
                            233u8, 111u8, 45u8, 172u8, 98u8, 71u8, 235u8, 75u8, 84u8, 23u8, 86u8,
                            165u8, 113u8, 212u8, 79u8, 7u8, 157u8, 136u8, 240u8, 121u8, 96u8,
                            133u8,
                        ],
                    )
                }
                #[doc = "Publish the hash of a proxy-call that will be made in the future."]
                #[doc = ""]
                #[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
                #[doc = "if the delay associated with the proxy relationship is greater than zero."]
                #[doc = ""]
                #[doc = "No more than `MaxPending` announcements may be made at any one time."]
                #[doc = ""]
                #[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
                #[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                pub fn announce(
                    &self,
                    real: runtime_types::account::AccountId20,
                    call_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::Announce> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "announce",
                        types::Announce { real, call_hash },
                        [
                            73u8, 72u8, 93u8, 59u8, 122u8, 139u8, 93u8, 78u8, 107u8, 54u8, 114u8,
                            238u8, 16u8, 191u8, 252u8, 94u8, 29u8, 152u8, 198u8, 129u8, 43u8,
                            221u8, 145u8, 167u8, 203u8, 48u8, 151u8, 249u8, 88u8, 51u8, 40u8, 61u8,
                        ],
                    )
                }
                #[doc = "Remove a given announcement."]
                #[doc = ""]
                #[doc = "May be called by a proxy account to remove a call they previously announced and return"]
                #[doc = "the deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                pub fn remove_announcement(
                    &self,
                    real: runtime_types::account::AccountId20,
                    call_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::RemoveAnnouncement> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "remove_announcement",
                        types::RemoveAnnouncement { real, call_hash },
                        [
                            86u8, 6u8, 95u8, 195u8, 132u8, 136u8, 60u8, 248u8, 18u8, 27u8, 134u8,
                            14u8, 100u8, 143u8, 16u8, 81u8, 143u8, 95u8, 133u8, 84u8, 228u8, 31u8,
                            34u8, 195u8, 54u8, 209u8, 228u8, 120u8, 240u8, 195u8, 113u8, 29u8,
                        ],
                    )
                }
                #[doc = "Remove the given announcement of a delegate."]
                #[doc = ""]
                #[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
                #[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `delegate`: The account that previously announced the call."]
                #[doc = "- `call_hash`: The hash of the call to be made."]
                pub fn reject_announcement(
                    &self,
                    delegate: runtime_types::account::AccountId20,
                    call_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::RejectAnnouncement> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "reject_announcement",
                        types::RejectAnnouncement {
                            delegate,
                            call_hash,
                        },
                        [
                            147u8, 84u8, 126u8, 36u8, 113u8, 100u8, 227u8, 241u8, 2u8, 107u8,
                            197u8, 139u8, 1u8, 132u8, 4u8, 243u8, 180u8, 198u8, 72u8, 112u8, 20u8,
                            175u8, 240u8, 109u8, 186u8, 65u8, 39u8, 91u8, 238u8, 59u8, 199u8,
                            197u8,
                        ],
                    )
                }
                #[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "Removes any corresponding announcement(s)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                pub fn proxy_announced(
                    &self,
                    delegate: runtime_types::account::AccountId20,
                    real: runtime_types::account::AccountId20,
                    force_proxy_type: ::core::option::Option<
                        runtime_types::moonbase_runtime::ProxyType,
                    >,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::ProxyAnnounced> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "proxy_announced",
                        types::ProxyAnnounced {
                            delegate,
                            real,
                            force_proxy_type,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            148u8, 156u8, 4u8, 85u8, 166u8, 188u8, 8u8, 254u8, 199u8, 29u8, 87u8,
                            171u8, 33u8, 128u8, 184u8, 198u8, 92u8, 82u8, 237u8, 52u8, 247u8,
                            138u8, 247u8, 216u8, 10u8, 31u8, 75u8, 77u8, 17u8, 24u8, 254u8, 53u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_proxy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proxy was executed correctly, with the given."]
            pub struct ProxyExecuted {
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for ProxyExecuted {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A pure account has been created by new proxy with given"]
            #[doc = "disambiguation index and proxy type."]
            pub struct PureCreated {
                pub pure: runtime_types::account::AccountId20,
                pub who: runtime_types::account::AccountId20,
                pub proxy_type: runtime_types::moonbase_runtime::ProxyType,
                pub disambiguation_index: ::core::primitive::u16,
            }
            impl ::subxt::events::StaticEvent for PureCreated {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "PureCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An announcement was placed to make a call in the future."]
            pub struct Announced {
                pub real: runtime_types::account::AccountId20,
                pub proxy: runtime_types::account::AccountId20,
                pub call_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Announced {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "Announced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proxy was added."]
            pub struct ProxyAdded {
                pub delegator: runtime_types::account::AccountId20,
                pub delegatee: runtime_types::account::AccountId20,
                pub proxy_type: runtime_types::moonbase_runtime::ProxyType,
                pub delay: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ProxyAdded {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proxy was removed."]
            pub struct ProxyRemoved {
                pub delegator: runtime_types::account::AccountId20,
                pub delegatee: runtime_types::account::AccountId20,
                pub proxy_type: runtime_types::moonbase_runtime::ProxyType,
                pub delay: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ProxyRemoved {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
                #[doc = " which are being delegated to, together with the amount held on deposit."]
                pub fn proxies(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::ProxyDefinition<
                                runtime_types::account::AccountId20,
                                runtime_types::moonbase_runtime::ProxyType,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    ),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Proxy",
                        "Proxies",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            164u8, 45u8, 213u8, 18u8, 166u8, 48u8, 82u8, 92u8, 167u8, 210u8, 120u8,
                            176u8, 124u8, 57u8, 65u8, 150u8, 163u8, 96u8, 219u8, 215u8, 254u8,
                            105u8, 210u8, 140u8, 173u8, 127u8, 102u8, 180u8, 164u8, 162u8, 100u8,
                            152u8,
                        ],
                    )
                }
                #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
                #[doc = " which are being delegated to, together with the amount held on deposit."]
                pub fn proxies_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::ProxyDefinition<
                                runtime_types::account::AccountId20,
                                runtime_types::moonbase_runtime::ProxyType,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    ),
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Proxy",
                        "Proxies",
                        Vec::new(),
                        [
                            164u8, 45u8, 213u8, 18u8, 166u8, 48u8, 82u8, 92u8, 167u8, 210u8, 120u8,
                            176u8, 124u8, 57u8, 65u8, 150u8, 163u8, 96u8, 219u8, 215u8, 254u8,
                            105u8, 210u8, 140u8, 173u8, 127u8, 102u8, 180u8, 164u8, 162u8, 100u8,
                            152u8,
                        ],
                    )
                }
                #[doc = " The announcements made by the proxy (key)."]
                pub fn announcements(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::Announcement<
                                runtime_types::account::AccountId20,
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    ),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Proxy",
                        "Announcements",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            31u8, 69u8, 246u8, 143u8, 186u8, 163u8, 89u8, 134u8, 137u8, 213u8,
                            32u8, 37u8, 226u8, 81u8, 6u8, 69u8, 232u8, 180u8, 2u8, 237u8, 205u8,
                            55u8, 80u8, 248u8, 171u8, 255u8, 66u8, 159u8, 35u8, 231u8, 239u8, 23u8,
                        ],
                    )
                }
                #[doc = " The announcements made by the proxy (key)."]
                pub fn announcements_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::Announcement<
                                runtime_types::account::AccountId20,
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    ),
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Proxy",
                        "Announcements",
                        Vec::new(),
                        [
                            31u8, 69u8, 246u8, 143u8, 186u8, 163u8, 89u8, 134u8, 137u8, 213u8,
                            32u8, 37u8, 226u8, 81u8, 6u8, 69u8, 232u8, 180u8, 2u8, 237u8, 205u8,
                            55u8, 80u8, 248u8, 171u8, 255u8, 66u8, 159u8, 35u8, 231u8, 239u8, 23u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a proxy."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."]
                pub fn proxy_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "ProxyDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per proxy added."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes plus an instance of `ProxyType` more into a"]
                #[doc = " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take"]
                #[doc = " into account `32 + proxy_type.encode().len()` bytes of data."]
                pub fn proxy_deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "ProxyDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of proxies allowed for a single account."]
                pub fn max_proxies(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "MaxProxies",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of time-delayed announcements that are allowed to be pending."]
                pub fn max_pending(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "MaxPending",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The base amount of currency needed to reserve for creating an announcement."]
                #[doc = ""]
                #[doc = " This is held when a new storage item holding a `Balance` is created (typically 16"]
                #[doc = " bytes)."]
                pub fn announcement_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "AnnouncementDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per announcement made."]
                #[doc = ""]
                #[doc = " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)"]
                #[doc = " into a pre-existing storage value."]
                pub fn announcement_deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "AnnouncementDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod maintenance_mode {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "An error that can occur while executing this pallet's extrinsics."]
        pub type Error = runtime_types::pallet_maintenance_mode::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_maintenance_mode::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EnterMaintenanceMode;
                impl ::subxt::blocks::StaticExtrinsic for EnterMaintenanceMode {
                    const PALLET: &'static str = "MaintenanceMode";
                    const CALL: &'static str = "enter_maintenance_mode";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ResumeNormalOperation;
                impl ::subxt::blocks::StaticExtrinsic for ResumeNormalOperation {
                    const PALLET: &'static str = "MaintenanceMode";
                    const CALL: &'static str = "resume_normal_operation";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Place the chain in maintenance mode"]
                #[doc = ""]
                #[doc = "Weight cost is:"]
                #[doc = "* One DB read to ensure we're not already in maintenance mode"]
                #[doc = "* Three DB writes - 1 for the mode, 1 for suspending xcm execution, 1 for the event"]
                pub fn enter_maintenance_mode(
                    &self,
                ) -> ::subxt::tx::Payload<types::EnterMaintenanceMode> {
                    ::subxt::tx::Payload::new_static(
                        "MaintenanceMode",
                        "enter_maintenance_mode",
                        types::EnterMaintenanceMode {},
                        [
                            241u8, 97u8, 185u8, 5u8, 212u8, 50u8, 40u8, 201u8, 106u8, 35u8, 7u8,
                            87u8, 34u8, 170u8, 169u8, 75u8, 239u8, 114u8, 155u8, 216u8, 55u8,
                            153u8, 132u8, 217u8, 98u8, 154u8, 93u8, 158u8, 241u8, 3u8, 32u8, 86u8,
                        ],
                    )
                }
                #[doc = "Return the chain to normal operating mode"]
                #[doc = ""]
                #[doc = "Weight cost is:"]
                #[doc = "* One DB read to ensure we're in maintenance mode"]
                #[doc = "* Three DB writes - 1 for the mode, 1 for resuming xcm execution, 1 for the event"]
                pub fn resume_normal_operation(
                    &self,
                ) -> ::subxt::tx::Payload<types::ResumeNormalOperation> {
                    ::subxt::tx::Payload::new_static(
                        "MaintenanceMode",
                        "resume_normal_operation",
                        types::ResumeNormalOperation {},
                        [
                            230u8, 1u8, 109u8, 136u8, 147u8, 28u8, 25u8, 238u8, 30u8, 50u8, 63u8,
                            55u8, 75u8, 206u8, 0u8, 191u8, 33u8, 146u8, 135u8, 116u8, 162u8, 224u8,
                            131u8, 134u8, 217u8, 43u8, 108u8, 63u8, 164u8, 119u8, 219u8, 87u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_maintenance_mode::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The chain was put into Maintenance Mode"]
            pub struct EnteredMaintenanceMode;
            impl ::subxt::events::StaticEvent for EnteredMaintenanceMode {
                const PALLET: &'static str = "MaintenanceMode";
                const EVENT: &'static str = "EnteredMaintenanceMode";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The chain returned to its normal operating state"]
            pub struct NormalOperationResumed;
            impl ::subxt::events::StaticEvent for NormalOperationResumed {
                const PALLET: &'static str = "MaintenanceMode";
                const EVENT: &'static str = "NormalOperationResumed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The call to suspend on_idle XCM execution failed with inner error"]
            pub struct FailedToSuspendIdleXcmExecution {
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl ::subxt::events::StaticEvent for FailedToSuspendIdleXcmExecution {
                const PALLET: &'static str = "MaintenanceMode";
                const EVENT: &'static str = "FailedToSuspendIdleXcmExecution";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The call to resume on_idle XCM execution failed with inner error"]
            pub struct FailedToResumeIdleXcmExecution {
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl ::subxt::events::StaticEvent for FailedToResumeIdleXcmExecution {
                const PALLET: &'static str = "MaintenanceMode";
                const EVENT: &'static str = "FailedToResumeIdleXcmExecution";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Whether the site is in maintenance mode"]
                pub fn maintenance_mode(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MaintenanceMode",
                        "MaintenanceMode",
                        vec![],
                        [
                            136u8, 172u8, 180u8, 114u8, 210u8, 238u8, 56u8, 231u8, 87u8, 150u8,
                            223u8, 255u8, 104u8, 158u8, 242u8, 135u8, 180u8, 197u8, 167u8, 212u8,
                            200u8, 90u8, 228u8, 66u8, 0u8, 52u8, 20u8, 233u8, 16u8, 142u8, 210u8,
                            165u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod identity {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_identity::pallet::Error;
        #[doc = "Identity pallet declaration."]
        pub type Call = runtime_types::pallet_identity::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddRegistrar {
                    pub account: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for AddRegistrar {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "add_registrar";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetIdentity {
                    pub info:
                        ::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetIdentity {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_identity";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetSubs {
                    pub subs: ::std::vec::Vec<(
                        runtime_types::account::AccountId20,
                        runtime_types::pallet_identity::types::Data,
                    )>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetSubs {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_subs";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearIdentity;
                impl ::subxt::blocks::StaticExtrinsic for ClearIdentity {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "clear_identity";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RequestJudgement {
                    #[codec(compact)]
                    pub reg_index: ::core::primitive::u32,
                    #[codec(compact)]
                    pub max_fee: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for RequestJudgement {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "request_judgement";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelRequest {
                    pub reg_index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelRequest {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "cancel_request";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetFee {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    #[codec(compact)]
                    pub fee: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetFee {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_fee";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetAccountId {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub new: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetAccountId {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_account_id";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetFields {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub fields: runtime_types::pallet_identity::types::BitFlags<
                        runtime_types::pallet_identity::types::IdentityField,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetFields {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_fields";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ProvideJudgement {
                    #[codec(compact)]
                    pub reg_index: ::core::primitive::u32,
                    pub target: runtime_types::account::AccountId20,
                    pub judgement:
                        runtime_types::pallet_identity::types::Judgement<::core::primitive::u128>,
                    pub identity: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for ProvideJudgement {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "provide_judgement";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KillIdentity {
                    pub target: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for KillIdentity {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "kill_identity";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddSub {
                    pub sub: runtime_types::account::AccountId20,
                    pub data: runtime_types::pallet_identity::types::Data,
                }
                impl ::subxt::blocks::StaticExtrinsic for AddSub {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "add_sub";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RenameSub {
                    pub sub: runtime_types::account::AccountId20,
                    pub data: runtime_types::pallet_identity::types::Data,
                }
                impl ::subxt::blocks::StaticExtrinsic for RenameSub {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "rename_sub";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveSub {
                    pub sub: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveSub {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "remove_sub";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QuitSub;
                impl ::subxt::blocks::StaticExtrinsic for QuitSub {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "quit_sub";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Add a registrar to the system."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `T::RegistrarOrigin`."]
                #[doc = ""]
                #[doc = "- `account`: the account of the registrar."]
                #[doc = ""]
                #[doc = "Emits `RegistrarAdded` if successful."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."]
                pub fn add_registrar(
                    &self,
                    account: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::AddRegistrar> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "add_registrar",
                        types::AddRegistrar { account },
                        [
                            23u8, 128u8, 32u8, 51u8, 248u8, 65u8, 18u8, 119u8, 74u8, 81u8, 63u8,
                            64u8, 185u8, 110u8, 135u8, 70u8, 21u8, 172u8, 52u8, 63u8, 58u8, 157u8,
                            152u8, 77u8, 151u8, 64u8, 69u8, 144u8, 150u8, 122u8, 159u8, 111u8,
                        ],
                    )
                }
                #[doc = "Set an account's identity information and reserve the appropriate deposit."]
                #[doc = ""]
                #[doc = "If the account already has identity information, the deposit is taken as part payment"]
                #[doc = "for the new deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `info`: The identity information."]
                #[doc = ""]
                #[doc = "Emits `IdentitySet` if successful."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(X + X' + R)`"]
                #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)"]
                #[doc = "  - where `R` judgements-count (registrar-count-bounded)"]
                pub fn set_identity(
                    &self,
                    info: runtime_types::pallet_identity::types::IdentityInfo,
                ) -> ::subxt::tx::Payload<types::SetIdentity> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_identity",
                        types::SetIdentity {
                            info: ::std::boxed::Box::new(info),
                        },
                        [
                            18u8, 86u8, 67u8, 10u8, 116u8, 254u8, 94u8, 95u8, 166u8, 30u8, 204u8,
                            189u8, 174u8, 70u8, 191u8, 255u8, 149u8, 93u8, 156u8, 120u8, 105u8,
                            138u8, 199u8, 181u8, 43u8, 150u8, 143u8, 254u8, 182u8, 81u8, 86u8,
                            45u8,
                        ],
                    )
                }
                #[doc = "Set the sub-accounts of the sender."]
                #[doc = ""]
                #[doc = "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned"]
                #[doc = "and an amount `SubAccountDeposit` will be reserved for each item in `subs`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "identity."]
                #[doc = ""]
                #[doc = "- `subs`: The identity's (new) sub-accounts."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(P + S)`"]
                #[doc = "  - where `P` old-subs-count (hard- and deposit-bounded)."]
                #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
                pub fn set_subs(
                    &self,
                    subs: ::std::vec::Vec<(
                        runtime_types::account::AccountId20,
                        runtime_types::pallet_identity::types::Data,
                    )>,
                ) -> ::subxt::tx::Payload<types::SetSubs> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_subs",
                        types::SetSubs { subs },
                        [
                            254u8, 153u8, 39u8, 14u8, 151u8, 240u8, 157u8, 125u8, 118u8, 3u8,
                            127u8, 218u8, 139u8, 27u8, 20u8, 250u8, 66u8, 76u8, 89u8, 85u8, 170u8,
                            222u8, 129u8, 180u8, 178u8, 201u8, 186u8, 227u8, 70u8, 193u8, 213u8,
                            120u8,
                        ],
                    )
                }
                #[doc = "Clear an account's identity info and all sub-accounts and return all deposits."]
                #[doc = ""]
                #[doc = "Payment: All reserved balances on the account are returned."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "identity."]
                #[doc = ""]
                #[doc = "Emits `IdentityCleared` if successful."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(R + S + X)`"]
                #[doc = "  - where `R` registrar-count (governance-bounded)."]
                #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
                #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
                pub fn clear_identity(&self) -> ::subxt::tx::Payload<types::ClearIdentity> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "clear_identity",
                        types::ClearIdentity {},
                        [
                            43u8, 115u8, 205u8, 44u8, 24u8, 130u8, 220u8, 69u8, 247u8, 176u8,
                            200u8, 175u8, 67u8, 183u8, 36u8, 200u8, 162u8, 132u8, 242u8, 25u8,
                            21u8, 106u8, 197u8, 219u8, 141u8, 51u8, 204u8, 13u8, 191u8, 201u8,
                            31u8, 31u8,
                        ],
                    )
                }
                #[doc = "Request a judgement from a registrar."]
                #[doc = ""]
                #[doc = "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement"]
                #[doc = "given."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                #[doc = "registered identity."]
                #[doc = ""]
                #[doc = "- `reg_index`: The index of the registrar whose judgement is requested."]
                #[doc = "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:"]
                #[doc = ""]
                #[doc = "```nocompile"]
                #[doc = "Self::registrars().get(reg_index).unwrap().fee"]
                #[doc = "```"]
                #[doc = ""]
                #[doc = "Emits `JudgementRequested` if successful."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(R + X)`."]
                #[doc = "  - where `R` registrar-count (governance-bounded)."]
                #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
                pub fn request_judgement(
                    &self,
                    reg_index: ::core::primitive::u32,
                    max_fee: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::RequestJudgement> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "request_judgement",
                        types::RequestJudgement { reg_index, max_fee },
                        [
                            83u8, 85u8, 55u8, 184u8, 14u8, 54u8, 49u8, 212u8, 26u8, 148u8, 33u8,
                            147u8, 182u8, 54u8, 180u8, 12u8, 61u8, 179u8, 216u8, 157u8, 103u8,
                            52u8, 120u8, 252u8, 83u8, 203u8, 144u8, 65u8, 15u8, 3u8, 21u8, 33u8,
                        ],
                    )
                }
                #[doc = "Cancel a previous request."]
                #[doc = ""]
                #[doc = "Payment: A previously reserved deposit is returned on success."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                #[doc = "registered identity."]
                #[doc = ""]
                #[doc = "- `reg_index`: The index of the registrar whose judgement is no longer requested."]
                #[doc = ""]
                #[doc = "Emits `JudgementUnrequested` if successful."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(R + X)`."]
                #[doc = "  - where `R` registrar-count (governance-bounded)."]
                #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
                pub fn cancel_request(
                    &self,
                    reg_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CancelRequest> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "cancel_request",
                        types::CancelRequest { reg_index },
                        [
                            81u8, 14u8, 133u8, 219u8, 43u8, 84u8, 163u8, 208u8, 21u8, 185u8, 75u8,
                            117u8, 126u8, 33u8, 210u8, 106u8, 122u8, 210u8, 35u8, 207u8, 104u8,
                            206u8, 41u8, 117u8, 247u8, 108u8, 56u8, 23u8, 123u8, 169u8, 169u8,
                            61u8,
                        ],
                    )
                }
                #[doc = "Set the fee required for a judgement to be requested from a registrar."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                #[doc = "- `fee`: the new fee."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(R)`."]
                #[doc = "  - where `R` registrar-count (governance-bounded)."]
                pub fn set_fee(
                    &self,
                    index: ::core::primitive::u32,
                    fee: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::SetFee> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_fee",
                        types::SetFee { index, fee },
                        [
                            131u8, 20u8, 17u8, 127u8, 180u8, 65u8, 225u8, 144u8, 193u8, 60u8,
                            131u8, 241u8, 30u8, 149u8, 8u8, 76u8, 29u8, 52u8, 102u8, 108u8, 127u8,
                            130u8, 70u8, 18u8, 94u8, 145u8, 179u8, 109u8, 252u8, 219u8, 58u8,
                            163u8,
                        ],
                    )
                }
                #[doc = "Change the account associated with a registrar."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                #[doc = "- `new`: the new account ID."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(R)`."]
                #[doc = "  - where `R` registrar-count (governance-bounded)."]
                pub fn set_account_id(
                    &self,
                    index: ::core::primitive::u32,
                    new: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::SetAccountId> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_account_id",
                        types::SetAccountId { index, new },
                        [
                            204u8, 93u8, 150u8, 67u8, 223u8, 190u8, 154u8, 5u8, 142u8, 233u8,
                            195u8, 248u8, 217u8, 225u8, 153u8, 174u8, 135u8, 51u8, 166u8, 147u8,
                            91u8, 201u8, 89u8, 181u8, 147u8, 58u8, 222u8, 63u8, 57u8, 208u8, 184u8,
                            138u8,
                        ],
                    )
                }
                #[doc = "Set the field information for a registrar."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                #[doc = "- `fields`: the fields that the registrar concerns themselves with."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(R)`."]
                #[doc = "  - where `R` registrar-count (governance-bounded)."]
                pub fn set_fields(
                    &self,
                    index: ::core::primitive::u32,
                    fields: runtime_types::pallet_identity::types::BitFlags<
                        runtime_types::pallet_identity::types::IdentityField,
                    >,
                ) -> ::subxt::tx::Payload<types::SetFields> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_fields",
                        types::SetFields { index, fields },
                        [
                            25u8, 129u8, 119u8, 232u8, 18u8, 32u8, 77u8, 23u8, 185u8, 56u8, 32u8,
                            199u8, 74u8, 174u8, 104u8, 203u8, 171u8, 253u8, 19u8, 225u8, 101u8,
                            239u8, 14u8, 242u8, 157u8, 51u8, 203u8, 74u8, 1u8, 65u8, 165u8, 205u8,
                        ],
                    )
                }
                #[doc = "Provide a judgement for an account's identity."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `reg_index`."]
                #[doc = ""]
                #[doc = "- `reg_index`: the index of the registrar whose judgement is being made."]
                #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                #[doc = "  with a registered identity."]
                #[doc = "- `judgement`: the judgement of the registrar of index `reg_index` about `target`."]
                #[doc = "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided."]
                #[doc = ""]
                #[doc = "Emits `JudgementGiven` if successful."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(R + X)`."]
                #[doc = "  - where `R` registrar-count (governance-bounded)."]
                #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
                pub fn provide_judgement(
                    &self,
                    reg_index: ::core::primitive::u32,
                    target: runtime_types::account::AccountId20,
                    judgement: runtime_types::pallet_identity::types::Judgement<
                        ::core::primitive::u128,
                    >,
                    identity: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::ProvideJudgement> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "provide_judgement",
                        types::ProvideJudgement {
                            reg_index,
                            target,
                            judgement,
                            identity,
                        },
                        [
                            56u8, 101u8, 116u8, 218u8, 163u8, 199u8, 44u8, 22u8, 143u8, 51u8,
                            120u8, 142u8, 207u8, 91u8, 73u8, 124u8, 171u8, 187u8, 110u8, 236u8,
                            23u8, 41u8, 189u8, 12u8, 11u8, 212u8, 193u8, 116u8, 85u8, 3u8, 199u8,
                            136u8,
                        ],
                    )
                }
                #[doc = "Remove an account's identity and sub-account information and slash the deposits."]
                #[doc = ""]
                #[doc = "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by"]
                #[doc = "`Slash`. Verification request deposits are not returned; they should be cancelled"]
                #[doc = "manually using `cancel_request`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
                #[doc = ""]
                #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                #[doc = "  with a registered identity."]
                #[doc = ""]
                #[doc = "Emits `IdentityKilled` if successful."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(R + S + X)`"]
                #[doc = "  - where `R` registrar-count (governance-bounded)."]
                #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
                #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
                pub fn kill_identity(
                    &self,
                    target: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::KillIdentity> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "kill_identity",
                        types::KillIdentity { target },
                        [
                            147u8, 88u8, 54u8, 4u8, 233u8, 165u8, 85u8, 199u8, 158u8, 144u8, 137u8,
                            33u8, 248u8, 44u8, 64u8, 116u8, 13u8, 178u8, 116u8, 48u8, 245u8, 5u8,
                            97u8, 153u8, 10u8, 162u8, 155u8, 231u8, 131u8, 239u8, 54u8, 25u8,
                        ],
                    )
                }
                #[doc = "Add the given account to the sender's subs."]
                #[doc = ""]
                #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                #[doc = "to the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "sub identity of `sub`."]
                pub fn add_sub(
                    &self,
                    sub: runtime_types::account::AccountId20,
                    data: runtime_types::pallet_identity::types::Data,
                ) -> ::subxt::tx::Payload<types::AddSub> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "add_sub",
                        types::AddSub { sub, data },
                        [
                            20u8, 50u8, 158u8, 18u8, 17u8, 76u8, 178u8, 254u8, 41u8, 84u8, 61u8,
                            115u8, 76u8, 251u8, 234u8, 1u8, 51u8, 49u8, 42u8, 176u8, 16u8, 232u8,
                            130u8, 145u8, 152u8, 215u8, 131u8, 87u8, 0u8, 31u8, 45u8, 188u8,
                        ],
                    )
                }
                #[doc = "Alter the associated name of the given sub-account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "sub identity of `sub`."]
                pub fn rename_sub(
                    &self,
                    sub: runtime_types::account::AccountId20,
                    data: runtime_types::pallet_identity::types::Data,
                ) -> ::subxt::tx::Payload<types::RenameSub> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "rename_sub",
                        types::RenameSub { sub, data },
                        [
                            4u8, 124u8, 66u8, 167u8, 227u8, 54u8, 172u8, 93u8, 203u8, 80u8, 76u8,
                            84u8, 0u8, 70u8, 86u8, 147u8, 225u8, 116u8, 121u8, 126u8, 31u8, 198u8,
                            115u8, 1u8, 27u8, 43u8, 111u8, 201u8, 188u8, 110u8, 91u8, 190u8,
                        ],
                    )
                }
                #[doc = "Remove the given account from the sender's subs."]
                #[doc = ""]
                #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                #[doc = "to the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "sub identity of `sub`."]
                pub fn remove_sub(
                    &self,
                    sub: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::RemoveSub> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "remove_sub",
                        types::RemoveSub { sub },
                        [
                            223u8, 209u8, 112u8, 231u8, 141u8, 112u8, 192u8, 177u8, 32u8, 65u8,
                            8u8, 101u8, 45u8, 249u8, 91u8, 176u8, 218u8, 164u8, 184u8, 12u8, 213u8,
                            195u8, 29u8, 235u8, 40u8, 90u8, 81u8, 104u8, 228u8, 253u8, 58u8, 55u8,
                        ],
                    )
                }
                #[doc = "Remove the sender as a sub-account."]
                #[doc = ""]
                #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                #[doc = "to the sender (*not* the original depositor)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "super-identity."]
                #[doc = ""]
                #[doc = "NOTE: This should not normally be used, but is provided in the case that the non-"]
                #[doc = "controller of an account is maliciously registered as a sub-account."]
                pub fn quit_sub(&self) -> ::subxt::tx::Payload<types::QuitSub> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "quit_sub",
                        types::QuitSub {},
                        [
                            147u8, 131u8, 175u8, 171u8, 187u8, 201u8, 240u8, 26u8, 146u8, 224u8,
                            74u8, 166u8, 242u8, 193u8, 204u8, 247u8, 168u8, 93u8, 18u8, 32u8, 27u8,
                            208u8, 149u8, 146u8, 179u8, 172u8, 75u8, 112u8, 84u8, 141u8, 233u8,
                            223u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_identity::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A name was set or reset (which will remove all judgements)."]
            pub struct IdentitySet {
                pub who: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for IdentitySet {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentitySet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A name was cleared, and the given balance returned."]
            pub struct IdentityCleared {
                pub who: runtime_types::account::AccountId20,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for IdentityCleared {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentityCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A name was removed and the given balance slashed."]
            pub struct IdentityKilled {
                pub who: runtime_types::account::AccountId20,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for IdentityKilled {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentityKilled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A judgement was asked from a registrar."]
            pub struct JudgementRequested {
                pub who: runtime_types::account::AccountId20,
                pub registrar_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for JudgementRequested {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementRequested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A judgement request was retracted."]
            pub struct JudgementUnrequested {
                pub who: runtime_types::account::AccountId20,
                pub registrar_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for JudgementUnrequested {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementUnrequested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A judgement was given by a registrar."]
            pub struct JudgementGiven {
                pub target: runtime_types::account::AccountId20,
                pub registrar_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for JudgementGiven {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementGiven";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A registrar was added."]
            pub struct RegistrarAdded {
                pub registrar_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for RegistrarAdded {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "RegistrarAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A sub-identity was added to an identity and the deposit paid."]
            pub struct SubIdentityAdded {
                pub sub: runtime_types::account::AccountId20,
                pub main: runtime_types::account::AccountId20,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SubIdentityAdded {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A sub-identity was removed from an identity and the deposit freed."]
            pub struct SubIdentityRemoved {
                pub sub: runtime_types::account::AccountId20,
                pub main: runtime_types::account::AccountId20,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SubIdentityRemoved {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
            #[doc = "main identity account to the sub-identity account."]
            pub struct SubIdentityRevoked {
                pub sub: runtime_types::account::AccountId20,
                pub main: runtime_types::account::AccountId20,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SubIdentityRevoked {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityRevoked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Information that is pertinent to identify the entity behind an account."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn identity_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_identity::types::Registration<::core::primitive::u128>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "IdentityOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            245u8, 46u8, 214u8, 222u8, 191u8, 79u8, 212u8, 196u8, 200u8, 249u8,
                            139u8, 92u8, 226u8, 127u8, 158u8, 193u8, 129u8, 141u8, 95u8, 5u8,
                            190u8, 158u8, 46u8, 205u8, 93u8, 146u8, 171u8, 52u8, 63u8, 237u8,
                            254u8, 15u8,
                        ],
                    )
                }
                #[doc = " Information that is pertinent to identify the entity behind an account."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn identity_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_identity::types::Registration<::core::primitive::u128>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "IdentityOf",
                        Vec::new(),
                        [
                            245u8, 46u8, 214u8, 222u8, 191u8, 79u8, 212u8, 196u8, 200u8, 249u8,
                            139u8, 92u8, 226u8, 127u8, 158u8, 193u8, 129u8, 141u8, 95u8, 5u8,
                            190u8, 158u8, 46u8, 205u8, 93u8, 146u8, 171u8, 52u8, 63u8, 237u8,
                            254u8, 15u8,
                        ],
                    )
                }
                #[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
                #[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
                pub fn super_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::account::AccountId20,
                        runtime_types::pallet_identity::types::Data,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "SuperOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            169u8, 196u8, 47u8, 208u8, 82u8, 165u8, 75u8, 184u8, 178u8, 255u8,
                            65u8, 75u8, 221u8, 63u8, 203u8, 243u8, 176u8, 118u8, 69u8, 162u8, 57u8,
                            225u8, 241u8, 53u8, 133u8, 125u8, 201u8, 255u8, 63u8, 164u8, 0u8,
                            216u8,
                        ],
                    )
                }
                #[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
                #[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
                pub fn super_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::account::AccountId20,
                        runtime_types::pallet_identity::types::Data,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "SuperOf",
                        Vec::new(),
                        [
                            169u8, 196u8, 47u8, 208u8, 82u8, 165u8, 75u8, 184u8, 178u8, 255u8,
                            65u8, 75u8, 221u8, 63u8, 203u8, 243u8, 176u8, 118u8, 69u8, 162u8, 57u8,
                            225u8, 241u8, 53u8, 133u8, 125u8, 201u8, 255u8, 63u8, 164u8, 0u8,
                            216u8,
                        ],
                    )
                }
                #[doc = " Alternative \"sub\" identities of this account."]
                #[doc = ""]
                #[doc = " The first item is the deposit, the second is a vector of the accounts."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn subs_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::account::AccountId20,
                        >,
                    ),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "SubsOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            216u8, 23u8, 82u8, 40u8, 9u8, 59u8, 57u8, 145u8, 190u8, 247u8, 73u8,
                            220u8, 112u8, 203u8, 36u8, 85u8, 239u8, 190u8, 11u8, 207u8, 73u8,
                            198u8, 76u8, 89u8, 78u8, 221u8, 97u8, 71u8, 179u8, 176u8, 170u8, 170u8,
                        ],
                    )
                }
                #[doc = " Alternative \"sub\" identities of this account."]
                #[doc = ""]
                #[doc = " The first item is the deposit, the second is a vector of the accounts."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn subs_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::account::AccountId20,
                        >,
                    ),
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "SubsOf",
                        Vec::new(),
                        [
                            216u8, 23u8, 82u8, 40u8, 9u8, 59u8, 57u8, 145u8, 190u8, 247u8, 73u8,
                            220u8, 112u8, 203u8, 36u8, 85u8, 239u8, 190u8, 11u8, 207u8, 73u8,
                            198u8, 76u8, 89u8, 78u8, 221u8, 97u8, 71u8, 179u8, 176u8, 170u8, 170u8,
                        ],
                    )
                }
                #[doc = " The set of registrars. Not expected to get very big as can only be added through a"]
                #[doc = " special origin (likely a council motion)."]
                #[doc = ""]
                #[doc = " The index into this can be cast to `RegistrarIndex` to get a valid value."]
                pub fn registrars(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::option::Option<
                            runtime_types::pallet_identity::types::RegistrarInfo<
                                ::core::primitive::u128,
                                runtime_types::account::AccountId20,
                            >,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "Registrars",
                        vec![],
                        [
                            133u8, 216u8, 32u8, 197u8, 235u8, 120u8, 36u8, 160u8, 106u8, 95u8,
                            219u8, 61u8, 74u8, 219u8, 237u8, 203u8, 182u8, 130u8, 172u8, 5u8,
                            253u8, 81u8, 10u8, 179u8, 114u8, 50u8, 247u8, 170u8, 188u8, 89u8,
                            135u8, 122u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The amount held on deposit for a registered identity"]
                pub fn basic_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "BasicDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit per additional field for a registered identity."]
                pub fn field_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "FieldDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit for a registered subaccount. This should account for the fact"]
                #[doc = " that one storage item's value will increase by the size of an account ID, and there will"]
                #[doc = " be another trie item whose value is the size of an account ID plus 32 bytes."]
                pub fn sub_account_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "SubAccountDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of sub-accounts allowed per identified account."]
                pub fn max_sub_accounts(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "MaxSubAccounts",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O"]
                #[doc = " required to access an identity, but can be pretty high."]
                pub fn max_additional_fields(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "MaxAdditionalFields",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maxmimum number of registrars allowed in the system. Needed to bound the complexity"]
                #[doc = " of, e.g., updating judgements."]
                pub fn max_registrars(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "MaxRegistrars",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod xcmp_queue {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::cumulus_pallet_xcmp_queue::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::cumulus_pallet_xcmp_queue::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ServiceOverweight {
                    pub index: ::core::primitive::u64,
                    pub weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for ServiceOverweight {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "service_overweight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SuspendXcmExecution;
                impl ::subxt::blocks::StaticExtrinsic for SuspendXcmExecution {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "suspend_xcm_execution";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ResumeXcmExecution;
                impl ::subxt::blocks::StaticExtrinsic for ResumeXcmExecution {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "resume_xcm_execution";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateSuspendThreshold {
                    pub new: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateSuspendThreshold {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_suspend_threshold";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateDropThreshold {
                    pub new: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateDropThreshold {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_drop_threshold";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateResumeThreshold {
                    pub new: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateResumeThreshold {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_resume_threshold";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateThresholdWeight {
                    pub new: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateThresholdWeight {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_threshold_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateWeightRestrictDecay {
                    pub new: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateWeightRestrictDecay {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_weight_restrict_decay";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateXcmpMaxIndividualWeight {
                    pub new: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateXcmpMaxIndividualWeight {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_xcmp_max_individual_weight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Services a single overweight XCM."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
                #[doc = "- `index`: The index of the overweight XCM to service"]
                #[doc = "- `weight_limit`: The amount of weight that XCM execution may take."]
                #[doc = ""]
                #[doc = "Errors:"]
                #[doc = "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map."]
                #[doc = "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format."]
                #[doc = "- `WeightOverLimit`: XCM execution may use greater `weight_limit`."]
                #[doc = ""]
                #[doc = "Events:"]
                #[doc = "- `OverweightServiced`: On success."]
                pub fn service_overweight(
                    &self,
                    index: ::core::primitive::u64,
                    weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::ServiceOverweight> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "service_overweight",
                        types::ServiceOverweight {
                            index,
                            weight_limit,
                        },
                        [
                            235u8, 203u8, 220u8, 162u8, 173u8, 117u8, 224u8, 194u8, 176u8, 125u8,
                            50u8, 74u8, 180u8, 37u8, 126u8, 227u8, 138u8, 213u8, 227u8, 35u8,
                            247u8, 18u8, 160u8, 231u8, 97u8, 149u8, 144u8, 49u8, 34u8, 146u8, 32u8,
                            7u8,
                        ],
                    )
                }
                #[doc = "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                pub fn suspend_xcm_execution(
                    &self,
                ) -> ::subxt::tx::Payload<types::SuspendXcmExecution> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "suspend_xcm_execution",
                        types::SuspendXcmExecution {},
                        [
                            54u8, 120u8, 33u8, 251u8, 74u8, 56u8, 29u8, 76u8, 104u8, 218u8, 115u8,
                            198u8, 148u8, 237u8, 9u8, 191u8, 241u8, 48u8, 33u8, 24u8, 60u8, 144u8,
                            22u8, 78u8, 58u8, 50u8, 26u8, 188u8, 231u8, 42u8, 201u8, 76u8,
                        ],
                    )
                }
                #[doc = "Resumes all XCM executions for the XCMP queue."]
                #[doc = ""]
                #[doc = "Note that this function doesn't change the status of the in/out bound channels."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                pub fn resume_xcm_execution(
                    &self,
                ) -> ::subxt::tx::Payload<types::ResumeXcmExecution> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "resume_xcm_execution",
                        types::ResumeXcmExecution {},
                        [
                            173u8, 231u8, 78u8, 253u8, 108u8, 234u8, 199u8, 124u8, 184u8, 154u8,
                            95u8, 194u8, 13u8, 77u8, 175u8, 7u8, 7u8, 112u8, 161u8, 72u8, 133u8,
                            71u8, 63u8, 218u8, 97u8, 226u8, 133u8, 6u8, 93u8, 177u8, 247u8, 109u8,
                        ],
                    )
                }
                #[doc = "Overwrites the number of pages of messages which must be in the queue for the other side to be told to"]
                #[doc = "suspend their sending."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.suspend_value`"]
                pub fn update_suspend_threshold(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::UpdateSuspendThreshold> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_suspend_threshold",
                        types::UpdateSuspendThreshold { new },
                        [
                            64u8, 91u8, 172u8, 51u8, 220u8, 174u8, 54u8, 47u8, 57u8, 89u8, 75u8,
                            39u8, 126u8, 198u8, 143u8, 35u8, 70u8, 125u8, 167u8, 14u8, 17u8, 18u8,
                            146u8, 222u8, 100u8, 92u8, 81u8, 239u8, 173u8, 43u8, 42u8, 174u8,
                        ],
                    )
                }
                #[doc = "Overwrites the number of pages of messages which must be in the queue after which we drop any further"]
                #[doc = "messages from the channel."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.drop_threshold`"]
                pub fn update_drop_threshold(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::UpdateDropThreshold> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_drop_threshold",
                        types::UpdateDropThreshold { new },
                        [
                            123u8, 54u8, 12u8, 180u8, 165u8, 198u8, 141u8, 200u8, 149u8, 168u8,
                            186u8, 237u8, 162u8, 91u8, 89u8, 242u8, 229u8, 16u8, 32u8, 254u8, 59u8,
                            168u8, 31u8, 134u8, 217u8, 251u8, 0u8, 102u8, 113u8, 194u8, 175u8, 9u8,
                        ],
                    )
                }
                #[doc = "Overwrites the number of pages of messages which the queue must be reduced to before it signals that"]
                #[doc = "message sending may recommence after it has been suspended."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.resume_threshold`"]
                pub fn update_resume_threshold(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::UpdateResumeThreshold> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_resume_threshold",
                        types::UpdateResumeThreshold { new },
                        [
                            172u8, 136u8, 11u8, 106u8, 42u8, 157u8, 167u8, 183u8, 87u8, 62u8,
                            182u8, 17u8, 184u8, 59u8, 215u8, 230u8, 18u8, 243u8, 212u8, 34u8, 54u8,
                            188u8, 95u8, 119u8, 173u8, 20u8, 91u8, 206u8, 212u8, 57u8, 136u8, 77u8,
                        ],
                    )
                }
                #[doc = "Overwrites the amount of remaining weight under which we stop processing messages."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.threshold_weight`"]
                pub fn update_threshold_weight(
                    &self,
                    new: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::UpdateThresholdWeight> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_threshold_weight",
                        types::UpdateThresholdWeight { new },
                        [
                            79u8, 1u8, 102u8, 119u8, 93u8, 104u8, 197u8, 189u8, 248u8, 215u8, 30u8,
                            227u8, 83u8, 26u8, 149u8, 99u8, 174u8, 191u8, 97u8, 82u8, 168u8, 128u8,
                            130u8, 136u8, 185u8, 54u8, 104u8, 186u8, 231u8, 11u8, 66u8, 184u8,
                        ],
                    )
                }
                #[doc = "Overwrites the speed to which the available weight approaches the maximum weight."]
                #[doc = "A lower number results in a faster progression. A value of 1 makes the entire weight available initially."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."]
                pub fn update_weight_restrict_decay(
                    &self,
                    new: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::UpdateWeightRestrictDecay> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_weight_restrict_decay",
                        types::UpdateWeightRestrictDecay { new },
                        [
                            37u8, 210u8, 52u8, 253u8, 67u8, 66u8, 63u8, 238u8, 117u8, 80u8, 77u8,
                            102u8, 166u8, 103u8, 173u8, 135u8, 54u8, 139u8, 100u8, 225u8, 115u8,
                            214u8, 160u8, 228u8, 195u8, 221u8, 160u8, 62u8, 192u8, 105u8, 188u8,
                            139u8,
                        ],
                    )
                }
                #[doc = "Overwrite the maximum amount of weight any individual message may consume."]
                #[doc = "Messages above this weight go into the overweight queue and may only be serviced explicitly."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."]
                pub fn update_xcmp_max_individual_weight(
                    &self,
                    new: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::UpdateXcmpMaxIndividualWeight> {
                    ::subxt::tx::Payload::new_static(
                        "XcmpQueue",
                        "update_xcmp_max_individual_weight",
                        types::UpdateXcmpMaxIndividualWeight { new },
                        [
                            185u8, 199u8, 32u8, 102u8, 179u8, 139u8, 101u8, 14u8, 48u8, 173u8,
                            123u8, 158u8, 161u8, 153u8, 81u8, 109u8, 196u8, 217u8, 235u8, 150u8,
                            176u8, 55u8, 168u8, 31u8, 34u8, 251u8, 128u8, 53u8, 160u8, 220u8,
                            140u8, 174u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::cumulus_pallet_xcmp_queue::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some XCM was executed ok."]
            pub struct Success {
                pub message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                pub weight: runtime_types::sp_weights::weight_v2::Weight,
            }
            impl ::subxt::events::StaticEvent for Success {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "Success";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some XCM failed."]
            pub struct Fail {
                pub message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                pub error: runtime_types::xcm::v3::traits::Error,
                pub weight: runtime_types::sp_weights::weight_v2::Weight,
            }
            impl ::subxt::events::StaticEvent for Fail {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "Fail";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Bad XCM version used."]
            pub struct BadVersion {
                pub message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
            }
            impl ::subxt::events::StaticEvent for BadVersion {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "BadVersion";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Bad XCM format used."]
            pub struct BadFormat {
                pub message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
            }
            impl ::subxt::events::StaticEvent for BadFormat {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "BadFormat";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An HRMP message was sent to a sibling parachain."]
            pub struct XcmpMessageSent {
                pub message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
            }
            impl ::subxt::events::StaticEvent for XcmpMessageSent {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "XcmpMessageSent";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An XCM exceeded the individual message weight budget."]
            pub struct OverweightEnqueued {
                pub sender: runtime_types::polkadot_parachain::primitives::Id,
                pub sent_at: ::core::primitive::u32,
                pub index: ::core::primitive::u64,
                pub required: runtime_types::sp_weights::weight_v2::Weight,
            }
            impl ::subxt::events::StaticEvent for OverweightEnqueued {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "OverweightEnqueued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An XCM from the overweight queue was executed with the given actual weight used."]
            pub struct OverweightServiced {
                pub index: ::core::primitive::u64,
                pub used: runtime_types::sp_weights::weight_v2::Weight,
            }
            impl ::subxt::events::StaticEvent for OverweightServiced {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "OverweightServiced";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Status of the inbound XCMP channels."]
                pub fn inbound_xcmp_status(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::cumulus_pallet_xcmp_queue::InboundChannelDetails,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "InboundXcmpStatus",
                        vec![],
                        [
                            216u8, 138u8, 138u8, 71u8, 210u8, 155u8, 255u8, 91u8, 44u8, 147u8,
                            80u8, 187u8, 203u8, 88u8, 34u8, 54u8, 80u8, 232u8, 249u8, 20u8, 169u8,
                            138u8, 123u8, 139u8, 182u8, 184u8, 0u8, 205u8, 101u8, 9u8, 194u8,
                            122u8,
                        ],
                    )
                }
                #[doc = " Inbound aggregate XCMP messages. It can only be one per ParaId/block."]
                pub fn inbound_xcmp_messages(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "InboundXcmpMessages",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            60u8, 227u8, 118u8, 144u8, 41u8, 170u8, 15u8, 80u8, 148u8, 229u8,
                            213u8, 6u8, 213u8, 186u8, 20u8, 199u8, 229u8, 159u8, 17u8, 39u8, 116u8,
                            85u8, 34u8, 82u8, 109u8, 100u8, 174u8, 85u8, 245u8, 247u8, 84u8, 116u8,
                        ],
                    )
                }
                #[doc = " Inbound aggregate XCMP messages. It can only be one per ParaId/block."]
                pub fn inbound_xcmp_messages_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "InboundXcmpMessages",
                        Vec::new(),
                        [
                            60u8, 227u8, 118u8, 144u8, 41u8, 170u8, 15u8, 80u8, 148u8, 229u8,
                            213u8, 6u8, 213u8, 186u8, 20u8, 199u8, 229u8, 159u8, 17u8, 39u8, 116u8,
                            85u8, 34u8, 82u8, 109u8, 100u8, 174u8, 85u8, 245u8, 247u8, 84u8, 116u8,
                        ],
                    )
                }
                #[doc = " The non-empty XCMP channels in order of becoming non-empty, and the index of the first"]
                #[doc = " and last outbound message. If the two indices are equal, then it indicates an empty"]
                #[doc = " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater"]
                #[doc = " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in"]
                #[doc = " case of the need to send a high-priority signal message this block."]
                #[doc = " The bool is true if there is a signal message waiting to be sent."]
                pub fn outbound_xcmp_status(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::cumulus_pallet_xcmp_queue::OutboundChannelDetails,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "OutboundXcmpStatus",
                        vec![],
                        [
                            181u8, 5u8, 216u8, 176u8, 154u8, 233u8, 116u8, 14u8, 151u8, 1u8, 114u8,
                            16u8, 42u8, 20u8, 63u8, 233u8, 79u8, 122u8, 87u8, 255u8, 75u8, 149u8,
                            176u8, 106u8, 23u8, 101u8, 228u8, 120u8, 217u8, 167u8, 127u8, 117u8,
                        ],
                    )
                }
                #[doc = " The messages outbound in a given XCMP channel."]
                pub fn outbound_xcmp_messages(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u16>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "OutboundXcmpMessages",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
                            159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
                            144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
                        ],
                    )
                }
                #[doc = " The messages outbound in a given XCMP channel."]
                pub fn outbound_xcmp_messages_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "OutboundXcmpMessages",
                        Vec::new(),
                        [
                            156u8, 3u8, 202u8, 175u8, 175u8, 129u8, 38u8, 144u8, 35u8, 59u8, 228u8,
                            159u8, 142u8, 25u8, 19u8, 73u8, 73u8, 6u8, 115u8, 19u8, 236u8, 235u8,
                            144u8, 172u8, 31u8, 168u8, 24u8, 65u8, 115u8, 95u8, 77u8, 63u8,
                        ],
                    )
                }
                #[doc = " Any signal messages waiting to be sent."]
                pub fn signal_messages(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::polkadot_parachain::primitives::Id>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "SignalMessages",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            182u8, 143u8, 233u8, 233u8, 111u8, 137u8, 174u8, 165u8, 166u8, 7u8,
                            229u8, 183u8, 99u8, 108u8, 30u8, 162u8, 71u8, 55u8, 122u8, 124u8,
                            249u8, 203u8, 142u8, 124u8, 158u8, 213u8, 182u8, 159u8, 206u8, 249u8,
                            180u8, 24u8,
                        ],
                    )
                }
                #[doc = " Any signal messages waiting to be sent."]
                pub fn signal_messages_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "SignalMessages",
                        Vec::new(),
                        [
                            182u8, 143u8, 233u8, 233u8, 111u8, 137u8, 174u8, 165u8, 166u8, 7u8,
                            229u8, 183u8, 99u8, 108u8, 30u8, 162u8, 71u8, 55u8, 122u8, 124u8,
                            249u8, 203u8, 142u8, 124u8, 158u8, 213u8, 182u8, 159u8, 206u8, 249u8,
                            180u8, 24u8,
                        ],
                    )
                }
                #[doc = " The configuration which controls the dynamics of the outbound queue."]
                pub fn queue_config(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::cumulus_pallet_xcmp_queue::QueueConfigData,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "QueueConfig",
                        vec![],
                        [
                            112u8, 136u8, 198u8, 133u8, 5u8, 66u8, 33u8, 29u8, 99u8, 72u8, 70u8,
                            56u8, 182u8, 57u8, 48u8, 10u8, 135u8, 63u8, 103u8, 13u8, 143u8, 121u8,
                            12u8, 126u8, 207u8, 56u8, 244u8, 63u8, 126u8, 51u8, 100u8, 69u8,
                        ],
                    )
                }
                #[doc = " The messages that exceeded max individual message weight budget."]
                #[doc = ""]
                #[doc = " These message stay in this storage map until they are manually dispatched via"]
                #[doc = " `service_overweight`."]
                pub fn overweight(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::core::primitive::u32,
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "Overweight",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            4u8, 180u8, 123u8, 50u8, 174u8, 195u8, 68u8, 214u8, 187u8, 92u8, 131u8,
                            234u8, 166u8, 124u8, 19u8, 202u8, 0u8, 249u8, 246u8, 239u8, 199u8,
                            27u8, 129u8, 252u8, 22u8, 92u8, 206u8, 159u8, 136u8, 222u8, 238u8,
                            81u8,
                        ],
                    )
                }
                #[doc = " The messages that exceeded max individual message weight budget."]
                #[doc = ""]
                #[doc = " These message stay in this storage map until they are manually dispatched via"]
                #[doc = " `service_overweight`."]
                pub fn overweight_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::polkadot_parachain::primitives::Id,
                        ::core::primitive::u32,
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "Overweight",
                        Vec::new(),
                        [
                            4u8, 180u8, 123u8, 50u8, 174u8, 195u8, 68u8, 214u8, 187u8, 92u8, 131u8,
                            234u8, 166u8, 124u8, 19u8, 202u8, 0u8, 249u8, 246u8, 239u8, 199u8,
                            27u8, 129u8, 252u8, 22u8, 92u8, 206u8, 159u8, 136u8, 222u8, 238u8,
                            81u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_overweight(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "CounterForOverweight",
                        vec![],
                        [
                            44u8, 249u8, 133u8, 204u8, 169u8, 253u8, 23u8, 157u8, 132u8, 193u8,
                            28u8, 178u8, 156u8, 176u8, 206u8, 46u8, 79u8, 254u8, 174u8, 236u8,
                            143u8, 219u8, 59u8, 43u8, 36u8, 109u8, 244u8, 206u8, 48u8, 126u8,
                            247u8, 0u8,
                        ],
                    )
                }
                #[doc = " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next"]
                #[doc = " available free overweight index."]
                pub fn overweight_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "OverweightCount",
                        vec![],
                        [
                            28u8, 72u8, 218u8, 167u8, 253u8, 30u8, 10u8, 51u8, 49u8, 101u8, 86u8,
                            26u8, 146u8, 2u8, 153u8, 232u8, 129u8, 38u8, 111u8, 105u8, 246u8, 84u8,
                            192u8, 157u8, 193u8, 57u8, 222u8, 122u8, 38u8, 160u8, 56u8, 39u8,
                        ],
                    )
                }
                #[doc = " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."]
                pub fn queue_suspended(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmpQueue",
                        "QueueSuspended",
                        vec![],
                        [
                            165u8, 66u8, 105u8, 244u8, 113u8, 43u8, 177u8, 252u8, 212u8, 243u8,
                            143u8, 184u8, 87u8, 51u8, 163u8, 104u8, 29u8, 84u8, 119u8, 74u8, 233u8,
                            129u8, 203u8, 105u8, 2u8, 101u8, 19u8, 170u8, 69u8, 253u8, 80u8, 132u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod cumulus_xcm {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::cumulus_pallet_xcm::pallet::Error;
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::cumulus_pallet_xcm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Downward message is invalid XCM."]
            #[doc = "\\[ id \\]"]
            pub struct InvalidFormat(pub [::core::primitive::u8; 32usize]);
            impl ::subxt::events::StaticEvent for InvalidFormat {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "InvalidFormat";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Downward message is unsupported version of XCM."]
            #[doc = "\\[ id \\]"]
            pub struct UnsupportedVersion(pub [::core::primitive::u8; 32usize]);
            impl ::subxt::events::StaticEvent for UnsupportedVersion {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "UnsupportedVersion";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Downward message executed with the given outcome."]
            #[doc = "\\[ id, outcome \\]"]
            pub struct ExecutedDownward(
                pub [::core::primitive::u8; 32usize],
                pub runtime_types::xcm::v3::traits::Outcome,
            );
            impl ::subxt::events::StaticEvent for ExecutedDownward {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "ExecutedDownward";
            }
        }
    }
    pub mod dmp_queue {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::cumulus_pallet_dmp_queue::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::cumulus_pallet_dmp_queue::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ServiceOverweight {
                    pub index: ::core::primitive::u64,
                    pub weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for ServiceOverweight {
                    const PALLET: &'static str = "DmpQueue";
                    const CALL: &'static str = "service_overweight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Service a single overweight message."]
                pub fn service_overweight(
                    &self,
                    index: ::core::primitive::u64,
                    weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::ServiceOverweight> {
                    ::subxt::tx::Payload::new_static(
                        "DmpQueue",
                        "service_overweight",
                        types::ServiceOverweight {
                            index,
                            weight_limit,
                        },
                        [
                            235u8, 203u8, 220u8, 162u8, 173u8, 117u8, 224u8, 194u8, 176u8, 125u8,
                            50u8, 74u8, 180u8, 37u8, 126u8, 227u8, 138u8, 213u8, 227u8, 35u8,
                            247u8, 18u8, 160u8, 231u8, 97u8, 149u8, 144u8, 49u8, 34u8, 146u8, 32u8,
                            7u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::cumulus_pallet_dmp_queue::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Downward message is invalid XCM."]
            pub struct InvalidFormat {
                pub message_id: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for InvalidFormat {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "InvalidFormat";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Downward message is unsupported version of XCM."]
            pub struct UnsupportedVersion {
                pub message_id: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for UnsupportedVersion {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "UnsupportedVersion";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Downward message executed with the given outcome."]
            pub struct ExecutedDownward {
                pub message_id: [::core::primitive::u8; 32usize],
                pub outcome: runtime_types::xcm::v3::traits::Outcome,
            }
            impl ::subxt::events::StaticEvent for ExecutedDownward {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "ExecutedDownward";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The weight limit for handling downward messages was reached."]
            pub struct WeightExhausted {
                pub message_id: [::core::primitive::u8; 32usize],
                pub remaining_weight: runtime_types::sp_weights::weight_v2::Weight,
                pub required_weight: runtime_types::sp_weights::weight_v2::Weight,
            }
            impl ::subxt::events::StaticEvent for WeightExhausted {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "WeightExhausted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Downward message is overweight and was placed in the overweight queue."]
            pub struct OverweightEnqueued {
                pub message_id: [::core::primitive::u8; 32usize],
                pub overweight_index: ::core::primitive::u64,
                pub required_weight: runtime_types::sp_weights::weight_v2::Weight,
            }
            impl ::subxt::events::StaticEvent for OverweightEnqueued {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "OverweightEnqueued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Downward message from the overweight queue was executed."]
            pub struct OverweightServiced {
                pub overweight_index: ::core::primitive::u64,
                pub weight_used: runtime_types::sp_weights::weight_v2::Weight,
            }
            impl ::subxt::events::StaticEvent for OverweightServiced {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "OverweightServiced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The maximum number of downward messages was."]
            pub struct MaxMessagesExhausted {
                pub message_id: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for MaxMessagesExhausted {
                const PALLET: &'static str = "DmpQueue";
                const EVENT: &'static str = "MaxMessagesExhausted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The configuration."]
                pub fn configuration(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::cumulus_pallet_dmp_queue::ConfigData,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "Configuration",
                        vec![],
                        [
                            28u8, 58u8, 57u8, 84u8, 115u8, 69u8, 158u8, 234u8, 180u8, 37u8, 138u8,
                            120u8, 182u8, 145u8, 109u8, 203u8, 62u8, 102u8, 168u8, 56u8, 236u8,
                            10u8, 236u8, 104u8, 232u8, 245u8, 107u8, 143u8, 247u8, 232u8, 135u8,
                            131u8,
                        ],
                    )
                }
                #[doc = " The page index."]
                pub fn page_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::cumulus_pallet_dmp_queue::PageIndexData,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "PageIndex",
                        vec![],
                        [
                            246u8, 129u8, 111u8, 255u8, 168u8, 54u8, 121u8, 21u8, 159u8, 142u8,
                            252u8, 173u8, 3u8, 191u8, 202u8, 158u8, 86u8, 26u8, 76u8, 134u8, 201u8,
                            138u8, 103u8, 75u8, 223u8, 57u8, 36u8, 45u8, 171u8, 190u8, 21u8, 60u8,
                        ],
                    )
                }
                #[doc = " The queue pages."]
                pub fn pages(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(
                        ::core::primitive::u32,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "Pages",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            24u8, 215u8, 210u8, 131u8, 23u8, 56u8, 71u8, 143u8, 35u8, 151u8, 223u8,
                            133u8, 42u8, 32u8, 180u8, 85u8, 146u8, 166u8, 6u8, 168u8, 227u8, 128u8,
                            30u8, 108u8, 103u8, 16u8, 169u8, 235u8, 238u8, 224u8, 247u8, 233u8,
                        ],
                    )
                }
                #[doc = " The queue pages."]
                pub fn pages_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(
                        ::core::primitive::u32,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "Pages",
                        Vec::new(),
                        [
                            24u8, 215u8, 210u8, 131u8, 23u8, 56u8, 71u8, 143u8, 35u8, 151u8, 223u8,
                            133u8, 42u8, 32u8, 180u8, 85u8, 146u8, 166u8, 6u8, 168u8, 227u8, 128u8,
                            30u8, 108u8, 103u8, 16u8, 169u8, 235u8, 238u8, 224u8, 247u8, 233u8,
                        ],
                    )
                }
                #[doc = " The overweight messages."]
                pub fn overweight(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u32,
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "Overweight",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            86u8, 97u8, 243u8, 7u8, 134u8, 189u8, 7u8, 126u8, 8u8, 108u8, 152u8,
                            48u8, 230u8, 8u8, 71u8, 83u8, 151u8, 125u8, 18u8, 168u8, 38u8, 38u8,
                            117u8, 85u8, 143u8, 187u8, 122u8, 13u8, 104u8, 52u8, 198u8, 138u8,
                        ],
                    )
                }
                #[doc = " The overweight messages."]
                pub fn overweight_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u32,
                        ::std::vec::Vec<::core::primitive::u8>,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "Overweight",
                        Vec::new(),
                        [
                            86u8, 97u8, 243u8, 7u8, 134u8, 189u8, 7u8, 126u8, 8u8, 108u8, 152u8,
                            48u8, 230u8, 8u8, 71u8, 83u8, 151u8, 125u8, 18u8, 168u8, 38u8, 38u8,
                            117u8, 85u8, 143u8, 187u8, 122u8, 13u8, 104u8, 52u8, 198u8, 138u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_overweight(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "DmpQueue",
                        "CounterForOverweight",
                        vec![],
                        [
                            44u8, 249u8, 133u8, 204u8, 169u8, 253u8, 23u8, 157u8, 132u8, 193u8,
                            28u8, 178u8, 156u8, 176u8, 206u8, 46u8, 79u8, 254u8, 174u8, 236u8,
                            143u8, 219u8, 59u8, 43u8, 36u8, 109u8, 244u8, 206u8, 48u8, 126u8,
                            247u8, 0u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod polkadot_xcm {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_xcm::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_xcm::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Send {
                    pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Send {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "send";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TeleportAssets {
                    pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                    pub fee_asset_item: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for TeleportAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "teleport_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReserveTransferAssets {
                    pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                    pub fee_asset_item: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ReserveTransferAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "reserve_transfer_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Execute {
                    pub message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm2>,
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceXcmVersion {
                    pub location:
                        ::std::boxed::Box<runtime_types::xcm::v3::multilocation::MultiLocation>,
                    pub xcm_version: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceXcmVersion {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_xcm_version";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceDefaultXcmVersion {
                    pub maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceDefaultXcmVersion {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_default_xcm_version";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceSubscribeVersionNotify {
                    pub location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSubscribeVersionNotify {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_subscribe_version_notify";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceUnsubscribeVersionNotify {
                    pub location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceUnsubscribeVersionNotify {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_unsubscribe_version_notify";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct LimitedReserveTransferAssets {
                    pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                    pub fee_asset_item: ::core::primitive::u32,
                    pub weight_limit: runtime_types::xcm::v3::WeightLimit,
                }
                impl ::subxt::blocks::StaticExtrinsic for LimitedReserveTransferAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "limited_reserve_transfer_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct LimitedTeleportAssets {
                    pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                    pub fee_asset_item: ::core::primitive::u32,
                    pub weight_limit: runtime_types::xcm::v3::WeightLimit,
                }
                impl ::subxt::blocks::StaticExtrinsic for LimitedTeleportAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "limited_teleport_assets";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceSuspension {
                    pub suspended: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSuspension {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_suspension";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn send(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    message: runtime_types::xcm::VersionedXcm,
                ) -> ::subxt::tx::Payload<types::Send> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "send",
                        types::Send {
                            dest: ::std::boxed::Box::new(dest),
                            message: ::std::boxed::Box::new(message),
                        },
                        [
                            147u8, 255u8, 86u8, 82u8, 17u8, 159u8, 225u8, 145u8, 220u8, 89u8, 71u8,
                            23u8, 193u8, 249u8, 12u8, 70u8, 19u8, 140u8, 232u8, 97u8, 12u8, 220u8,
                            113u8, 65u8, 4u8, 255u8, 138u8, 10u8, 231u8, 122u8, 67u8, 105u8,
                        ],
                    )
                }
                #[doc = "Teleport some assets from the local chain to some destination chain."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
                #[doc = "with all fees taken as needed from the asset."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                #[doc = "  an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
                #[doc = "  `dest` side. May not be empty."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                pub fn teleport_assets(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    beneficiary: runtime_types::xcm::VersionedMultiLocation,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_asset_item: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::TeleportAssets> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "teleport_assets",
                        types::TeleportAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                        },
                        [
                            56u8, 144u8, 237u8, 60u8, 157u8, 5u8, 7u8, 129u8, 41u8, 149u8, 160u8,
                            100u8, 233u8, 102u8, 181u8, 140u8, 115u8, 213u8, 29u8, 132u8, 16u8,
                            30u8, 23u8, 82u8, 140u8, 134u8, 37u8, 87u8, 3u8, 99u8, 172u8, 42u8,
                        ],
                    )
                }
                #[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
                #[doc = "chain and forward a notification XCM."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
                #[doc = "with all fees taken as needed from the asset."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                #[doc = "  an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
                #[doc = "  `dest` side."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                pub fn reserve_transfer_assets(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    beneficiary: runtime_types::xcm::VersionedMultiLocation,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_asset_item: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ReserveTransferAssets> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "reserve_transfer_assets",
                        types::ReserveTransferAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                        },
                        [
                            21u8, 167u8, 44u8, 22u8, 210u8, 73u8, 148u8, 7u8, 91u8, 108u8, 148u8,
                            205u8, 170u8, 243u8, 142u8, 224u8, 205u8, 119u8, 252u8, 22u8, 203u8,
                            32u8, 73u8, 200u8, 178u8, 14u8, 167u8, 147u8, 166u8, 55u8, 14u8, 231u8,
                        ],
                    )
                }
                #[doc = "Execute an XCM message from a local, signed, origin."]
                #[doc = ""]
                #[doc = "An event is deposited indicating whether `msg` could be executed completely or only"]
                #[doc = "partially."]
                #[doc = ""]
                #[doc = "No more than `max_weight` will be used in its attempted execution. If this is less than the"]
                #[doc = "maximum amount of weight that the message could take to be executed, then no execution"]
                #[doc = "attempt will be made."]
                #[doc = ""]
                #[doc = "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully"]
                #[doc = "to completion; only that *some* of it was executed."]
                pub fn execute(
                    &self,
                    message: runtime_types::xcm::VersionedXcm2,
                    max_weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::Execute> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "execute",
                        types::Execute {
                            message: ::std::boxed::Box::new(message),
                            max_weight,
                        },
                        [
                            15u8, 97u8, 86u8, 111u8, 105u8, 116u8, 109u8, 206u8, 70u8, 8u8, 57u8,
                            232u8, 133u8, 132u8, 30u8, 219u8, 34u8, 69u8, 0u8, 213u8, 98u8, 241u8,
                            186u8, 93u8, 216u8, 39u8, 73u8, 24u8, 193u8, 87u8, 92u8, 31u8,
                        ],
                    )
                }
                #[doc = "Extoll that a particular destination can be communicated with through a particular"]
                #[doc = "version of XCM."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `location`: The destination that is being described."]
                #[doc = "- `xcm_version`: The latest version of XCM that `location` supports."]
                pub fn force_xcm_version(
                    &self,
                    location: runtime_types::xcm::v3::multilocation::MultiLocation,
                    xcm_version: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ForceXcmVersion> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_xcm_version",
                        types::ForceXcmVersion {
                            location: ::std::boxed::Box::new(location),
                            xcm_version,
                        },
                        [
                            84u8, 212u8, 64u8, 161u8, 17u8, 129u8, 213u8, 129u8, 79u8, 86u8, 117u8,
                            246u8, 93u8, 1u8, 161u8, 23u8, 35u8, 171u8, 163u8, 200u8, 69u8, 157u8,
                            71u8, 8u8, 225u8, 149u8, 254u8, 124u8, 38u8, 250u8, 164u8, 218u8,
                        ],
                    )
                }
                #[doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"]
                #[doc = "version a destination can accept is unknown)."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."]
                pub fn force_default_xcm_version(
                    &self,
                    maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<types::ForceDefaultXcmVersion> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_default_xcm_version",
                        types::ForceDefaultXcmVersion { maybe_xcm_version },
                        [
                            43u8, 114u8, 102u8, 104u8, 209u8, 234u8, 108u8, 173u8, 109u8, 188u8,
                            94u8, 214u8, 136u8, 43u8, 153u8, 75u8, 161u8, 192u8, 76u8, 12u8, 221u8,
                            237u8, 158u8, 247u8, 41u8, 193u8, 35u8, 174u8, 183u8, 207u8, 79u8,
                            213u8,
                        ],
                    )
                }
                #[doc = "Ask a location to notify us regarding their XCM version and any changes to it."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `location`: The location to which we should subscribe for XCM version notifications."]
                pub fn force_subscribe_version_notify(
                    &self,
                    location: runtime_types::xcm::VersionedMultiLocation,
                ) -> ::subxt::tx::Payload<types::ForceSubscribeVersionNotify> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_subscribe_version_notify",
                        types::ForceSubscribeVersionNotify {
                            location: ::std::boxed::Box::new(location),
                        },
                        [
                            112u8, 254u8, 138u8, 12u8, 203u8, 176u8, 251u8, 167u8, 223u8, 0u8,
                            71u8, 148u8, 19u8, 179u8, 47u8, 96u8, 188u8, 189u8, 14u8, 172u8, 1u8,
                            1u8, 192u8, 107u8, 137u8, 158u8, 22u8, 9u8, 138u8, 241u8, 32u8, 47u8,
                        ],
                    )
                }
                #[doc = "Require that a particular destination should no longer notify us regarding any XCM"]
                #[doc = "version changes."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `location`: The location to which we are currently subscribed for XCM version"]
                #[doc = "  notifications which we no longer desire."]
                pub fn force_unsubscribe_version_notify(
                    &self,
                    location: runtime_types::xcm::VersionedMultiLocation,
                ) -> ::subxt::tx::Payload<types::ForceUnsubscribeVersionNotify> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_unsubscribe_version_notify",
                        types::ForceUnsubscribeVersionNotify {
                            location: ::std::boxed::Box::new(location),
                        },
                        [
                            205u8, 143u8, 230u8, 143u8, 166u8, 184u8, 53u8, 252u8, 118u8, 184u8,
                            209u8, 227u8, 225u8, 184u8, 254u8, 244u8, 101u8, 56u8, 27u8, 128u8,
                            40u8, 159u8, 178u8, 62u8, 63u8, 164u8, 59u8, 236u8, 1u8, 168u8, 202u8,
                            42u8,
                        ],
                    )
                }
                #[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
                #[doc = "chain and forward a notification XCM."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
                #[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
                #[doc = "at risk."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                #[doc = "  an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
                #[doc = "  `dest` side."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                pub fn limited_reserve_transfer_assets(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    beneficiary: runtime_types::xcm::VersionedMultiLocation,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_asset_item: ::core::primitive::u32,
                    weight_limit: runtime_types::xcm::v3::WeightLimit,
                ) -> ::subxt::tx::Payload<types::LimitedReserveTransferAssets> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "limited_reserve_transfer_assets",
                        types::LimitedReserveTransferAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            10u8, 139u8, 165u8, 239u8, 92u8, 178u8, 169u8, 62u8, 166u8, 236u8,
                            50u8, 12u8, 196u8, 3u8, 233u8, 209u8, 3u8, 159u8, 184u8, 234u8, 171u8,
                            46u8, 145u8, 134u8, 241u8, 155u8, 221u8, 173u8, 166u8, 94u8, 147u8,
                            88u8,
                        ],
                    )
                }
                #[doc = "Teleport some assets from the local chain to some destination chain."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
                #[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
                #[doc = "at risk."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                #[doc = "  an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
                #[doc = "  `dest` side. May not be empty."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                pub fn limited_teleport_assets(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    beneficiary: runtime_types::xcm::VersionedMultiLocation,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_asset_item: ::core::primitive::u32,
                    weight_limit: runtime_types::xcm::v3::WeightLimit,
                ) -> ::subxt::tx::Payload<types::LimitedTeleportAssets> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "limited_teleport_assets",
                        types::LimitedTeleportAssets {
                            dest: ::std::boxed::Box::new(dest),
                            beneficiary: ::std::boxed::Box::new(beneficiary),
                            assets: ::std::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            156u8, 205u8, 105u8, 18u8, 120u8, 130u8, 144u8, 67u8, 152u8, 188u8,
                            109u8, 121u8, 4u8, 240u8, 123u8, 112u8, 72u8, 153u8, 2u8, 111u8, 183u8,
                            170u8, 199u8, 82u8, 33u8, 117u8, 43u8, 133u8, 208u8, 44u8, 118u8,
                            107u8,
                        ],
                    )
                }
                #[doc = "Set or unset the global suspension state of the XCM executor."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `suspended`: `true` to suspend, `false` to resume."]
                pub fn force_suspension(
                    &self,
                    suspended: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::ForceSuspension> {
                    ::subxt::tx::Payload::new_static(
                        "PolkadotXcm",
                        "force_suspension",
                        types::ForceSuspension { suspended },
                        [
                            78u8, 125u8, 93u8, 55u8, 129u8, 44u8, 36u8, 227u8, 75u8, 46u8, 68u8,
                            202u8, 81u8, 127u8, 111u8, 92u8, 149u8, 38u8, 225u8, 185u8, 183u8,
                            154u8, 89u8, 159u8, 79u8, 10u8, 229u8, 1u8, 226u8, 243u8, 65u8, 238u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_xcm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Execution of an XCM message was attempted."]
            #[doc = ""]
            #[doc = "\\[ outcome \\]"]
            pub struct Attempted(pub runtime_types::xcm::v3::traits::Outcome);
            impl ::subxt::events::StaticEvent for Attempted {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "Attempted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A XCM message was sent."]
            #[doc = ""]
            #[doc = "\\[ origin, destination, message \\]"]
            pub struct Sent(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::v3::Xcm,
            );
            impl ::subxt::events::StaticEvent for Sent {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "Sent";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Query response received which does not match a registered query. This may be because a"]
            #[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
            #[doc = "because the query timed out."]
            #[doc = ""]
            #[doc = "\\[ origin location, id \\]"]
            pub struct UnexpectedResponse(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u64,
            );
            impl ::subxt::events::StaticEvent for UnexpectedResponse {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "UnexpectedResponse";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
            #[doc = "no registered notification call."]
            #[doc = ""]
            #[doc = "\\[ id, response \\]"]
            pub struct ResponseReady(
                pub ::core::primitive::u64,
                pub runtime_types::xcm::v3::Response,
            );
            impl ::subxt::events::StaticEvent for ResponseReady {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "ResponseReady";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Query response has been received and query is removed. The registered notification has"]
            #[doc = "been dispatched and executed successfully."]
            #[doc = ""]
            #[doc = "\\[ id, pallet index, call index \\]"]
            pub struct Notified(
                pub ::core::primitive::u64,
                pub ::core::primitive::u8,
                pub ::core::primitive::u8,
            );
            impl ::subxt::events::StaticEvent for Notified {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "Notified";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Query response has been received and query is removed. The registered notification could"]
            #[doc = "not be dispatched because the dispatch weight is greater than the maximum weight"]
            #[doc = "originally budgeted by this runtime for the query result."]
            #[doc = ""]
            #[doc = "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"]
            pub struct NotifyOverweight(
                pub ::core::primitive::u64,
                pub ::core::primitive::u8,
                pub ::core::primitive::u8,
                pub runtime_types::sp_weights::weight_v2::Weight,
                pub runtime_types::sp_weights::weight_v2::Weight,
            );
            impl ::subxt::events::StaticEvent for NotifyOverweight {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyOverweight";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Query response has been received and query is removed. There was a general error with"]
            #[doc = "dispatching the notification call."]
            #[doc = ""]
            #[doc = "\\[ id, pallet index, call index \\]"]
            pub struct NotifyDispatchError(
                pub ::core::primitive::u64,
                pub ::core::primitive::u8,
                pub ::core::primitive::u8,
            );
            impl ::subxt::events::StaticEvent for NotifyDispatchError {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyDispatchError";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
            #[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
            #[doc = "is not `(origin, QueryId, Response)`."]
            #[doc = ""]
            #[doc = "\\[ id, pallet index, call index \\]"]
            pub struct NotifyDecodeFailed(
                pub ::core::primitive::u64,
                pub ::core::primitive::u8,
                pub ::core::primitive::u8,
            );
            impl ::subxt::events::StaticEvent for NotifyDecodeFailed {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyDecodeFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Expected query response has been received but the origin location of the response does"]
            #[doc = "not match that expected. The query remains registered for a later, valid, response to"]
            #[doc = "be received and acted upon."]
            #[doc = ""]
            #[doc = "\\[ origin location, id, expected location \\]"]
            pub struct InvalidResponder(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u64,
                pub ::core::option::Option<runtime_types::xcm::v3::multilocation::MultiLocation>,
            );
            impl ::subxt::events::StaticEvent for InvalidResponder {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidResponder";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Expected query response has been received but the expected origin location placed in"]
            #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
            #[doc = ""]
            #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
            #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
            #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
            #[doc = "needed."]
            #[doc = ""]
            #[doc = "\\[ origin location, id \\]"]
            pub struct InvalidResponderVersion(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u64,
            );
            impl ::subxt::events::StaticEvent for InvalidResponderVersion {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidResponderVersion";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Received query response has been read and removed."]
            #[doc = ""]
            #[doc = "\\[ id \\]"]
            pub struct ResponseTaken(pub ::core::primitive::u64);
            impl ::subxt::events::StaticEvent for ResponseTaken {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "ResponseTaken";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets have been placed in an asset trap."]
            #[doc = ""]
            #[doc = "\\[ hash, origin, assets \\]"]
            pub struct AssetsTrapped(
                pub ::subxt::utils::H256,
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::VersionedMultiAssets,
            );
            impl ::subxt::events::StaticEvent for AssetsTrapped {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "AssetsTrapped";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An XCM version change notification message has been attempted to be sent."]
            #[doc = ""]
            #[doc = "The cost of sending it (borne by the chain) is included."]
            #[doc = ""]
            #[doc = "\\[ destination, result, cost \\]"]
            pub struct VersionChangeNotified(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u32,
                pub runtime_types::xcm::v3::multiasset::MultiAssets,
            );
            impl ::subxt::events::StaticEvent for VersionChangeNotified {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionChangeNotified";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The supported version of a location has been changed. This might be through an"]
            #[doc = "automatic notification or a manual intervention."]
            #[doc = ""]
            #[doc = "\\[ location, XCM version \\]"]
            pub struct SupportedVersionChanged(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u32,
            );
            impl ::subxt::events::StaticEvent for SupportedVersionChanged {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "SupportedVersionChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A given location which had a version change subscription was dropped owing to an error"]
            #[doc = "sending the notification to it."]
            #[doc = ""]
            #[doc = "\\[ location, query ID, error \\]"]
            pub struct NotifyTargetSendFail(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u64,
                pub runtime_types::xcm::v3::traits::Error,
            );
            impl ::subxt::events::StaticEvent for NotifyTargetSendFail {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyTargetSendFail";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A given location which had a version change subscription was dropped owing to an error"]
            #[doc = "migrating the location to our new XCM format."]
            #[doc = ""]
            #[doc = "\\[ location, query ID \\]"]
            pub struct NotifyTargetMigrationFail(
                pub runtime_types::xcm::VersionedMultiLocation,
                pub ::core::primitive::u64,
            );
            impl ::subxt::events::StaticEvent for NotifyTargetMigrationFail {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyTargetMigrationFail";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Expected query response has been received but the expected querier location placed in"]
            #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
            #[doc = ""]
            #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
            #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
            #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
            #[doc = "needed."]
            #[doc = ""]
            #[doc = "\\[ origin location, id \\]"]
            pub struct InvalidQuerierVersion(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u64,
            );
            impl ::subxt::events::StaticEvent for InvalidQuerierVersion {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidQuerierVersion";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Expected query response has been received but the querier location of the response does"]
            #[doc = "not match the expected. The query remains registered for a later, valid, response to"]
            #[doc = "be received and acted upon."]
            #[doc = ""]
            #[doc = "\\[ origin location, id, expected querier, maybe actual querier \\]"]
            pub struct InvalidQuerier(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::primitive::u64,
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub ::core::option::Option<runtime_types::xcm::v3::multilocation::MultiLocation>,
            );
            impl ::subxt::events::StaticEvent for InvalidQuerier {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidQuerier";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A remote has requested XCM version change notification from us and we have honored it."]
            #[doc = "A version information message is sent to them and its cost is included."]
            #[doc = ""]
            #[doc = "\\[ destination location, cost \\]"]
            pub struct VersionNotifyStarted(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::v3::multiasset::MultiAssets,
            );
            impl ::subxt::events::StaticEvent for VersionNotifyStarted {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionNotifyStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "We have requested that a remote chain sends us XCM version change notifications."]
            #[doc = ""]
            #[doc = "\\[ destination location, cost \\]"]
            pub struct VersionNotifyRequested(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::v3::multiasset::MultiAssets,
            );
            impl ::subxt::events::StaticEvent for VersionNotifyRequested {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionNotifyRequested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "We have requested that a remote chain stops sending us XCM version change notifications."]
            #[doc = ""]
            #[doc = "\\[ destination location, cost \\]"]
            pub struct VersionNotifyUnrequested(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::v3::multiasset::MultiAssets,
            );
            impl ::subxt::events::StaticEvent for VersionNotifyUnrequested {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionNotifyUnrequested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Fees were paid from a location for an operation (often for using `SendXcm`)."]
            #[doc = ""]
            #[doc = "\\[ paying location, fees \\]"]
            pub struct FeesPaid(
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::v3::multiasset::MultiAssets,
            );
            impl ::subxt::events::StaticEvent for FeesPaid {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "FeesPaid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets have been claimed from an asset trap"]
            #[doc = ""]
            #[doc = "\\[ hash, origin, assets \\]"]
            pub struct AssetsClaimed(
                pub ::subxt::utils::H256,
                pub runtime_types::xcm::v3::multilocation::MultiLocation,
                pub runtime_types::xcm::VersionedMultiAssets,
            );
            impl ::subxt::events::StaticEvent for AssetsClaimed {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "AssetsClaimed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The latest available query index."]
                pub fn query_counter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "QueryCounter",
                        vec![],
                        [
                            216u8, 73u8, 160u8, 232u8, 60u8, 245u8, 218u8, 219u8, 152u8, 68u8,
                            146u8, 219u8, 255u8, 7u8, 86u8, 112u8, 83u8, 49u8, 94u8, 173u8, 64u8,
                            203u8, 147u8, 226u8, 236u8, 39u8, 129u8, 106u8, 209u8, 113u8, 150u8,
                            50u8,
                        ],
                    )
                }
                #[doc = " The ongoing queries."]
                pub fn queries(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_xcm::pallet::QueryStatus<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "Queries",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            119u8, 5u8, 12u8, 91u8, 117u8, 240u8, 52u8, 192u8, 135u8, 139u8, 220u8,
                            78u8, 207u8, 199u8, 71u8, 163u8, 100u8, 17u8, 6u8, 65u8, 200u8, 245u8,
                            191u8, 82u8, 232u8, 128u8, 126u8, 70u8, 39u8, 63u8, 148u8, 219u8,
                        ],
                    )
                }
                #[doc = " The ongoing queries."]
                pub fn queries_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_xcm::pallet::QueryStatus<::core::primitive::u32>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "Queries",
                        Vec::new(),
                        [
                            119u8, 5u8, 12u8, 91u8, 117u8, 240u8, 52u8, 192u8, 135u8, 139u8, 220u8,
                            78u8, 207u8, 199u8, 71u8, 163u8, 100u8, 17u8, 6u8, 65u8, 200u8, 245u8,
                            191u8, 82u8, 232u8, 128u8, 126u8, 70u8, 39u8, 63u8, 148u8, 219u8,
                        ],
                    )
                }
                #[doc = " The existing asset traps."]
                #[doc = ""]
                #[doc = " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of"]
                #[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
                pub fn asset_traps(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "AssetTraps",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            148u8, 41u8, 254u8, 134u8, 61u8, 172u8, 126u8, 146u8, 78u8, 178u8,
                            50u8, 77u8, 226u8, 8u8, 200u8, 78u8, 77u8, 91u8, 26u8, 133u8, 104u8,
                            126u8, 28u8, 28u8, 202u8, 62u8, 87u8, 183u8, 231u8, 191u8, 5u8, 181u8,
                        ],
                    )
                }
                #[doc = " The existing asset traps."]
                #[doc = ""]
                #[doc = " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of"]
                #[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
                pub fn asset_traps_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "AssetTraps",
                        Vec::new(),
                        [
                            148u8, 41u8, 254u8, 134u8, 61u8, 172u8, 126u8, 146u8, 78u8, 178u8,
                            50u8, 77u8, 226u8, 8u8, 200u8, 78u8, 77u8, 91u8, 26u8, 133u8, 104u8,
                            126u8, 28u8, 28u8, 202u8, 62u8, 87u8, 183u8, 231u8, 191u8, 5u8, 181u8,
                        ],
                    )
                }
                #[doc = " Default version to encode XCM when latest version of destination is unknown. If `None`,"]
                #[doc = " then the destinations whose XCM version is unknown are considered unreachable."]
                pub fn safe_xcm_version(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "SafeXcmVersion",
                        vec![],
                        [
                            187u8, 8u8, 74u8, 126u8, 80u8, 215u8, 177u8, 60u8, 223u8, 123u8, 196u8,
                            155u8, 166u8, 66u8, 25u8, 164u8, 191u8, 66u8, 116u8, 131u8, 116u8,
                            188u8, 224u8, 122u8, 75u8, 195u8, 246u8, 188u8, 83u8, 134u8, 49u8,
                            143u8,
                        ],
                    )
                }
                #[doc = " The Latest versions that we know various locations support."]
                pub fn supported_version(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedMultiLocation>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "SupportedVersion",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            144u8, 22u8, 91u8, 30u8, 139u8, 164u8, 95u8, 149u8, 97u8, 247u8, 12u8,
                            212u8, 96u8, 16u8, 134u8, 236u8, 74u8, 57u8, 244u8, 169u8, 68u8, 63u8,
                            111u8, 86u8, 65u8, 229u8, 104u8, 51u8, 44u8, 100u8, 47u8, 191u8,
                        ],
                    )
                }
                #[doc = " The Latest versions that we know various locations support."]
                pub fn supported_version_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "SupportedVersion",
                        Vec::new(),
                        [
                            144u8, 22u8, 91u8, 30u8, 139u8, 164u8, 95u8, 149u8, 97u8, 247u8, 12u8,
                            212u8, 96u8, 16u8, 134u8, 236u8, 74u8, 57u8, 244u8, 169u8, 68u8, 63u8,
                            111u8, 86u8, 65u8, 229u8, 104u8, 51u8, 44u8, 100u8, 47u8, 191u8,
                        ],
                    )
                }
                #[doc = " All locations that we have requested version notifications from."]
                pub fn version_notifiers(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedMultiLocation>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "VersionNotifiers",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            49u8, 190u8, 73u8, 67u8, 91u8, 69u8, 121u8, 206u8, 25u8, 82u8, 29u8,
                            170u8, 157u8, 201u8, 168u8, 93u8, 181u8, 55u8, 226u8, 142u8, 136u8,
                            46u8, 117u8, 208u8, 130u8, 90u8, 129u8, 39u8, 151u8, 92u8, 118u8, 75u8,
                        ],
                    )
                }
                #[doc = " All locations that we have requested version notifications from."]
                pub fn version_notifiers_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "VersionNotifiers",
                        Vec::new(),
                        [
                            49u8, 190u8, 73u8, 67u8, 91u8, 69u8, 121u8, 206u8, 25u8, 82u8, 29u8,
                            170u8, 157u8, 201u8, 168u8, 93u8, 181u8, 55u8, 226u8, 142u8, 136u8,
                            46u8, 117u8, 208u8, 130u8, 90u8, 129u8, 39u8, 151u8, 92u8, 118u8, 75u8,
                        ],
                    )
                }
                #[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
                #[doc = " of our versions we informed them of."]
                pub fn version_notify_targets(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedMultiLocation>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u64,
                        runtime_types::sp_weights::weight_v2::Weight,
                        ::core::primitive::u32,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "VersionNotifyTargets",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            1u8, 195u8, 40u8, 83u8, 216u8, 175u8, 241u8, 95u8, 42u8, 7u8, 85u8,
                            253u8, 223u8, 241u8, 195u8, 41u8, 41u8, 21u8, 17u8, 171u8, 216u8,
                            150u8, 39u8, 165u8, 215u8, 194u8, 201u8, 225u8, 179u8, 12u8, 52u8,
                            173u8,
                        ],
                    )
                }
                #[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
                #[doc = " of our versions we informed them of."]
                pub fn version_notify_targets_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u64,
                        runtime_types::sp_weights::weight_v2::Weight,
                        ::core::primitive::u32,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "VersionNotifyTargets",
                        Vec::new(),
                        [
                            1u8, 195u8, 40u8, 83u8, 216u8, 175u8, 241u8, 95u8, 42u8, 7u8, 85u8,
                            253u8, 223u8, 241u8, 195u8, 41u8, 41u8, 21u8, 17u8, 171u8, 216u8,
                            150u8, 39u8, 165u8, 215u8, 194u8, 201u8, 225u8, 179u8, 12u8, 52u8,
                            173u8,
                        ],
                    )
                }
                #[doc = " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and"]
                #[doc = " the `u32` counter is the number of times that a send to the destination has been attempted,"]
                #[doc = " which is used as a prioritization."]
                pub fn version_discovery_queue(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        runtime_types::xcm::VersionedMultiLocation,
                        ::core::primitive::u32,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "VersionDiscoveryQueue",
                        vec![],
                        [
                            110u8, 87u8, 102u8, 193u8, 125u8, 129u8, 0u8, 221u8, 218u8, 229u8,
                            101u8, 94u8, 74u8, 229u8, 246u8, 180u8, 113u8, 11u8, 15u8, 159u8, 98u8,
                            90u8, 30u8, 112u8, 164u8, 236u8, 151u8, 220u8, 19u8, 83u8, 67u8, 248u8,
                        ],
                    )
                }
                #[doc = " The current migration's stage, if any."]
                pub fn current_migration(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_xcm::pallet::VersionMigrationStage,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "CurrentMigration",
                        vec![],
                        [
                            74u8, 138u8, 181u8, 162u8, 59u8, 251u8, 37u8, 28u8, 232u8, 51u8, 30u8,
                            152u8, 252u8, 133u8, 95u8, 195u8, 47u8, 127u8, 21u8, 44u8, 62u8, 143u8,
                            170u8, 234u8, 160u8, 37u8, 131u8, 179u8, 57u8, 241u8, 140u8, 124u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on a remote chain."]
                pub fn remote_locked_fungibles(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                    _2: impl ::std::borrow::Borrow<runtime_types::xcm::VersionedAssetId>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_xcm::pallet::RemoteLockedFungibleRecord<()>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "RemoteLockedFungibles",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
                        ],
                        [
                            156u8, 56u8, 135u8, 249u8, 151u8, 151u8, 126u8, 26u8, 52u8, 208u8,
                            42u8, 194u8, 94u8, 116u8, 170u8, 101u8, 255u8, 24u8, 222u8, 141u8,
                            225u8, 220u8, 221u8, 9u8, 249u8, 5u8, 231u8, 99u8, 216u8, 48u8, 136u8,
                            202u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on a remote chain."]
                pub fn remote_locked_fungibles_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_xcm::pallet::RemoteLockedFungibleRecord<()>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "RemoteLockedFungibles",
                        Vec::new(),
                        [
                            156u8, 56u8, 135u8, 249u8, 151u8, 151u8, 126u8, 26u8, 52u8, 208u8,
                            42u8, 194u8, 94u8, 116u8, 170u8, 101u8, 255u8, 24u8, 222u8, 141u8,
                            225u8, 220u8, 221u8, 9u8, 249u8, 5u8, 231u8, 99u8, 216u8, 48u8, 136u8,
                            202u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on this chain."]
                pub fn locked_fungibles(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u128,
                        runtime_types::xcm::VersionedMultiLocation,
                    )>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "LockedFungibles",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            0u8, 174u8, 48u8, 153u8, 130u8, 220u8, 176u8, 174u8, 245u8, 12u8, 14u8,
                            35u8, 160u8, 145u8, 3u8, 81u8, 12u8, 142u8, 230u8, 3u8, 106u8, 81u8,
                            122u8, 34u8, 177u8, 147u8, 20u8, 164u8, 27u8, 193u8, 169u8, 41u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on this chain."]
                pub fn locked_fungibles_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u128,
                        runtime_types::xcm::VersionedMultiLocation,
                    )>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "LockedFungibles",
                        Vec::new(),
                        [
                            0u8, 174u8, 48u8, 153u8, 130u8, 220u8, 176u8, 174u8, 245u8, 12u8, 14u8,
                            35u8, 160u8, 145u8, 3u8, 81u8, 12u8, 142u8, 230u8, 3u8, 106u8, 81u8,
                            122u8, 34u8, 177u8, 147u8, 20u8, 164u8, 27u8, 193u8, 169u8, 41u8,
                        ],
                    )
                }
                #[doc = " Global suspension state of the XCM executor."]
                pub fn xcm_execution_suspended(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PolkadotXcm",
                        "XcmExecutionSuspended",
                        vec![],
                        [
                            182u8, 54u8, 69u8, 68u8, 78u8, 76u8, 103u8, 79u8, 47u8, 136u8, 99u8,
                            104u8, 128u8, 129u8, 249u8, 54u8, 214u8, 136u8, 97u8, 48u8, 178u8,
                            42u8, 26u8, 27u8, 82u8, 24u8, 33u8, 77u8, 33u8, 27u8, 20u8, 127u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod assets {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_assets::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_assets::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Create {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub admin: runtime_types::account::AccountId20,
                    pub min_balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Create {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceCreate {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub owner: runtime_types::account::AccountId20,
                    pub is_sufficient: ::core::primitive::bool,
                    #[codec(compact)]
                    pub min_balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceCreate {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "force_create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct StartDestroy {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for StartDestroy {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "start_destroy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DestroyAccounts {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for DestroyAccounts {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "destroy_accounts";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DestroyApprovals {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for DestroyApprovals {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "destroy_approvals";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FinishDestroy {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for FinishDestroy {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "finish_destroy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Mint {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub beneficiary: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Mint {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "mint";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Burn {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub who: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Burn {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "burn";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub target: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferKeepAlive {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub target: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferKeepAlive {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "transfer_keep_alive";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceTransfer {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub source: runtime_types::account::AccountId20,
                    pub dest: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceTransfer {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "force_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Freeze {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub who: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for Freeze {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "freeze";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Thaw {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub who: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for Thaw {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "thaw";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FreezeAsset {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for FreezeAsset {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "freeze_asset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ThawAsset {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ThawAsset {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "thaw_asset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferOwnership {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub owner: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferOwnership {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "transfer_ownership";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetTeam {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub issuer: runtime_types::account::AccountId20,
                    pub admin: runtime_types::account::AccountId20,
                    pub freezer: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetTeam {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "set_team";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub name: ::std::vec::Vec<::core::primitive::u8>,
                    pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                    pub decimals: ::core::primitive::u8,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "set_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClearMetadata {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "clear_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceSetMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub name: ::std::vec::Vec<::core::primitive::u8>,
                    pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                    pub decimals: ::core::primitive::u8,
                    pub is_frozen: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSetMetadata {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "force_set_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceClearMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceClearMetadata {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "force_clear_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceAssetStatus {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub owner: runtime_types::account::AccountId20,
                    pub issuer: runtime_types::account::AccountId20,
                    pub admin: runtime_types::account::AccountId20,
                    pub freezer: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub min_balance: ::core::primitive::u128,
                    pub is_sufficient: ::core::primitive::bool,
                    pub is_frozen: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceAssetStatus {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "force_asset_status";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveTransfer {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub delegate: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveTransfer {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "approve_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelApproval {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub delegate: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelApproval {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "cancel_approval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceCancelApproval {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub owner: runtime_types::account::AccountId20,
                    pub delegate: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceCancelApproval {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "force_cancel_approval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferApproved {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub owner: runtime_types::account::AccountId20,
                    pub destination: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferApproved {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "transfer_approved";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Touch {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Touch {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "touch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Refund {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub allow_burn: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Refund {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "refund";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMinBalance {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub min_balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMinBalance {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "set_min_balance";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TouchOther {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub who: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for TouchOther {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "touch_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RefundOther {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub who: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for RefundOther {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "refund_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Block {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub who: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for Block {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "block";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Issue a new class of fungible assets from a public origin."]
                #[doc = ""]
                #[doc = "This new asset class has no assets initially and its owner is the origin."]
                #[doc = ""]
                #[doc = "The origin must conform to the configured `CreateOrigin` and have sufficient funds free."]
                #[doc = ""]
                #[doc = "Funds of sender are reserved by `AssetDeposit`."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
                #[doc = "an existing asset."]
                #[doc = "- `admin`: The admin of this class of assets. The admin is the initial address of each"]
                #[doc = "member of the asset class's admin team."]
                #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                #[doc = ""]
                #[doc = "Emits `Created` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn create(
                    &self,
                    id: ::core::primitive::u128,
                    admin: runtime_types::account::AccountId20,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Create> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "create",
                        types::Create {
                            id,
                            admin,
                            min_balance,
                        },
                        [
                            174u8, 183u8, 0u8, 70u8, 93u8, 8u8, 123u8, 123u8, 144u8, 27u8, 239u8,
                            205u8, 73u8, 127u8, 178u8, 251u8, 97u8, 78u8, 236u8, 212u8, 196u8,
                            57u8, 12u8, 25u8, 117u8, 168u8, 160u8, 141u8, 248u8, 200u8, 21u8, 8u8,
                        ],
                    )
                }
                #[doc = "Issue a new class of fungible assets from a privileged origin."]
                #[doc = ""]
                #[doc = "This new asset class has no assets initially."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin`."]
                #[doc = ""]
                #[doc = "Unlike `create`, no funds are reserved."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
                #[doc = "an existing asset."]
                #[doc = "- `owner`: The owner of this class of assets. The owner has full superuser permissions"]
                #[doc = "over this asset, but may later change and configure the permissions using"]
                #[doc = "`transfer_ownership` and `set_team`."]
                #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                #[doc = ""]
                #[doc = "Emits `ForceCreated` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_create(
                    &self,
                    id: ::core::primitive::u128,
                    owner: runtime_types::account::AccountId20,
                    is_sufficient: ::core::primitive::bool,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceCreate> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "force_create",
                        types::ForceCreate {
                            id,
                            owner,
                            is_sufficient,
                            min_balance,
                        },
                        [
                            182u8, 78u8, 86u8, 61u8, 54u8, 67u8, 196u8, 218u8, 73u8, 168u8, 54u8,
                            172u8, 231u8, 134u8, 84u8, 118u8, 71u8, 210u8, 104u8, 66u8, 234u8,
                            18u8, 233u8, 9u8, 241u8, 188u8, 80u8, 76u8, 105u8, 255u8, 52u8, 120u8,
                        ],
                    )
                }
                #[doc = "Start the process of destroying a fungible asset class."]
                #[doc = ""]
                #[doc = "`start_destroy` is the first in a series of extrinsics that should be called, to allow"]
                #[doc = "destruction of an asset class."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                #[doc = "  asset."]
                #[doc = ""]
                #[doc = "The asset class must be frozen before calling `start_destroy`."]
                pub fn start_destroy(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::StartDestroy> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "start_destroy",
                        types::StartDestroy { id },
                        [
                            36u8, 72u8, 6u8, 145u8, 192u8, 32u8, 10u8, 242u8, 40u8, 2u8, 163u8,
                            102u8, 214u8, 89u8, 25u8, 174u8, 20u8, 151u8, 224u8, 238u8, 117u8,
                            94u8, 174u8, 58u8, 77u8, 73u8, 19u8, 15u8, 232u8, 60u8, 150u8, 1u8,
                        ],
                    )
                }
                #[doc = "Destroy all accounts associated with a given asset."]
                #[doc = ""]
                #[doc = "`destroy_accounts` should only be called after `start_destroy` has been called, and the"]
                #[doc = "asset is in a `Destroying` state."]
                #[doc = ""]
                #[doc = "Due to weight restrictions, this function may need to be called multiple times to fully"]
                #[doc = "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                #[doc = "  asset."]
                #[doc = ""]
                #[doc = "Each call emits the `Event::DestroyedAccounts` event."]
                pub fn destroy_accounts(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::DestroyAccounts> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "destroy_accounts",
                        types::DestroyAccounts { id },
                        [
                            195u8, 7u8, 198u8, 206u8, 127u8, 210u8, 166u8, 3u8, 39u8, 199u8, 24u8,
                            142u8, 239u8, 117u8, 217u8, 110u8, 125u8, 75u8, 89u8, 240u8, 180u8,
                            96u8, 72u8, 136u8, 36u8, 10u8, 34u8, 196u8, 112u8, 131u8, 238u8, 121u8,
                        ],
                    )
                }
                #[doc = "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit)."]
                #[doc = ""]
                #[doc = "`destroy_approvals` should only be called after `start_destroy` has been called, and the"]
                #[doc = "asset is in a `Destroying` state."]
                #[doc = ""]
                #[doc = "Due to weight restrictions, this function may need to be called multiple times to fully"]
                #[doc = "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                #[doc = "  asset."]
                #[doc = ""]
                #[doc = "Each call emits the `Event::DestroyedApprovals` event."]
                pub fn destroy_approvals(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::DestroyApprovals> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "destroy_approvals",
                        types::DestroyApprovals { id },
                        [
                            215u8, 174u8, 117u8, 99u8, 201u8, 118u8, 171u8, 136u8, 37u8, 121u8,
                            209u8, 53u8, 154u8, 45u8, 28u8, 201u8, 186u8, 120u8, 4u8, 63u8, 142u8,
                            222u8, 92u8, 245u8, 149u8, 219u8, 91u8, 186u8, 224u8, 173u8, 186u8,
                            236u8,
                        ],
                    )
                }
                #[doc = "Complete destroying asset and unreserve currency."]
                #[doc = ""]
                #[doc = "`finish_destroy` should only be called after `start_destroy` has been called, and the"]
                #[doc = "asset is in a `Destroying` state. All accounts or approvals should be destroyed before"]
                #[doc = "hand."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                #[doc = "  asset."]
                #[doc = ""]
                #[doc = "Each successful call emits the `Event::Destroyed` event."]
                pub fn finish_destroy(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::FinishDestroy> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "finish_destroy",
                        types::FinishDestroy { id },
                        [
                            235u8, 198u8, 160u8, 5u8, 223u8, 83u8, 17u8, 160u8, 183u8, 81u8, 61u8,
                            171u8, 23u8, 98u8, 39u8, 234u8, 65u8, 197u8, 193u8, 39u8, 175u8, 142u8,
                            138u8, 169u8, 148u8, 136u8, 152u8, 75u8, 21u8, 33u8, 159u8, 221u8,
                        ],
                    )
                }
                #[doc = "Mint assets of a particular class."]
                #[doc = ""]
                #[doc = "The origin must be Signed and the sender must be the Issuer of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount minted."]
                #[doc = "- `beneficiary`: The account to be credited with the minted assets."]
                #[doc = "- `amount`: The amount of the asset to be minted."]
                #[doc = ""]
                #[doc = "Emits `Issued` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."]
                pub fn mint(
                    &self,
                    id: ::core::primitive::u128,
                    beneficiary: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Mint> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "mint",
                        types::Mint {
                            id,
                            beneficiary,
                            amount,
                        },
                        [
                            179u8, 94u8, 220u8, 155u8, 18u8, 149u8, 183u8, 11u8, 67u8, 205u8,
                            175u8, 230u8, 98u8, 81u8, 36u8, 23u8, 181u8, 82u8, 242u8, 47u8, 155u8,
                            254u8, 224u8, 67u8, 191u8, 118u8, 115u8, 204u8, 70u8, 219u8, 202u8,
                            54u8,
                        ],
                    )
                }
                #[doc = "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Manager of the asset `id`."]
                #[doc = ""]
                #[doc = "Bails with `NoAccount` if the `who` is already dead."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount burned."]
                #[doc = "- `who`: The account to be debited from."]
                #[doc = "- `amount`: The maximum amount by which `who`'s balance should be reduced."]
                #[doc = ""]
                #[doc = "Emits `Burned` with the actual amount burned. If this takes the balance to below the"]
                #[doc = "minimum for the asset, then the amount burned is increased to take it to zero."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."]
                pub fn burn(
                    &self,
                    id: ::core::primitive::u128,
                    who: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Burn> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "burn",
                        types::Burn { id, who, amount },
                        [
                            149u8, 92u8, 155u8, 15u8, 5u8, 227u8, 131u8, 33u8, 54u8, 44u8, 198u8,
                            51u8, 93u8, 252u8, 108u8, 22u8, 72u8, 216u8, 7u8, 218u8, 247u8, 180u8,
                            248u8, 193u8, 91u8, 1u8, 168u8, 59u8, 2u8, 85u8, 81u8, 250u8,
                        ],
                    )
                }
                #[doc = "Move some assets from the sender account to another."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                #[doc = "- `target`: The account to be credited."]
                #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
                #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
                #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
                #[doc = "the minimum balance. Must be greater than zero."]
                #[doc = ""]
                #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                #[doc = "to zero."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
                #[doc = "`target`."]
                pub fn transfer(
                    &self,
                    id: ::core::primitive::u128,
                    target: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "transfer",
                        types::Transfer { id, target, amount },
                        [
                            226u8, 122u8, 201u8, 90u8, 60u8, 216u8, 124u8, 208u8, 205u8, 224u8,
                            57u8, 103u8, 121u8, 164u8, 244u8, 116u8, 23u8, 29u8, 16u8, 150u8, 2u8,
                            138u8, 131u8, 192u8, 62u8, 34u8, 60u8, 24u8, 31u8, 205u8, 229u8, 57u8,
                        ],
                    )
                }
                #[doc = "Move some assets from the sender account to another, keeping the sender account alive."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                #[doc = "- `target`: The account to be credited."]
                #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
                #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
                #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
                #[doc = "the minimum balance. Must be greater than zero."]
                #[doc = ""]
                #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                #[doc = "to zero."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
                #[doc = "`target`."]
                pub fn transfer_keep_alive(
                    &self,
                    id: ::core::primitive::u128,
                    target: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::TransferKeepAlive> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "transfer_keep_alive",
                        types::TransferKeepAlive { id, target, amount },
                        [
                            37u8, 184u8, 41u8, 235u8, 220u8, 175u8, 102u8, 111u8, 232u8, 69u8,
                            193u8, 6u8, 102u8, 118u8, 196u8, 7u8, 142u8, 196u8, 210u8, 161u8,
                            151u8, 148u8, 1u8, 249u8, 93u8, 77u8, 50u8, 105u8, 12u8, 5u8, 150u8,
                            152u8,
                        ],
                    )
                }
                #[doc = "Move some assets from one account to another."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                #[doc = "- `source`: The account to be debited."]
                #[doc = "- `dest`: The account to be credited."]
                #[doc = "- `amount`: The amount by which the `source`'s balance of assets should be reduced and"]
                #[doc = "`dest`'s balance increased. The amount actually transferred may be slightly greater in"]
                #[doc = "the case that the transfer would otherwise take the `source` balance above zero but"]
                #[doc = "below the minimum balance. Must be greater than zero."]
                #[doc = ""]
                #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                #[doc = "to zero."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of"]
                #[doc = "`dest`."]
                pub fn force_transfer(
                    &self,
                    id: ::core::primitive::u128,
                    source: runtime_types::account::AccountId20,
                    dest: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "force_transfer",
                        types::ForceTransfer {
                            id,
                            source,
                            dest,
                            amount,
                        },
                        [
                            8u8, 160u8, 221u8, 67u8, 206u8, 193u8, 218u8, 153u8, 132u8, 202u8,
                            164u8, 153u8, 172u8, 97u8, 255u8, 136u8, 155u8, 200u8, 212u8, 214u8,
                            75u8, 173u8, 229u8, 132u8, 50u8, 74u8, 72u8, 228u8, 205u8, 0u8, 38u8,
                            93u8,
                        ],
                    )
                }
                #[doc = "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`"]
                #[doc = "must already exist as an entry in `Account`s of the asset. If you want to freeze an"]
                #[doc = "account that does not have an entry, use `touch_other` first."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be frozen."]
                #[doc = "- `who`: The account to be frozen."]
                #[doc = ""]
                #[doc = "Emits `Frozen`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn freeze(
                    &self,
                    id: ::core::primitive::u128,
                    who: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::Freeze> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "freeze",
                        types::Freeze { id, who },
                        [
                            234u8, 178u8, 162u8, 190u8, 187u8, 133u8, 73u8, 101u8, 143u8, 54u8,
                            71u8, 23u8, 201u8, 84u8, 198u8, 196u8, 197u8, 202u8, 109u8, 141u8,
                            185u8, 232u8, 226u8, 59u8, 110u8, 28u8, 172u8, 153u8, 189u8, 236u8,
                            160u8, 57u8,
                        ],
                    )
                }
                #[doc = "Allow unprivileged transfers to and from an account again."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be frozen."]
                #[doc = "- `who`: The account to be unfrozen."]
                #[doc = ""]
                #[doc = "Emits `Thawed`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn thaw(
                    &self,
                    id: ::core::primitive::u128,
                    who: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::Thaw> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "thaw",
                        types::Thaw { id, who },
                        [
                            247u8, 167u8, 86u8, 50u8, 254u8, 204u8, 56u8, 174u8, 163u8, 166u8,
                            233u8, 249u8, 103u8, 99u8, 224u8, 195u8, 19u8, 175u8, 42u8, 240u8,
                            25u8, 115u8, 62u8, 39u8, 231u8, 10u8, 114u8, 59u8, 164u8, 201u8, 236u8,
                            41u8,
                        ],
                    )
                }
                #[doc = "Disallow further unprivileged transfers for the asset class."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be frozen."]
                #[doc = ""]
                #[doc = "Emits `Frozen`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn freeze_asset(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::FreezeAsset> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "freeze_asset",
                        types::FreezeAsset { id },
                        [
                            189u8, 253u8, 85u8, 111u8, 106u8, 34u8, 124u8, 108u8, 39u8, 240u8,
                            26u8, 83u8, 0u8, 110u8, 218u8, 93u8, 216u8, 82u8, 14u8, 5u8, 241u8,
                            172u8, 15u8, 250u8, 220u8, 101u8, 196u8, 18u8, 214u8, 208u8, 149u8,
                            148u8,
                        ],
                    )
                }
                #[doc = "Allow unprivileged transfers for the asset again."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be thawed."]
                #[doc = ""]
                #[doc = "Emits `Thawed`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn thaw_asset(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ThawAsset> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "thaw_asset",
                        types::ThawAsset { id },
                        [
                            15u8, 56u8, 25u8, 188u8, 111u8, 220u8, 108u8, 41u8, 232u8, 254u8, 58u8,
                            202u8, 249u8, 240u8, 2u8, 45u8, 128u8, 89u8, 116u8, 120u8, 24u8, 99u8,
                            88u8, 99u8, 97u8, 254u8, 166u8, 174u8, 103u8, 23u8, 42u8, 74u8,
                        ],
                    )
                }
                #[doc = "Change the Owner of an asset."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `owner`: The new Owner of this asset."]
                #[doc = ""]
                #[doc = "Emits `OwnerChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn transfer_ownership(
                    &self,
                    id: ::core::primitive::u128,
                    owner: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::TransferOwnership> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "transfer_ownership",
                        types::TransferOwnership { id, owner },
                        [
                            210u8, 109u8, 67u8, 255u8, 45u8, 232u8, 243u8, 114u8, 107u8, 166u8,
                            209u8, 232u8, 77u8, 94u8, 119u8, 133u8, 9u8, 39u8, 183u8, 227u8, 244u8,
                            46u8, 147u8, 10u8, 138u8, 235u8, 186u8, 2u8, 106u8, 14u8, 126u8, 251u8,
                        ],
                    )
                }
                #[doc = "Change the Issuer, Admin and Freezer of an asset."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be frozen."]
                #[doc = "- `issuer`: The new Issuer of this asset."]
                #[doc = "- `admin`: The new Admin of this asset."]
                #[doc = "- `freezer`: The new Freezer of this asset."]
                #[doc = ""]
                #[doc = "Emits `TeamChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn set_team(
                    &self,
                    id: ::core::primitive::u128,
                    issuer: runtime_types::account::AccountId20,
                    admin: runtime_types::account::AccountId20,
                    freezer: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::SetTeam> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "set_team",
                        types::SetTeam {
                            id,
                            issuer,
                            admin,
                            freezer,
                        },
                        [
                            172u8, 175u8, 179u8, 252u8, 234u8, 249u8, 4u8, 39u8, 241u8, 15u8, 37u8,
                            0u8, 123u8, 129u8, 79u8, 110u8, 139u8, 191u8, 172u8, 177u8, 83u8,
                            205u8, 13u8, 113u8, 254u8, 203u8, 123u8, 118u8, 102u8, 90u8, 119u8,
                            38u8,
                        ],
                    )
                }
                #[doc = "Set the metadata for an asset."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                #[doc = ""]
                #[doc = "Funds of sender are reserved according to the formula:"]
                #[doc = "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into"]
                #[doc = "account any already reserved funds."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to update."]
                #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
                #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
                #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
                #[doc = ""]
                #[doc = "Emits `MetadataSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn set_metadata(
                    &self,
                    id: ::core::primitive::u128,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    symbol: ::std::vec::Vec<::core::primitive::u8>,
                    decimals: ::core::primitive::u8,
                ) -> ::subxt::tx::Payload<types::SetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "set_metadata",
                        types::SetMetadata {
                            id,
                            name,
                            symbol,
                            decimals,
                        },
                        [
                            53u8, 40u8, 19u8, 104u8, 202u8, 184u8, 183u8, 250u8, 2u8, 60u8, 232u8,
                            140u8, 159u8, 97u8, 246u8, 139u8, 230u8, 111u8, 186u8, 159u8, 170u8,
                            192u8, 205u8, 186u8, 96u8, 25u8, 89u8, 75u8, 230u8, 247u8, 181u8,
                            211u8,
                        ],
                    )
                }
                #[doc = "Clear the metadata for an asset."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                #[doc = ""]
                #[doc = "Any deposit is freed for the asset owner."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to clear."]
                #[doc = ""]
                #[doc = "Emits `MetadataCleared`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn clear_metadata(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ClearMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "clear_metadata",
                        types::ClearMetadata { id },
                        [
                            137u8, 235u8, 66u8, 91u8, 5u8, 130u8, 150u8, 242u8, 209u8, 166u8, 32u8,
                            157u8, 49u8, 158u8, 49u8, 199u8, 209u8, 107u8, 21u8, 125u8, 222u8,
                            19u8, 41u8, 120u8, 207u8, 168u8, 5u8, 177u8, 171u8, 9u8, 176u8, 238u8,
                        ],
                    )
                }
                #[doc = "Force the metadata for an asset to some value."]
                #[doc = ""]
                #[doc = "Origin must be ForceOrigin."]
                #[doc = ""]
                #[doc = "Any deposit is left alone."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to update."]
                #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
                #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
                #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
                #[doc = ""]
                #[doc = "Emits `MetadataSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."]
                pub fn force_set_metadata(
                    &self,
                    id: ::core::primitive::u128,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    symbol: ::std::vec::Vec<::core::primitive::u8>,
                    decimals: ::core::primitive::u8,
                    is_frozen: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::ForceSetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "force_set_metadata",
                        types::ForceSetMetadata {
                            id,
                            name,
                            symbol,
                            decimals,
                            is_frozen,
                        },
                        [
                            177u8, 45u8, 247u8, 110u8, 214u8, 132u8, 130u8, 86u8, 46u8, 201u8,
                            169u8, 19u8, 46u8, 89u8, 227u8, 114u8, 195u8, 46u8, 135u8, 216u8,
                            202u8, 78u8, 182u8, 114u8, 126u8, 71u8, 34u8, 13u8, 48u8, 19u8, 99u8,
                            192u8,
                        ],
                    )
                }
                #[doc = "Clear the metadata for an asset."]
                #[doc = ""]
                #[doc = "Origin must be ForceOrigin."]
                #[doc = ""]
                #[doc = "Any deposit is returned."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to clear."]
                #[doc = ""]
                #[doc = "Emits `MetadataCleared`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_clear_metadata(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceClearMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "force_clear_metadata",
                        types::ForceClearMetadata { id },
                        [
                            214u8, 13u8, 163u8, 168u8, 249u8, 152u8, 53u8, 201u8, 218u8, 161u8,
                            23u8, 187u8, 48u8, 132u8, 66u8, 172u8, 118u8, 76u8, 229u8, 139u8,
                            234u8, 64u8, 28u8, 86u8, 91u8, 155u8, 38u8, 136u8, 141u8, 136u8, 43u8,
                            150u8,
                        ],
                    )
                }
                #[doc = "Alter the attributes of a given asset."]
                #[doc = ""]
                #[doc = "Origin must be `ForceOrigin`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `owner`: The new Owner of this asset."]
                #[doc = "- `issuer`: The new Issuer of this asset."]
                #[doc = "- `admin`: The new Admin of this asset."]
                #[doc = "- `freezer`: The new Freezer of this asset."]
                #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                #[doc = "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient"]
                #[doc = "value to account for the state bloat associated with its balance storage. If set to"]
                #[doc = "`true`, then non-zero balances may be stored without a `consumer` reference (and thus"]
                #[doc = "an ED in the Balances pallet or whatever else is used to control user-account state"]
                #[doc = "growth)."]
                #[doc = "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin"]
                #[doc = "instructions."]
                #[doc = ""]
                #[doc = "Emits `AssetStatusChanged` with the identity of the asset."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_asset_status(
                    &self,
                    id: ::core::primitive::u128,
                    owner: runtime_types::account::AccountId20,
                    issuer: runtime_types::account::AccountId20,
                    admin: runtime_types::account::AccountId20,
                    freezer: runtime_types::account::AccountId20,
                    min_balance: ::core::primitive::u128,
                    is_sufficient: ::core::primitive::bool,
                    is_frozen: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::ForceAssetStatus> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "force_asset_status",
                        types::ForceAssetStatus {
                            id,
                            owner,
                            issuer,
                            admin,
                            freezer,
                            min_balance,
                            is_sufficient,
                            is_frozen,
                        },
                        [
                            123u8, 18u8, 105u8, 243u8, 124u8, 37u8, 135u8, 108u8, 150u8, 173u8,
                            46u8, 49u8, 109u8, 255u8, 230u8, 169u8, 158u8, 180u8, 122u8, 34u8,
                            199u8, 14u8, 132u8, 189u8, 49u8, 199u8, 132u8, 164u8, 173u8, 237u8,
                            109u8, 177u8,
                        ],
                    )
                }
                #[doc = "Approve an amount of asset for transfer by a delegated third-party account."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = ""]
                #[doc = "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account"]
                #[doc = "for the purpose of holding the approval. If some non-zero amount of assets is already"]
                #[doc = "approved from signing account to `delegate`, then it is topped up or unreserved to"]
                #[doc = "meet the right value."]
                #[doc = ""]
                #[doc = "NOTE: The signing account does not need to own `amount` of assets at the point of"]
                #[doc = "making this call."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `delegate`: The account to delegate permission to transfer asset."]
                #[doc = "- `amount`: The amount of asset that may be transferred by `delegate`. If there is"]
                #[doc = "already an approval in place, then this acts additively."]
                #[doc = ""]
                #[doc = "Emits `ApprovedTransfer` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn approve_transfer(
                    &self,
                    id: ::core::primitive::u128,
                    delegate: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ApproveTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "approve_transfer",
                        types::ApproveTransfer {
                            id,
                            delegate,
                            amount,
                        },
                        [
                            143u8, 73u8, 247u8, 236u8, 152u8, 148u8, 83u8, 90u8, 84u8, 214u8,
                            125u8, 46u8, 11u8, 252u8, 71u8, 73u8, 35u8, 108u8, 114u8, 74u8, 102u8,
                            69u8, 148u8, 68u8, 120u8, 91u8, 92u8, 128u8, 222u8, 238u8, 63u8, 181u8,
                        ],
                    )
                }
                #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
                #[doc = ""]
                #[doc = "Origin must be Signed and there must be an approval in place between signer and"]
                #[doc = "`delegate`."]
                #[doc = ""]
                #[doc = "Unreserves any deposit previously reserved by `approve_transfer` for the approval."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `delegate`: The account delegated permission to transfer asset."]
                #[doc = ""]
                #[doc = "Emits `ApprovalCancelled` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn cancel_approval(
                    &self,
                    id: ::core::primitive::u128,
                    delegate: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::CancelApproval> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "cancel_approval",
                        types::CancelApproval { id, delegate },
                        [
                            74u8, 95u8, 200u8, 63u8, 33u8, 253u8, 196u8, 115u8, 216u8, 45u8, 76u8,
                            7u8, 239u8, 48u8, 223u8, 110u8, 113u8, 94u8, 85u8, 151u8, 33u8, 239u8,
                            99u8, 103u8, 16u8, 159u8, 147u8, 148u8, 138u8, 167u8, 224u8, 157u8,
                        ],
                    )
                }
                #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
                #[doc = ""]
                #[doc = "Origin must be either ForceOrigin or Signed origin with the signer being the Admin"]
                #[doc = "account of the asset `id`."]
                #[doc = ""]
                #[doc = "Unreserves any deposit previously reserved by `approve_transfer` for the approval."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `delegate`: The account delegated permission to transfer asset."]
                #[doc = ""]
                #[doc = "Emits `ApprovalCancelled` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_cancel_approval(
                    &self,
                    id: ::core::primitive::u128,
                    owner: runtime_types::account::AccountId20,
                    delegate: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::ForceCancelApproval> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "force_cancel_approval",
                        types::ForceCancelApproval {
                            id,
                            owner,
                            delegate,
                        },
                        [
                            102u8, 167u8, 183u8, 235u8, 248u8, 78u8, 81u8, 231u8, 21u8, 195u8,
                            224u8, 51u8, 247u8, 195u8, 214u8, 132u8, 163u8, 245u8, 44u8, 33u8,
                            29u8, 97u8, 49u8, 95u8, 89u8, 138u8, 159u8, 166u8, 58u8, 173u8, 229u8,
                            206u8,
                        ],
                    )
                }
                #[doc = "Transfer some asset balance from a previously delegated account to some third-party"]
                #[doc = "account."]
                #[doc = ""]
                #[doc = "Origin must be Signed and there must be an approval in place by the `owner` to the"]
                #[doc = "signer."]
                #[doc = ""]
                #[doc = "If the entire amount approved for transfer is transferred, then any deposit previously"]
                #[doc = "reserved by `approve_transfer` is unreserved."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `owner`: The account which previously approved for a transfer of at least `amount` and"]
                #[doc = "from which the asset balance will be withdrawn."]
                #[doc = "- `destination`: The account to which the asset balance of `amount` will be transferred."]
                #[doc = "- `amount`: The amount of assets to transfer."]
                #[doc = ""]
                #[doc = "Emits `TransferredApproved` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn transfer_approved(
                    &self,
                    id: ::core::primitive::u128,
                    owner: runtime_types::account::AccountId20,
                    destination: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::TransferApproved> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "transfer_approved",
                        types::TransferApproved {
                            id,
                            owner,
                            destination,
                            amount,
                        },
                        [
                            127u8, 78u8, 117u8, 210u8, 253u8, 81u8, 27u8, 247u8, 214u8, 208u8,
                            40u8, 185u8, 4u8, 140u8, 141u8, 3u8, 253u8, 211u8, 105u8, 93u8, 222u8,
                            233u8, 158u8, 151u8, 240u8, 81u8, 69u8, 208u8, 247u8, 165u8, 94u8,
                            211u8,
                        ],
                    )
                }
                #[doc = "Create an asset account for non-provider assets."]
                #[doc = ""]
                #[doc = "A deposit will be taken from the signer account."]
                #[doc = ""]
                #[doc = "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit"]
                #[doc = "  to be taken."]
                #[doc = "- `id`: The identifier of the asset for the account to be created."]
                #[doc = ""]
                #[doc = "Emits `Touched` event when successful."]
                pub fn touch(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Touch> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "touch",
                        types::Touch { id },
                        [
                            93u8, 110u8, 255u8, 67u8, 63u8, 27u8, 179u8, 188u8, 189u8, 16u8, 207u8,
                            50u8, 23u8, 89u8, 125u8, 220u8, 81u8, 173u8, 33u8, 242u8, 231u8, 211u8,
                            212u8, 33u8, 135u8, 239u8, 198u8, 58u8, 24u8, 205u8, 236u8, 178u8,
                        ],
                    )
                }
                #[doc = "Return the deposit (if any) of an asset account or a consumer reference (if any) of an"]
                #[doc = "account."]
                #[doc = ""]
                #[doc = "The origin must be Signed."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset for which the caller would like the deposit"]
                #[doc = "  refunded."]
                #[doc = "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund."]
                #[doc = ""]
                #[doc = "Emits `Refunded` event when successful."]
                pub fn refund(
                    &self,
                    id: ::core::primitive::u128,
                    allow_burn: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Refund> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "refund",
                        types::Refund { id, allow_burn },
                        [
                            212u8, 171u8, 194u8, 110u8, 144u8, 125u8, 9u8, 224u8, 173u8, 44u8,
                            146u8, 30u8, 7u8, 51u8, 82u8, 239u8, 18u8, 170u8, 66u8, 201u8, 148u8,
                            189u8, 210u8, 218u8, 98u8, 166u8, 128u8, 77u8, 136u8, 151u8, 114u8,
                            237u8,
                        ],
                    )
                }
                #[doc = "Sets the minimum balance of an asset."]
                #[doc = ""]
                #[doc = "Only works if there aren't any accounts that are holding the asset or if"]
                #[doc = "the new value of `min_balance` is less than the old one."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender has to be the Owner of the"]
                #[doc = "asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `min_balance`: The new value of `min_balance`."]
                #[doc = ""]
                #[doc = "Emits `AssetMinBalanceChanged` event when successful."]
                pub fn set_min_balance(
                    &self,
                    id: ::core::primitive::u128,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::SetMinBalance> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "set_min_balance",
                        types::SetMinBalance { id, min_balance },
                        [
                            237u8, 126u8, 65u8, 131u8, 29u8, 64u8, 78u8, 86u8, 151u8, 18u8, 248u8,
                            45u8, 25u8, 48u8, 219u8, 17u8, 211u8, 81u8, 53u8, 5u8, 17u8, 214u8,
                            86u8, 143u8, 79u8, 200u8, 88u8, 147u8, 150u8, 103u8, 228u8, 253u8,
                        ],
                    )
                }
                #[doc = "Create an asset account for `who`."]
                #[doc = ""]
                #[doc = "A deposit will be taken from the signer account."]
                #[doc = ""]
                #[doc = "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account"]
                #[doc = "  must have sufficient funds for a deposit to be taken."]
                #[doc = "- `id`: The identifier of the asset for the account to be created."]
                #[doc = "- `who`: The account to be created."]
                #[doc = ""]
                #[doc = "Emits `Touched` event when successful."]
                pub fn touch_other(
                    &self,
                    id: ::core::primitive::u128,
                    who: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::TouchOther> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "touch_other",
                        types::TouchOther { id, who },
                        [
                            223u8, 183u8, 91u8, 128u8, 204u8, 132u8, 120u8, 58u8, 37u8, 134u8, 1u8,
                            244u8, 151u8, 144u8, 234u8, 112u8, 236u8, 72u8, 153u8, 41u8, 235u8,
                            46u8, 19u8, 7u8, 180u8, 237u8, 147u8, 65u8, 122u8, 210u8, 95u8, 223u8,
                        ],
                    )
                }
                #[doc = "Return the deposit (if any) of a target asset account. Useful if you are the depositor."]
                #[doc = ""]
                #[doc = "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In"]
                #[doc = "order to burn a non-zero balance of the asset, the caller must be the account and should"]
                #[doc = "use `refund`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset for the account holding a deposit."]
                #[doc = "- `who`: The account to refund."]
                #[doc = ""]
                #[doc = "Emits `Refunded` event when successful."]
                pub fn refund_other(
                    &self,
                    id: ::core::primitive::u128,
                    who: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::RefundOther> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "refund_other",
                        types::RefundOther { id, who },
                        [
                            160u8, 167u8, 195u8, 10u8, 50u8, 180u8, 160u8, 233u8, 209u8, 140u8,
                            69u8, 237u8, 28u8, 95u8, 47u8, 174u8, 116u8, 36u8, 17u8, 122u8, 102u8,
                            231u8, 180u8, 215u8, 27u8, 165u8, 155u8, 62u8, 38u8, 235u8, 89u8,
                            201u8,
                        ],
                    )
                }
                #[doc = "Disallow further unprivileged transfers of an asset `id` to and from an account `who`."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the account's asset."]
                #[doc = "- `who`: The account to be unblocked."]
                #[doc = ""]
                #[doc = "Emits `Blocked`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn block(
                    &self,
                    id: ::core::primitive::u128,
                    who: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::Block> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "block",
                        types::Block { id, who },
                        [
                            131u8, 220u8, 231u8, 90u8, 100u8, 3u8, 191u8, 149u8, 116u8, 73u8,
                            176u8, 103u8, 72u8, 238u8, 76u8, 243u8, 211u8, 246u8, 167u8, 119u8,
                            89u8, 33u8, 206u8, 161u8, 89u8, 192u8, 222u8, 220u8, 245u8, 208u8,
                            171u8, 69u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_assets::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset class was created."]
            pub struct Created {
                pub asset_id: ::core::primitive::u128,
                pub creator: runtime_types::account::AccountId20,
                pub owner: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Created {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets were issued."]
            pub struct Issued {
                pub asset_id: ::core::primitive::u128,
                pub owner: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Issued {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets were transferred."]
            pub struct Transferred {
                pub asset_id: ::core::primitive::u128,
                pub from: runtime_types::account::AccountId20,
                pub to: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Transferred {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Transferred";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets were destroyed."]
            pub struct Burned {
                pub asset_id: ::core::primitive::u128,
                pub owner: runtime_types::account::AccountId20,
                pub balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Burned {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The management team changed."]
            pub struct TeamChanged {
                pub asset_id: ::core::primitive::u128,
                pub issuer: runtime_types::account::AccountId20,
                pub admin: runtime_types::account::AccountId20,
                pub freezer: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for TeamChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "TeamChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The owner changed."]
            pub struct OwnerChanged {
                pub asset_id: ::core::primitive::u128,
                pub owner: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for OwnerChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "OwnerChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was frozen."]
            pub struct Frozen {
                pub asset_id: ::core::primitive::u128,
                pub who: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Frozen {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Frozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was thawed."]
            pub struct Thawed {
                pub asset_id: ::core::primitive::u128,
                pub who: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Thawed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Thawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset `asset_id` was frozen."]
            pub struct AssetFrozen {
                pub asset_id: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for AssetFrozen {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetFrozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset `asset_id` was thawed."]
            pub struct AssetThawed {
                pub asset_id: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for AssetThawed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetThawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Accounts were destroyed for given asset."]
            pub struct AccountsDestroyed {
                pub asset_id: ::core::primitive::u128,
                pub accounts_destroyed: ::core::primitive::u32,
                pub accounts_remaining: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AccountsDestroyed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AccountsDestroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Approvals were destroyed for given asset."]
            pub struct ApprovalsDestroyed {
                pub asset_id: ::core::primitive::u128,
                pub approvals_destroyed: ::core::primitive::u32,
                pub approvals_remaining: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ApprovalsDestroyed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ApprovalsDestroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An asset class is in the process of being destroyed."]
            pub struct DestructionStarted {
                pub asset_id: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DestructionStarted {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "DestructionStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An asset class was destroyed."]
            pub struct Destroyed {
                pub asset_id: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Destroyed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Destroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset class was force-created."]
            pub struct ForceCreated {
                pub asset_id: ::core::primitive::u128,
                pub owner: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for ForceCreated {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ForceCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New metadata has been set for an asset."]
            pub struct MetadataSet {
                pub asset_id: ::core::primitive::u128,
                pub name: ::std::vec::Vec<::core::primitive::u8>,
                pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                pub decimals: ::core::primitive::u8,
                pub is_frozen: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata has been cleared for an asset."]
            pub struct MetadataCleared {
                pub asset_id: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for MetadataCleared {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "MetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "(Additional) funds have been approved for transfer to a destination account."]
            pub struct ApprovedTransfer {
                pub asset_id: ::core::primitive::u128,
                pub source: runtime_types::account::AccountId20,
                pub delegate: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for ApprovedTransfer {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ApprovedTransfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An approval for account `delegate` was cancelled by `owner`."]
            pub struct ApprovalCancelled {
                pub asset_id: ::core::primitive::u128,
                pub owner: runtime_types::account::AccountId20,
                pub delegate: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for ApprovalCancelled {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ApprovalCancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
            #[doc = "the approved `delegate`."]
            pub struct TransferredApproved {
                pub asset_id: ::core::primitive::u128,
                pub owner: runtime_types::account::AccountId20,
                pub delegate: runtime_types::account::AccountId20,
                pub destination: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TransferredApproved {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "TransferredApproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An asset has had its attributes changed by the `Force` origin."]
            pub struct AssetStatusChanged {
                pub asset_id: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for AssetStatusChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetStatusChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The min_balance of an asset has been updated by the asset owner."]
            pub struct AssetMinBalanceChanged {
                pub asset_id: ::core::primitive::u128,
                pub new_min_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for AssetMinBalanceChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetMinBalanceChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was created with a deposit from `depositor`."]
            pub struct Touched {
                pub asset_id: ::core::primitive::u128,
                pub who: runtime_types::account::AccountId20,
                pub depositor: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Touched {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Touched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was blocked."]
            pub struct Blocked {
                pub asset_id: ::core::primitive::u128,
                pub who: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Blocked {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Blocked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Details of an asset."]
                pub fn asset(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetDetails<
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Asset",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            0u8, 255u8, 133u8, 57u8, 64u8, 140u8, 84u8, 58u8, 240u8, 153u8, 62u8,
                            191u8, 124u8, 116u8, 12u8, 185u8, 115u8, 244u8, 237u8, 77u8, 20u8,
                            78u8, 153u8, 222u8, 8u8, 98u8, 190u8, 99u8, 95u8, 144u8, 201u8, 118u8,
                        ],
                    )
                }
                #[doc = " Details of an asset."]
                pub fn asset_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetDetails<
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Asset",
                        Vec::new(),
                        [
                            0u8, 255u8, 133u8, 57u8, 64u8, 140u8, 84u8, 58u8, 240u8, 153u8, 62u8,
                            191u8, 124u8, 116u8, 12u8, 185u8, 115u8, 244u8, 237u8, 77u8, 20u8,
                            78u8, 153u8, 222u8, 8u8, 98u8, 190u8, 99u8, 95u8, 144u8, 201u8, 118u8,
                        ],
                    )
                }
                #[doc = " The holdings of a specific account for a specific asset."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                    _1: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetAccount<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        (),
                        runtime_types::account::AccountId20,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Account",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            155u8, 249u8, 218u8, 155u8, 65u8, 235u8, 32u8, 249u8, 96u8, 16u8,
                            167u8, 217u8, 5u8, 78u8, 96u8, 88u8, 197u8, 64u8, 253u8, 26u8, 251u8,
                            47u8, 241u8, 236u8, 174u8, 247u8, 37u8, 169u8, 88u8, 245u8, 229u8,
                            175u8,
                        ],
                    )
                }
                #[doc = " The holdings of a specific account for a specific asset."]
                pub fn account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetAccount<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        (),
                        runtime_types::account::AccountId20,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Account",
                        Vec::new(),
                        [
                            155u8, 249u8, 218u8, 155u8, 65u8, 235u8, 32u8, 249u8, 96u8, 16u8,
                            167u8, 217u8, 5u8, 78u8, 96u8, 88u8, 197u8, 64u8, 253u8, 26u8, 251u8,
                            47u8, 241u8, 236u8, 174u8, 247u8, 37u8, 169u8, 88u8, 245u8, 229u8,
                            175u8,
                        ],
                    )
                }
                #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
                #[doc = " is the amount of `T::Currency` reserved for storing this."]
                #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]
                pub fn approvals(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                    _1: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                    _2: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::Approval<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Approvals",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
                        ],
                        [
                            6u8, 182u8, 21u8, 189u8, 182u8, 11u8, 175u8, 168u8, 46u8, 165u8, 75u8,
                            65u8, 130u8, 167u8, 96u8, 47u8, 80u8, 134u8, 56u8, 152u8, 69u8, 49u8,
                            137u8, 126u8, 56u8, 43u8, 201u8, 38u8, 26u8, 114u8, 66u8, 1u8,
                        ],
                    )
                }
                #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
                #[doc = " is the amount of `T::Currency` reserved for storing this."]
                #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]
                pub fn approvals_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::Approval<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Approvals",
                        Vec::new(),
                        [
                            6u8, 182u8, 21u8, 189u8, 182u8, 11u8, 175u8, 168u8, 46u8, 165u8, 75u8,
                            65u8, 130u8, 167u8, 96u8, 47u8, 80u8, 134u8, 56u8, 152u8, 69u8, 49u8,
                            137u8, 126u8, 56u8, 43u8, 201u8, 38u8, 26u8, 114u8, 66u8, 1u8,
                        ],
                    )
                }
                #[doc = " Metadata of an asset."]
                pub fn metadata(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetMetadata<
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Metadata",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            9u8, 154u8, 67u8, 209u8, 73u8, 219u8, 203u8, 105u8, 197u8, 101u8,
                            174u8, 94u8, 37u8, 239u8, 121u8, 52u8, 186u8, 127u8, 29u8, 182u8, 32u8,
                            21u8, 49u8, 140u8, 135u8, 144u8, 231u8, 73u8, 33u8, 158u8, 27u8, 241u8,
                        ],
                    )
                }
                #[doc = " Metadata of an asset."]
                pub fn metadata_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetMetadata<
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Metadata",
                        Vec::new(),
                        [
                            9u8, 154u8, 67u8, 209u8, 73u8, 219u8, 203u8, 105u8, 197u8, 101u8,
                            174u8, 94u8, 37u8, 239u8, 121u8, 52u8, 186u8, 127u8, 29u8, 182u8, 32u8,
                            21u8, 49u8, 140u8, 135u8, 144u8, 231u8, 73u8, 33u8, 158u8, 27u8, 241u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call."]
                #[doc = ""]
                #[doc = " Must be configured to result in a weight that makes each call fit in a block."]
                pub fn remove_items_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "RemoveItemsLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved for an asset."]
                pub fn asset_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "AssetDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of funds that must be reserved for a non-provider asset account to be"]
                #[doc = " maintained."]
                pub fn asset_account_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "AssetAccountDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved when adding metadata to your asset."]
                pub fn metadata_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "MetadataDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The additional funds that must be reserved for the number of bytes you store in your"]
                #[doc = " metadata."]
                pub fn metadata_deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "MetadataDepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of funds that must be reserved when creating a new approval."]
                pub fn approval_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "ApprovalDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a name or symbol stored on-chain."]
                pub fn string_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "StringLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod x_tokens {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::orml_xtokens::module::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::orml_xtokens::module::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    pub currency_id: runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                    pub amount: ::core::primitive::u128,
                    pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "XTokens";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferMultiasset {
                    pub asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                    pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferMultiasset {
                    const PALLET: &'static str = "XTokens";
                    const CALL: &'static str = "transfer_multiasset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferWithFee {
                    pub currency_id: runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                    pub amount: ::core::primitive::u128,
                    pub fee: ::core::primitive::u128,
                    pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferWithFee {
                    const PALLET: &'static str = "XTokens";
                    const CALL: &'static str = "transfer_with_fee";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferMultiassetWithFee {
                    pub asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                    pub fee: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                    pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferMultiassetWithFee {
                    const PALLET: &'static str = "XTokens";
                    const CALL: &'static str = "transfer_multiasset_with_fee";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferMulticurrencies {
                    pub currencies: ::std::vec::Vec<(
                        runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                        ::core::primitive::u128,
                    )>,
                    pub fee_item: ::core::primitive::u32,
                    pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferMulticurrencies {
                    const PALLET: &'static str = "XTokens";
                    const CALL: &'static str = "transfer_multicurrencies";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferMultiassets {
                    pub assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                    pub fee_item: ::core::primitive::u32,
                    pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferMultiassets {
                    const PALLET: &'static str = "XTokens";
                    const CALL: &'static str = "transfer_multiassets";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Transfer native currencies."]
                #[doc = ""]
                #[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
                #[doc = "chain, and it would be charged from the transferred assets. If set"]
                #[doc = "below requirements, the execution may fail and assets wouldn't be"]
                #[doc = "received."]
                #[doc = ""]
                #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                #[doc = "by the network, and if the receiving chain would handle"]
                #[doc = "messages correctly."]
                pub fn transfer(
                    &self,
                    currency_id: runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                    amount: ::core::primitive::u128,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "XTokens",
                        "transfer",
                        types::Transfer {
                            currency_id,
                            amount,
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight_limit,
                        },
                        [
                            124u8, 254u8, 38u8, 132u8, 171u8, 173u8, 99u8, 141u8, 110u8, 144u8,
                            84u8, 12u8, 61u8, 127u8, 47u8, 12u8, 111u8, 65u8, 155u8, 102u8, 78u8,
                            239u8, 236u8, 222u8, 186u8, 116u8, 216u8, 112u8, 143u8, 221u8, 109u8,
                            79u8,
                        ],
                    )
                }
                #[doc = "Transfer `MultiAsset`."]
                #[doc = ""]
                #[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
                #[doc = "chain, and it would be charged from the transferred assets. If set"]
                #[doc = "below requirements, the execution may fail and assets wouldn't be"]
                #[doc = "received."]
                #[doc = ""]
                #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                #[doc = "by the network, and if the receiving chain would handle"]
                #[doc = "messages correctly."]
                pub fn transfer_multiasset(
                    &self,
                    asset: runtime_types::xcm::VersionedMultiAsset,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                ) -> ::subxt::tx::Payload<types::TransferMultiasset> {
                    ::subxt::tx::Payload::new_static(
                        "XTokens",
                        "transfer_multiasset",
                        types::TransferMultiasset {
                            asset: ::std::boxed::Box::new(asset),
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight_limit,
                        },
                        [
                            41u8, 136u8, 12u8, 95u8, 87u8, 89u8, 79u8, 94u8, 22u8, 194u8, 186u8,
                            131u8, 93u8, 130u8, 219u8, 51u8, 45u8, 231u8, 203u8, 58u8, 230u8, 43u8,
                            165u8, 117u8, 141u8, 64u8, 99u8, 128u8, 62u8, 30u8, 122u8, 27u8,
                        ],
                    )
                }
                #[doc = "Transfer native currencies specifying the fee and amount as"]
                #[doc = "separate."]
                #[doc = ""]
                #[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
                #[doc = "chain, and it would be charged from the transferred assets. If set"]
                #[doc = "below requirements, the execution may fail and assets wouldn't be"]
                #[doc = "received."]
                #[doc = ""]
                #[doc = "`fee` is the amount to be spent to pay for execution in destination"]
                #[doc = "chain. Both fee and amount will be subtracted form the callers"]
                #[doc = "balance."]
                #[doc = ""]
                #[doc = "If `fee` is not high enough to cover for the execution costs in the"]
                #[doc = "destination chain, then the assets will be trapped in the"]
                #[doc = "destination chain"]
                #[doc = ""]
                #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                #[doc = "by the network, and if the receiving chain would handle"]
                #[doc = "messages correctly."]
                pub fn transfer_with_fee(
                    &self,
                    currency_id: runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                    amount: ::core::primitive::u128,
                    fee: ::core::primitive::u128,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                ) -> ::subxt::tx::Payload<types::TransferWithFee> {
                    ::subxt::tx::Payload::new_static(
                        "XTokens",
                        "transfer_with_fee",
                        types::TransferWithFee {
                            currency_id,
                            amount,
                            fee,
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight_limit,
                        },
                        [
                            10u8, 42u8, 197u8, 106u8, 154u8, 80u8, 113u8, 68u8, 139u8, 208u8, 11u8,
                            72u8, 211u8, 142u8, 218u8, 198u8, 214u8, 207u8, 245u8, 41u8, 24u8,
                            63u8, 45u8, 134u8, 88u8, 200u8, 179u8, 160u8, 2u8, 214u8, 237u8, 236u8,
                        ],
                    )
                }
                #[doc = "Transfer `MultiAsset` specifying the fee and amount as separate."]
                #[doc = ""]
                #[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
                #[doc = "chain, and it would be charged from the transferred assets. If set"]
                #[doc = "below requirements, the execution may fail and assets wouldn't be"]
                #[doc = "received."]
                #[doc = ""]
                #[doc = "`fee` is the multiasset to be spent to pay for execution in"]
                #[doc = "destination chain. Both fee and amount will be subtracted form the"]
                #[doc = "callers balance For now we only accept fee and asset having the same"]
                #[doc = "`MultiLocation` id."]
                #[doc = ""]
                #[doc = "If `fee` is not high enough to cover for the execution costs in the"]
                #[doc = "destination chain, then the assets will be trapped in the"]
                #[doc = "destination chain"]
                #[doc = ""]
                #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                #[doc = "by the network, and if the receiving chain would handle"]
                #[doc = "messages correctly."]
                pub fn transfer_multiasset_with_fee(
                    &self,
                    asset: runtime_types::xcm::VersionedMultiAsset,
                    fee: runtime_types::xcm::VersionedMultiAsset,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                ) -> ::subxt::tx::Payload<types::TransferMultiassetWithFee> {
                    ::subxt::tx::Payload::new_static(
                        "XTokens",
                        "transfer_multiasset_with_fee",
                        types::TransferMultiassetWithFee {
                            asset: ::std::boxed::Box::new(asset),
                            fee: ::std::boxed::Box::new(fee),
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight_limit,
                        },
                        [
                            255u8, 67u8, 191u8, 126u8, 174u8, 56u8, 54u8, 112u8, 9u8, 247u8, 225u8,
                            96u8, 118u8, 107u8, 27u8, 185u8, 42u8, 217u8, 21u8, 26u8, 139u8, 78u8,
                            82u8, 179u8, 143u8, 209u8, 122u8, 145u8, 157u8, 209u8, 219u8, 211u8,
                        ],
                    )
                }
                #[doc = "Transfer several currencies specifying the item to be used as fee"]
                #[doc = ""]
                #[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
                #[doc = "chain, and it would be charged from the transferred assets. If set"]
                #[doc = "below requirements, the execution may fail and assets wouldn't be"]
                #[doc = "received."]
                #[doc = ""]
                #[doc = "`fee_item` is index of the currencies tuple that we want to use for"]
                #[doc = "payment"]
                #[doc = ""]
                #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                #[doc = "by the network, and if the receiving chain would handle"]
                #[doc = "messages correctly."]
                pub fn transfer_multicurrencies(
                    &self,
                    currencies: ::std::vec::Vec<(
                        runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                        ::core::primitive::u128,
                    )>,
                    fee_item: ::core::primitive::u32,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                ) -> ::subxt::tx::Payload<types::TransferMulticurrencies> {
                    ::subxt::tx::Payload::new_static(
                        "XTokens",
                        "transfer_multicurrencies",
                        types::TransferMulticurrencies {
                            currencies,
                            fee_item,
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight_limit,
                        },
                        [
                            153u8, 129u8, 165u8, 177u8, 75u8, 198u8, 161u8, 252u8, 133u8, 57u8,
                            101u8, 190u8, 144u8, 126u8, 81u8, 232u8, 158u8, 102u8, 104u8, 45u8,
                            198u8, 156u8, 134u8, 107u8, 240u8, 134u8, 255u8, 46u8, 214u8, 139u8,
                            167u8, 98u8,
                        ],
                    )
                }
                #[doc = "Transfer several `MultiAsset` specifying the item to be used as fee"]
                #[doc = ""]
                #[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
                #[doc = "chain, and it would be charged from the transferred assets. If set"]
                #[doc = "below requirements, the execution may fail and assets wouldn't be"]
                #[doc = "received."]
                #[doc = ""]
                #[doc = "`fee_item` is index of the MultiAssets that we want to use for"]
                #[doc = "payment"]
                #[doc = ""]
                #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                #[doc = "by the network, and if the receiving chain would handle"]
                #[doc = "messages correctly."]
                pub fn transfer_multiassets(
                    &self,
                    assets: runtime_types::xcm::VersionedMultiAssets,
                    fee_item: ::core::primitive::u32,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                ) -> ::subxt::tx::Payload<types::TransferMultiassets> {
                    ::subxt::tx::Payload::new_static(
                        "XTokens",
                        "transfer_multiassets",
                        types::TransferMultiassets {
                            assets: ::std::boxed::Box::new(assets),
                            fee_item,
                            dest: ::std::boxed::Box::new(dest),
                            dest_weight_limit,
                        },
                        [
                            62u8, 97u8, 148u8, 111u8, 216u8, 123u8, 216u8, 191u8, 196u8, 99u8,
                            227u8, 31u8, 20u8, 178u8, 202u8, 25u8, 48u8, 132u8, 186u8, 196u8,
                            150u8, 69u8, 51u8, 252u8, 250u8, 237u8, 177u8, 214u8, 246u8, 85u8,
                            239u8, 137u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::orml_xtokens::module::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Transferred `MultiAsset` with fee."]
            pub struct TransferredMultiAssets {
                pub sender: runtime_types::account::AccountId20,
                pub assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                pub fee: runtime_types::xcm::v3::multiasset::MultiAsset,
                pub dest: runtime_types::xcm::v3::multilocation::MultiLocation,
            }
            impl ::subxt::events::StaticEvent for TransferredMultiAssets {
                const PALLET: &'static str = "XTokens";
                const EVENT: &'static str = "TransferredMultiAssets";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {}
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Self chain location."]
                pub fn self_location(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::xcm::v3::multilocation::MultiLocation>
                {
                    ::subxt::constants::Address::new_static(
                        "XTokens",
                        "SelfLocation",
                        [
                            111u8, 216u8, 110u8, 49u8, 228u8, 60u8, 105u8, 227u8, 141u8, 11u8,
                            125u8, 36u8, 252u8, 184u8, 156u8, 242u8, 146u8, 64u8, 244u8, 7u8, 70u8,
                            186u8, 11u8, 235u8, 13u8, 254u8, 132u8, 2u8, 154u8, 117u8, 85u8, 154u8,
                        ],
                    )
                }
                #[doc = " Base XCM weight."]
                #[doc = ""]
                #[doc = " The actually weight for an XCM message is `T::BaseXcmWeight +"]
                #[doc = " T::Weigher::weight(&msg)`."]
                pub fn base_xcm_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "XTokens",
                        "BaseXcmWeight",
                        [
                            149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
                            56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
                            128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
                            112u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod asset_manager {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "An error that can occur while executing the mapping pallet's logic."]
        pub type Error = runtime_types::pallet_asset_manager::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_asset_manager::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RegisterForeignAsset {
                    pub asset: runtime_types::moonbase_runtime::xcm_config::AssetType,
                    pub metadata:
                        runtime_types::moonbase_runtime::asset_config::AssetRegistrarMetadata,
                    pub min_amount: ::core::primitive::u128,
                    pub is_sufficient: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for RegisterForeignAsset {
                    const PALLET: &'static str = "AssetManager";
                    const CALL: &'static str = "register_foreign_asset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetAssetUnitsPerSecond {
                    pub asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                    pub units_per_second: ::core::primitive::u128,
                    pub num_assets_weight_hint: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetAssetUnitsPerSecond {
                    const PALLET: &'static str = "AssetManager";
                    const CALL: &'static str = "set_asset_units_per_second";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ChangeExistingAssetType {
                    pub asset_id: ::core::primitive::u128,
                    pub new_asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                    pub num_assets_weight_hint: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ChangeExistingAssetType {
                    const PALLET: &'static str = "AssetManager";
                    const CALL: &'static str = "change_existing_asset_type";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveSupportedAsset {
                    pub asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                    pub num_assets_weight_hint: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveSupportedAsset {
                    const PALLET: &'static str = "AssetManager";
                    const CALL: &'static str = "remove_supported_asset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveExistingAssetType {
                    pub asset_id: ::core::primitive::u128,
                    pub num_assets_weight_hint: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveExistingAssetType {
                    const PALLET: &'static str = "AssetManager";
                    const CALL: &'static str = "remove_existing_asset_type";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RegisterLocalAsset {
                    pub creator: runtime_types::account::AccountId20,
                    pub owner: runtime_types::account::AccountId20,
                    pub is_sufficient: ::core::primitive::bool,
                    pub min_balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for RegisterLocalAsset {
                    const PALLET: &'static str = "AssetManager";
                    const CALL: &'static str = "register_local_asset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DestroyForeignAsset {
                    pub asset_id: ::core::primitive::u128,
                    pub num_assets_weight_hint: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for DestroyForeignAsset {
                    const PALLET: &'static str = "AssetManager";
                    const CALL: &'static str = "destroy_foreign_asset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DestroyLocalAsset {
                    pub asset_id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for DestroyLocalAsset {
                    const PALLET: &'static str = "AssetManager";
                    const CALL: &'static str = "destroy_local_asset";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Register new asset with the asset manager"]
                pub fn register_foreign_asset(
                    &self,
                    asset: runtime_types::moonbase_runtime::xcm_config::AssetType,
                    metadata: runtime_types::moonbase_runtime::asset_config::AssetRegistrarMetadata,
                    min_amount: ::core::primitive::u128,
                    is_sufficient: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::RegisterForeignAsset> {
                    ::subxt::tx::Payload::new_static(
                        "AssetManager",
                        "register_foreign_asset",
                        types::RegisterForeignAsset {
                            asset,
                            metadata,
                            min_amount,
                            is_sufficient,
                        },
                        [
                            90u8, 244u8, 62u8, 39u8, 5u8, 75u8, 6u8, 194u8, 104u8, 157u8, 208u8,
                            108u8, 197u8, 74u8, 94u8, 223u8, 73u8, 61u8, 83u8, 146u8, 196u8, 83u8,
                            183u8, 93u8, 137u8, 45u8, 162u8, 238u8, 89u8, 116u8, 188u8, 5u8,
                        ],
                    )
                }
                #[doc = "Change the amount of units we are charging per execution second"]
                #[doc = "for a given ForeignAssetType"]
                pub fn set_asset_units_per_second(
                    &self,
                    asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                    units_per_second: ::core::primitive::u128,
                    num_assets_weight_hint: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetAssetUnitsPerSecond> {
                    ::subxt::tx::Payload::new_static(
                        "AssetManager",
                        "set_asset_units_per_second",
                        types::SetAssetUnitsPerSecond {
                            asset_type,
                            units_per_second,
                            num_assets_weight_hint,
                        },
                        [
                            146u8, 36u8, 186u8, 37u8, 5u8, 130u8, 242u8, 170u8, 171u8, 172u8,
                            166u8, 239u8, 74u8, 151u8, 58u8, 163u8, 192u8, 154u8, 145u8, 73u8,
                            198u8, 89u8, 219u8, 45u8, 17u8, 46u8, 111u8, 177u8, 172u8, 215u8, 9u8,
                            96u8,
                        ],
                    )
                }
                #[doc = "Change the xcm type mapping for a given assetId"]
                #[doc = "We also change this if the previous units per second where pointing at the old"]
                #[doc = "assetType"]
                pub fn change_existing_asset_type(
                    &self,
                    asset_id: ::core::primitive::u128,
                    new_asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                    num_assets_weight_hint: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ChangeExistingAssetType> {
                    ::subxt::tx::Payload::new_static(
                        "AssetManager",
                        "change_existing_asset_type",
                        types::ChangeExistingAssetType {
                            asset_id,
                            new_asset_type,
                            num_assets_weight_hint,
                        },
                        [
                            96u8, 245u8, 195u8, 80u8, 139u8, 159u8, 194u8, 28u8, 61u8, 118u8,
                            170u8, 219u8, 31u8, 25u8, 170u8, 175u8, 239u8, 240u8, 15u8, 151u8,
                            163u8, 102u8, 201u8, 40u8, 246u8, 90u8, 227u8, 81u8, 128u8, 255u8,
                            170u8, 201u8,
                        ],
                    )
                }
                pub fn remove_supported_asset(
                    &self,
                    asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                    num_assets_weight_hint: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveSupportedAsset> {
                    ::subxt::tx::Payload::new_static(
                        "AssetManager",
                        "remove_supported_asset",
                        types::RemoveSupportedAsset {
                            asset_type,
                            num_assets_weight_hint,
                        },
                        [
                            63u8, 174u8, 240u8, 101u8, 139u8, 79u8, 46u8, 59u8, 30u8, 248u8, 108u8,
                            129u8, 55u8, 55u8, 151u8, 112u8, 16u8, 54u8, 85u8, 72u8, 88u8, 109u8,
                            29u8, 214u8, 69u8, 160u8, 110u8, 127u8, 187u8, 207u8, 251u8, 77u8,
                        ],
                    )
                }
                #[doc = "Remove a given assetId -> assetType association"]
                pub fn remove_existing_asset_type(
                    &self,
                    asset_id: ::core::primitive::u128,
                    num_assets_weight_hint: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveExistingAssetType> {
                    ::subxt::tx::Payload::new_static(
                        "AssetManager",
                        "remove_existing_asset_type",
                        types::RemoveExistingAssetType {
                            asset_id,
                            num_assets_weight_hint,
                        },
                        [
                            44u8, 44u8, 76u8, 124u8, 88u8, 114u8, 76u8, 172u8, 70u8, 135u8, 255u8,
                            231u8, 183u8, 9u8, 137u8, 194u8, 104u8, 108u8, 137u8, 150u8, 240u8,
                            202u8, 211u8, 68u8, 205u8, 61u8, 121u8, 67u8, 235u8, 29u8, 240u8, 69u8,
                        ],
                    )
                }
                #[doc = "Register a new local asset"]
                #[doc = "No information is stored in this pallet about the local asset"]
                #[doc = "The reason is that we dont need to hold a mapping between the multilocation"]
                #[doc = "and the local asset, as this conversion is deterministic"]
                #[doc = "Further, we dont allow xcm fee payment in local assets"]
                pub fn register_local_asset(
                    &self,
                    creator: runtime_types::account::AccountId20,
                    owner: runtime_types::account::AccountId20,
                    is_sufficient: ::core::primitive::bool,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::RegisterLocalAsset> {
                    ::subxt::tx::Payload::new_static(
                        "AssetManager",
                        "register_local_asset",
                        types::RegisterLocalAsset {
                            creator,
                            owner,
                            is_sufficient,
                            min_balance,
                        },
                        [
                            89u8, 60u8, 19u8, 85u8, 74u8, 86u8, 134u8, 0u8, 30u8, 148u8, 223u8,
                            202u8, 236u8, 229u8, 65u8, 136u8, 81u8, 180u8, 145u8, 16u8, 62u8, 46u8,
                            137u8, 34u8, 177u8, 137u8, 20u8, 73u8, 12u8, 28u8, 18u8, 87u8,
                        ],
                    )
                }
                #[doc = "Destroy a given foreign assetId"]
                #[doc = "The weight in this case is the one returned by the trait"]
                #[doc = "plus the db writes and reads from removing all the associated"]
                #[doc = "data"]
                pub fn destroy_foreign_asset(
                    &self,
                    asset_id: ::core::primitive::u128,
                    num_assets_weight_hint: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::DestroyForeignAsset> {
                    ::subxt::tx::Payload::new_static(
                        "AssetManager",
                        "destroy_foreign_asset",
                        types::DestroyForeignAsset {
                            asset_id,
                            num_assets_weight_hint,
                        },
                        [
                            205u8, 223u8, 117u8, 23u8, 14u8, 144u8, 204u8, 142u8, 112u8, 11u8,
                            56u8, 82u8, 115u8, 175u8, 171u8, 111u8, 114u8, 170u8, 114u8, 47u8,
                            151u8, 187u8, 32u8, 94u8, 176u8, 132u8, 119u8, 77u8, 91u8, 213u8, 84u8,
                            248u8,
                        ],
                    )
                }
                #[doc = "Destroy a given local assetId"]
                #[doc = "We do not store anything related to local assets in this pallet other than the counter"]
                #[doc = "and the counter is not used for destroying the asset, so no additional db reads/writes"]
                #[doc = "to be counter here"]
                pub fn destroy_local_asset(
                    &self,
                    asset_id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::DestroyLocalAsset> {
                    ::subxt::tx::Payload::new_static(
                        "AssetManager",
                        "destroy_local_asset",
                        types::DestroyLocalAsset { asset_id },
                        [
                            171u8, 164u8, 170u8, 142u8, 52u8, 155u8, 237u8, 86u8, 173u8, 235u8,
                            23u8, 43u8, 228u8, 176u8, 177u8, 175u8, 210u8, 119u8, 106u8, 197u8,
                            40u8, 52u8, 124u8, 139u8, 3u8, 83u8, 182u8, 104u8, 184u8, 225u8, 196u8,
                            198u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_asset_manager::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New asset with the asset manager is registered"]
            pub struct ForeignAssetRegistered {
                pub asset_id: ::core::primitive::u128,
                pub asset: runtime_types::moonbase_runtime::xcm_config::AssetType,
                pub metadata: runtime_types::moonbase_runtime::asset_config::AssetRegistrarMetadata,
            }
            impl ::subxt::events::StaticEvent for ForeignAssetRegistered {
                const PALLET: &'static str = "AssetManager";
                const EVENT: &'static str = "ForeignAssetRegistered";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Changed the amount of units we are charging per execution second for a given asset"]
            pub struct UnitsPerSecondChanged {
                pub asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                pub units_per_second: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for UnitsPerSecondChanged {
                const PALLET: &'static str = "AssetManager";
                const EVENT: &'static str = "UnitsPerSecondChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Changed the xcm type mapping for a given asset id"]
            pub struct ForeignAssetTypeChanged {
                pub asset_id: ::core::primitive::u128,
                pub new_asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
            }
            impl ::subxt::events::StaticEvent for ForeignAssetTypeChanged {
                const PALLET: &'static str = "AssetManager";
                const EVENT: &'static str = "ForeignAssetTypeChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Removed all information related to an assetId"]
            pub struct ForeignAssetRemoved {
                pub asset_id: ::core::primitive::u128,
                pub asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
            }
            impl ::subxt::events::StaticEvent for ForeignAssetRemoved {
                const PALLET: &'static str = "AssetManager";
                const EVENT: &'static str = "ForeignAssetRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Supported asset type for fee payment removed"]
            pub struct SupportedAssetRemoved {
                pub asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
            }
            impl ::subxt::events::StaticEvent for SupportedAssetRemoved {
                const PALLET: &'static str = "AssetManager";
                const EVENT: &'static str = "SupportedAssetRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Local asset was created"]
            pub struct LocalAssetRegistered {
                pub asset_id: ::core::primitive::u128,
                pub creator: runtime_types::account::AccountId20,
                pub owner: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for LocalAssetRegistered {
                const PALLET: &'static str = "AssetManager";
                const EVENT: &'static str = "LocalAssetRegistered";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Removed all information related to an assetId and destroyed asset"]
            pub struct ForeignAssetDestroyed {
                pub asset_id: ::core::primitive::u128,
                pub asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
            }
            impl ::subxt::events::StaticEvent for ForeignAssetDestroyed {
                const PALLET: &'static str = "AssetManager";
                const EVENT: &'static str = "ForeignAssetDestroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Removed all information related to an assetId and destroyed asset"]
            pub struct LocalAssetDestroyed {
                pub asset_id: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for LocalAssetDestroyed {
                const PALLET: &'static str = "AssetManager";
                const EVENT: &'static str = "LocalAssetDestroyed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Mapping from an asset id to asset type."]
                #[doc = " This is mostly used when receiving transaction specifying an asset directly,"]
                #[doc = " like transferring an asset from this chain to another."]
                pub fn asset_id_type(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::moonbase_runtime::xcm_config::AssetType,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetManager",
                        "AssetIdType",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            10u8, 135u8, 70u8, 225u8, 195u8, 107u8, 229u8, 128u8, 64u8, 214u8,
                            203u8, 198u8, 67u8, 43u8, 23u8, 84u8, 14u8, 44u8, 187u8, 136u8, 162u8,
                            198u8, 82u8, 33u8, 228u8, 61u8, 240u8, 70u8, 197u8, 24u8, 7u8, 130u8,
                        ],
                    )
                }
                #[doc = " Mapping from an asset id to asset type."]
                #[doc = " This is mostly used when receiving transaction specifying an asset directly,"]
                #[doc = " like transferring an asset from this chain to another."]
                pub fn asset_id_type_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::moonbase_runtime::xcm_config::AssetType,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetManager",
                        "AssetIdType",
                        Vec::new(),
                        [
                            10u8, 135u8, 70u8, 225u8, 195u8, 107u8, 229u8, 128u8, 64u8, 214u8,
                            203u8, 198u8, 67u8, 43u8, 23u8, 84u8, 14u8, 44u8, 187u8, 136u8, 162u8,
                            198u8, 82u8, 33u8, 228u8, 61u8, 240u8, 70u8, 197u8, 24u8, 7u8, 130u8,
                        ],
                    )
                }
                #[doc = " Reverse mapping of AssetIdType. Mapping from an asset type to an asset id."]
                #[doc = " This is mostly used when receiving a multilocation XCM message to retrieve"]
                #[doc = " the corresponding asset in which tokens should me minted."]
                pub fn asset_type_id(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::moonbase_runtime::xcm_config::AssetType,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetManager",
                        "AssetTypeId",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            231u8, 233u8, 166u8, 179u8, 208u8, 166u8, 11u8, 134u8, 41u8, 165u8,
                            176u8, 193u8, 218u8, 77u8, 209u8, 52u8, 81u8, 67u8, 46u8, 136u8, 154u8,
                            149u8, 191u8, 200u8, 104u8, 150u8, 119u8, 152u8, 112u8, 191u8, 121u8,
                            134u8,
                        ],
                    )
                }
                #[doc = " Reverse mapping of AssetIdType. Mapping from an asset type to an asset id."]
                #[doc = " This is mostly used when receiving a multilocation XCM message to retrieve"]
                #[doc = " the corresponding asset in which tokens should me minted."]
                pub fn asset_type_id_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetManager",
                        "AssetTypeId",
                        Vec::new(),
                        [
                            231u8, 233u8, 166u8, 179u8, 208u8, 166u8, 11u8, 134u8, 41u8, 165u8,
                            176u8, 193u8, 218u8, 77u8, 209u8, 52u8, 81u8, 67u8, 46u8, 136u8, 154u8,
                            149u8, 191u8, 200u8, 104u8, 150u8, 119u8, 152u8, 112u8, 191u8, 121u8,
                            134u8,
                        ],
                    )
                }
                #[doc = " Stores the units per second for local execution for a AssetType."]
                #[doc = " This is used to know how to charge for XCM execution in a particular"]
                #[doc = " asset"]
                #[doc = " Not all assets might contain units per second, hence the different storage"]
                pub fn asset_type_units_per_second(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::moonbase_runtime::xcm_config::AssetType,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetManager",
                        "AssetTypeUnitsPerSecond",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            150u8, 180u8, 36u8, 59u8, 253u8, 64u8, 164u8, 115u8, 102u8, 218u8,
                            75u8, 96u8, 24u8, 57u8, 107u8, 104u8, 175u8, 13u8, 16u8, 114u8, 29u8,
                            154u8, 94u8, 175u8, 222u8, 100u8, 166u8, 56u8, 54u8, 79u8, 194u8,
                            177u8,
                        ],
                    )
                }
                #[doc = " Stores the units per second for local execution for a AssetType."]
                #[doc = " This is used to know how to charge for XCM execution in a particular"]
                #[doc = " asset"]
                #[doc = " Not all assets might contain units per second, hence the different storage"]
                pub fn asset_type_units_per_second_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetManager",
                        "AssetTypeUnitsPerSecond",
                        Vec::new(),
                        [
                            150u8, 180u8, 36u8, 59u8, 253u8, 64u8, 164u8, 115u8, 102u8, 218u8,
                            75u8, 96u8, 24u8, 57u8, 107u8, 104u8, 175u8, 13u8, 16u8, 114u8, 29u8,
                            154u8, 94u8, 175u8, 222u8, 100u8, 166u8, 56u8, 54u8, 79u8, 194u8,
                            177u8,
                        ],
                    )
                }
                #[doc = " Stores the counter of the number of local assets that have been"]
                #[doc = " created so far"]
                #[doc = " This value can be used to salt the creation of an assetId, e.g.,"]
                #[doc = " by hashing it. This is particularly useful for cases like moonbeam"]
                #[doc = " where letting users choose their assetId would result in collision"]
                #[doc = " in the evm side."]
                pub fn local_asset_counter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetManager",
                        "LocalAssetCounter",
                        vec![],
                        [
                            232u8, 128u8, 87u8, 92u8, 44u8, 37u8, 1u8, 47u8, 24u8, 103u8, 175u8,
                            22u8, 226u8, 200u8, 27u8, 157u8, 44u8, 42u8, 76u8, 50u8, 214u8, 197u8,
                            163u8, 43u8, 120u8, 95u8, 167u8, 193u8, 64u8, 145u8, 77u8, 211u8,
                        ],
                    )
                }
                #[doc = " Local asset deposits, a mapping from assetId to a struct"]
                #[doc = " holding the creator (from which the deposit was reserved) and"]
                #[doc = " the deposit amount"]
                pub fn local_asset_deposit(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_asset_manager::pallet::AssetInfo,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetManager",
                        "LocalAssetDeposit",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            9u8, 76u8, 251u8, 73u8, 188u8, 152u8, 238u8, 186u8, 160u8, 101u8,
                            189u8, 169u8, 109u8, 112u8, 58u8, 124u8, 83u8, 78u8, 43u8, 78u8, 101u8,
                            252u8, 102u8, 186u8, 85u8, 141u8, 13u8, 166u8, 102u8, 72u8, 109u8,
                            65u8,
                        ],
                    )
                }
                #[doc = " Local asset deposits, a mapping from assetId to a struct"]
                #[doc = " holding the creator (from which the deposit was reserved) and"]
                #[doc = " the deposit amount"]
                pub fn local_asset_deposit_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_asset_manager::pallet::AssetInfo,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetManager",
                        "LocalAssetDeposit",
                        Vec::new(),
                        [
                            9u8, 76u8, 251u8, 73u8, 188u8, 152u8, 238u8, 186u8, 160u8, 101u8,
                            189u8, 169u8, 109u8, 112u8, 58u8, 124u8, 83u8, 78u8, 43u8, 78u8, 101u8,
                            252u8, 102u8, 186u8, 85u8, 141u8, 13u8, 166u8, 102u8, 72u8, 109u8,
                            65u8,
                        ],
                    )
                }
                pub fn supported_fee_payment_assets(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::moonbase_runtime::xcm_config::AssetType>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetManager",
                        "SupportedFeePaymentAssets",
                        vec![],
                        [
                            110u8, 106u8, 232u8, 225u8, 214u8, 55u8, 83u8, 3u8, 246u8, 84u8, 65u8,
                            80u8, 184u8, 130u8, 163u8, 3u8, 76u8, 242u8, 204u8, 98u8, 186u8, 144u8,
                            38u8, 125u8, 2u8, 23u8, 9u8, 235u8, 22u8, 244u8, 21u8, 175u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The basic amount of funds that must be reserved for a local asset."]
                pub fn local_asset_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "AssetManager",
                        "LocalAssetDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod migrations {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_migrations::pallet::Error;
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_migrations::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Runtime upgrade started"]
            pub struct RuntimeUpgradeStarted;
            impl ::subxt::events::StaticEvent for RuntimeUpgradeStarted {
                const PALLET: &'static str = "Migrations";
                const EVENT: &'static str = "RuntimeUpgradeStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Runtime upgrade completed"]
            pub struct RuntimeUpgradeCompleted {
                pub weight: runtime_types::sp_weights::weight_v2::Weight,
            }
            impl ::subxt::events::StaticEvent for RuntimeUpgradeCompleted {
                const PALLET: &'static str = "Migrations";
                const EVENT: &'static str = "RuntimeUpgradeCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Migration started"]
            pub struct MigrationStarted {
                pub migration_name: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::events::StaticEvent for MigrationStarted {
                const PALLET: &'static str = "Migrations";
                const EVENT: &'static str = "MigrationStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Migration completed"]
            pub struct MigrationCompleted {
                pub migration_name: ::std::vec::Vec<::core::primitive::u8>,
                pub consumed_weight: runtime_types::sp_weights::weight_v2::Weight,
            }
            impl ::subxt::events::StaticEvent for MigrationCompleted {
                const PALLET: &'static str = "Migrations";
                const EVENT: &'static str = "MigrationCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "XCM execution suspension failed with inner error"]
            pub struct FailedToSuspendIdleXcmExecution {
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl ::subxt::events::StaticEvent for FailedToSuspendIdleXcmExecution {
                const PALLET: &'static str = "Migrations";
                const EVENT: &'static str = "FailedToSuspendIdleXcmExecution";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "XCM execution resume failed with inner error"]
            pub struct FailedToResumeIdleXcmExecution {
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl ::subxt::events::StaticEvent for FailedToResumeIdleXcmExecution {
                const PALLET: &'static str = "Migrations";
                const EVENT: &'static str = "FailedToResumeIdleXcmExecution";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " True if all required migrations have completed"]
                pub fn fully_upgraded(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Migrations",
                        "FullyUpgraded",
                        vec![],
                        [
                            105u8, 200u8, 165u8, 156u8, 45u8, 37u8, 246u8, 200u8, 201u8, 166u8,
                            47u8, 147u8, 50u8, 140u8, 34u8, 228u8, 124u8, 92u8, 9u8, 171u8, 95u8,
                            136u8, 205u8, 158u8, 16u8, 132u8, 241u8, 144u8, 222u8, 254u8, 144u8,
                            106u8,
                        ],
                    )
                }
                #[doc = " MigrationState tracks the progress of a migration."]
                #[doc = " Maps name (Vec<u8>) -> whether or not migration has been completed (bool)"]
                pub fn migration_state(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Migrations",
                        "MigrationState",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            233u8, 97u8, 136u8, 61u8, 115u8, 173u8, 118u8, 50u8, 178u8, 9u8, 34u8,
                            200u8, 217u8, 158u8, 70u8, 144u8, 153u8, 222u8, 51u8, 117u8, 28u8,
                            168u8, 175u8, 219u8, 209u8, 231u8, 14u8, 46u8, 188u8, 47u8, 30u8,
                            137u8,
                        ],
                    )
                }
                #[doc = " MigrationState tracks the progress of a migration."]
                #[doc = " Maps name (Vec<u8>) -> whether or not migration has been completed (bool)"]
                pub fn migration_state_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Migrations",
                        "MigrationState",
                        Vec::new(),
                        [
                            233u8, 97u8, 136u8, 61u8, 115u8, 173u8, 118u8, 50u8, 178u8, 9u8, 34u8,
                            200u8, 217u8, 158u8, 70u8, 144u8, 153u8, 222u8, 51u8, 117u8, 28u8,
                            168u8, 175u8, 219u8, 209u8, 231u8, 14u8, 46u8, 188u8, 47u8, 30u8,
                            137u8,
                        ],
                    )
                }
                #[doc = " Temporary value that is set to true at the beginning of the block during which the execution"]
                #[doc = " of xcm messages must be paused."]
                pub fn should_pause_xcm(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Migrations",
                        "ShouldPauseXcm",
                        vec![],
                        [
                            81u8, 219u8, 250u8, 138u8, 64u8, 48u8, 118u8, 1u8, 171u8, 235u8, 167u8,
                            230u8, 0u8, 27u8, 38u8, 59u8, 113u8, 132u8, 70u8, 141u8, 90u8, 89u8,
                            11u8, 118u8, 88u8, 34u8, 182u8, 0u8, 22u8, 65u8, 213u8, 11u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod xcm_transactor {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "An error that can occur while executing the mapping pallet's logic."]
        pub type Error = runtime_types::pallet_xcm_transactor::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_xcm_transactor::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Register {
                    pub who: runtime_types::account::AccountId20,
                    pub index: ::core::primitive::u16,
                }
                impl ::subxt::blocks::StaticExtrinsic for Register {
                    const PALLET: &'static str = "XcmTransactor";
                    const CALL: &'static str = "register";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Deregister {
                    pub index: ::core::primitive::u16,
                }
                impl ::subxt::blocks::StaticExtrinsic for Deregister {
                    const PALLET: &'static str = "XcmTransactor";
                    const CALL: &'static str = "deregister";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransactThroughDerivative {
                    pub dest: runtime_types::moonbase_runtime::xcm_config::Transactors,
                    pub index: ::core::primitive::u16,
                    pub fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
                        runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                    >,
                    pub inner_call: ::std::vec::Vec<::core::primitive::u8>,
                    pub weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
                    pub refund: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransactThroughDerivative {
                    const PALLET: &'static str = "XcmTransactor";
                    const CALL: &'static str = "transact_through_derivative";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransactThroughSovereign {
                    pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub fee_payer: runtime_types::account::AccountId20,
                    pub fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
                        runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                    >,
                    pub call: ::std::vec::Vec<::core::primitive::u8>,
                    pub origin_kind: runtime_types::xcm::v2::OriginKind,
                    pub weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
                    pub refund: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransactThroughSovereign {
                    const PALLET: &'static str = "XcmTransactor";
                    const CALL: &'static str = "transact_through_sovereign";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetTransactInfo {
                    pub location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub transact_extra_weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub transact_extra_weight_signed:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetTransactInfo {
                    const PALLET: &'static str = "XcmTransactor";
                    const CALL: &'static str = "set_transact_info";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveTransactInfo {
                    pub location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveTransactInfo {
                    const PALLET: &'static str = "XcmTransactor";
                    const CALL: &'static str = "remove_transact_info";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransactThroughSigned {
                    pub dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
                        runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                    >,
                    pub call: ::std::vec::Vec<::core::primitive::u8>,
                    pub weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
                    pub refund: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransactThroughSigned {
                    const PALLET: &'static str = "XcmTransactor";
                    const CALL: &'static str = "transact_through_signed";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetFeePerSecond {
                    pub asset_location:
                        ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    pub fee_per_second: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetFeePerSecond {
                    const PALLET: &'static str = "XcmTransactor";
                    const CALL: &'static str = "set_fee_per_second";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveFeePerSecond {
                    pub asset_location:
                        ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveFeePerSecond {
                    const PALLET: &'static str = "XcmTransactor";
                    const CALL: &'static str = "remove_fee_per_second";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HrmpManage {
                    pub action: runtime_types::pallet_xcm_transactor::pallet::HrmpOperation,
                    pub fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
                        runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                    >,
                    pub weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
                }
                impl ::subxt::blocks::StaticExtrinsic for HrmpManage {
                    const PALLET: &'static str = "XcmTransactor";
                    const CALL: &'static str = "hrmp_manage";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Register a derivative index for an account id. Dispatchable by"]
                #[doc = "DerivativeAddressRegistrationOrigin"]
                #[doc = ""]
                #[doc = "We do not store the derivative address, but only the index. We do not need to store"]
                #[doc = "the derivative address to issue calls, only the index is enough"]
                #[doc = ""]
                #[doc = "For now an index is registered for all possible destinations and not per-destination."]
                #[doc = "We can change this in the future although it would just make things more complicated"]
                pub fn register(
                    &self,
                    who: runtime_types::account::AccountId20,
                    index: ::core::primitive::u16,
                ) -> ::subxt::tx::Payload<types::Register> {
                    ::subxt::tx::Payload::new_static(
                        "XcmTransactor",
                        "register",
                        types::Register { who, index },
                        [
                            227u8, 141u8, 12u8, 3u8, 141u8, 96u8, 237u8, 69u8, 31u8, 8u8, 78u8,
                            122u8, 181u8, 122u8, 174u8, 37u8, 30u8, 206u8, 49u8, 76u8, 141u8,
                            150u8, 98u8, 239u8, 58u8, 129u8, 141u8, 213u8, 218u8, 70u8, 14u8,
                            154u8,
                        ],
                    )
                }
                #[doc = "De-Register a derivative index. This prevents an account to use a derivative address"]
                #[doc = "(represented by an index) from our of our sovereign accounts anymore"]
                pub fn deregister(
                    &self,
                    index: ::core::primitive::u16,
                ) -> ::subxt::tx::Payload<types::Deregister> {
                    ::subxt::tx::Payload::new_static(
                        "XcmTransactor",
                        "deregister",
                        types::Deregister { index },
                        [
                            77u8, 108u8, 160u8, 220u8, 59u8, 118u8, 119u8, 121u8, 132u8, 121u8,
                            95u8, 18u8, 54u8, 121u8, 247u8, 163u8, 180u8, 133u8, 136u8, 71u8,
                            222u8, 169u8, 16u8, 57u8, 250u8, 97u8, 161u8, 8u8, 178u8, 85u8, 219u8,
                            171u8,
                        ],
                    )
                }
                #[doc = "Transact the inner call through a derivative account in a destination chain,"]
                #[doc = "using 'fee_location' to pay for the fees. This fee_location is given as a multilocation"]
                #[doc = ""]
                #[doc = "The caller needs to have the index registered in this pallet. The fee multiasset needs"]
                #[doc = "to be a reserve asset for the destination transactor::multilocation."]
                pub fn transact_through_derivative(
                    &self,
                    dest: runtime_types::moonbase_runtime::xcm_config::Transactors,
                    index: ::core::primitive::u16,
                    fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
                        runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                    >,
                    inner_call: ::std::vec::Vec<::core::primitive::u8>,
                    weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
                    refund: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::TransactThroughDerivative> {
                    ::subxt::tx::Payload::new_static(
                        "XcmTransactor",
                        "transact_through_derivative",
                        types::TransactThroughDerivative {
                            dest,
                            index,
                            fee,
                            inner_call,
                            weight_info,
                            refund,
                        },
                        [
                            155u8, 199u8, 198u8, 70u8, 120u8, 181u8, 117u8, 198u8, 46u8, 36u8,
                            148u8, 76u8, 60u8, 83u8, 0u8, 212u8, 48u8, 100u8, 84u8, 9u8, 210u8,
                            136u8, 129u8, 79u8, 136u8, 61u8, 209u8, 29u8, 226u8, 190u8, 213u8,
                            152u8,
                        ],
                    )
                }
                #[doc = "Transact the call through the sovereign account in a destination chain,"]
                #[doc = "'fee_payer' pays for the fee"]
                #[doc = ""]
                #[doc = "SovereignAccountDispatcherOrigin callable only"]
                pub fn transact_through_sovereign(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    fee_payer: runtime_types::account::AccountId20,
                    fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
                        runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                    >,
                    call: ::std::vec::Vec<::core::primitive::u8>,
                    origin_kind: runtime_types::xcm::v2::OriginKind,
                    weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
                    refund: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::TransactThroughSovereign> {
                    ::subxt::tx::Payload::new_static(
                        "XcmTransactor",
                        "transact_through_sovereign",
                        types::TransactThroughSovereign {
                            dest: ::std::boxed::Box::new(dest),
                            fee_payer,
                            fee,
                            call,
                            origin_kind,
                            weight_info,
                            refund,
                        },
                        [
                            123u8, 48u8, 62u8, 223u8, 198u8, 211u8, 136u8, 226u8, 212u8, 197u8,
                            55u8, 118u8, 94u8, 156u8, 169u8, 107u8, 17u8, 214u8, 64u8, 197u8,
                            113u8, 108u8, 123u8, 223u8, 168u8, 30u8, 61u8, 150u8, 234u8, 120u8,
                            248u8, 84u8,
                        ],
                    )
                }
                #[doc = "Change the transact info of a location"]
                pub fn set_transact_info(
                    &self,
                    location: runtime_types::xcm::VersionedMultiLocation,
                    transact_extra_weight: runtime_types::sp_weights::weight_v2::Weight,
                    max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    transact_extra_weight_signed: ::core::option::Option<
                        runtime_types::sp_weights::weight_v2::Weight,
                    >,
                ) -> ::subxt::tx::Payload<types::SetTransactInfo> {
                    ::subxt::tx::Payload::new_static(
                        "XcmTransactor",
                        "set_transact_info",
                        types::SetTransactInfo {
                            location: ::std::boxed::Box::new(location),
                            transact_extra_weight,
                            max_weight,
                            transact_extra_weight_signed,
                        },
                        [
                            169u8, 2u8, 112u8, 76u8, 136u8, 184u8, 26u8, 241u8, 179u8, 96u8, 37u8,
                            255u8, 177u8, 29u8, 167u8, 219u8, 115u8, 25u8, 219u8, 0u8, 141u8,
                            127u8, 129u8, 147u8, 17u8, 153u8, 71u8, 172u8, 12u8, 25u8, 127u8,
                            251u8,
                        ],
                    )
                }
                #[doc = "Remove the transact info of a location"]
                pub fn remove_transact_info(
                    &self,
                    location: runtime_types::xcm::VersionedMultiLocation,
                ) -> ::subxt::tx::Payload<types::RemoveTransactInfo> {
                    ::subxt::tx::Payload::new_static(
                        "XcmTransactor",
                        "remove_transact_info",
                        types::RemoveTransactInfo {
                            location: ::std::boxed::Box::new(location),
                        },
                        [
                            134u8, 1u8, 177u8, 99u8, 170u8, 203u8, 232u8, 190u8, 188u8, 97u8, 34u8,
                            180u8, 189u8, 39u8, 48u8, 150u8, 80u8, 211u8, 63u8, 4u8, 92u8, 234u8,
                            59u8, 117u8, 210u8, 224u8, 121u8, 230u8, 224u8, 156u8, 132u8, 170u8,
                        ],
                    )
                }
                #[doc = "Transact the call through the a signed origin in this chain"]
                #[doc = "that should be converted to a transaction dispatch account in the destination chain"]
                #[doc = "by any method implemented in the destination chains runtime"]
                #[doc = ""]
                #[doc = "This time we are giving the currency as a currencyId instead of multilocation"]
                pub fn transact_through_signed(
                    &self,
                    dest: runtime_types::xcm::VersionedMultiLocation,
                    fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
                        runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                    >,
                    call: ::std::vec::Vec<::core::primitive::u8>,
                    weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
                    refund: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::TransactThroughSigned> {
                    ::subxt::tx::Payload::new_static(
                        "XcmTransactor",
                        "transact_through_signed",
                        types::TransactThroughSigned {
                            dest: ::std::boxed::Box::new(dest),
                            fee,
                            call,
                            weight_info,
                            refund,
                        },
                        [
                            119u8, 99u8, 227u8, 60u8, 96u8, 209u8, 99u8, 113u8, 8u8, 55u8, 224u8,
                            129u8, 92u8, 29u8, 174u8, 180u8, 215u8, 178u8, 182u8, 254u8, 123u8,
                            58u8, 187u8, 52u8, 126u8, 18u8, 11u8, 9u8, 210u8, 66u8, 102u8, 253u8,
                        ],
                    )
                }
                #[doc = "Set the fee per second of an asset on its reserve chain"]
                pub fn set_fee_per_second(
                    &self,
                    asset_location: runtime_types::xcm::VersionedMultiLocation,
                    fee_per_second: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::SetFeePerSecond> {
                    ::subxt::tx::Payload::new_static(
                        "XcmTransactor",
                        "set_fee_per_second",
                        types::SetFeePerSecond {
                            asset_location: ::std::boxed::Box::new(asset_location),
                            fee_per_second,
                        },
                        [
                            119u8, 39u8, 95u8, 176u8, 212u8, 22u8, 69u8, 83u8, 13u8, 114u8, 64u8,
                            81u8, 38u8, 152u8, 120u8, 99u8, 100u8, 15u8, 74u8, 92u8, 56u8, 54u8,
                            110u8, 28u8, 61u8, 226u8, 164u8, 134u8, 13u8, 43u8, 235u8, 248u8,
                        ],
                    )
                }
                #[doc = "Remove the fee per second of an asset on its reserve chain"]
                pub fn remove_fee_per_second(
                    &self,
                    asset_location: runtime_types::xcm::VersionedMultiLocation,
                ) -> ::subxt::tx::Payload<types::RemoveFeePerSecond> {
                    ::subxt::tx::Payload::new_static(
                        "XcmTransactor",
                        "remove_fee_per_second",
                        types::RemoveFeePerSecond {
                            asset_location: ::std::boxed::Box::new(asset_location),
                        },
                        [
                            75u8, 127u8, 227u8, 198u8, 34u8, 74u8, 32u8, 225u8, 139u8, 114u8,
                            196u8, 251u8, 128u8, 98u8, 6u8, 187u8, 252u8, 84u8, 73u8, 95u8, 177u8,
                            133u8, 119u8, 29u8, 119u8, 201u8, 231u8, 103u8, 236u8, 166u8, 29u8,
                            117u8,
                        ],
                    )
                }
                #[doc = "Manage HRMP operations"]
                pub fn hrmp_manage(
                    &self,
                    action: runtime_types::pallet_xcm_transactor::pallet::HrmpOperation,
                    fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
                        runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                    >,
                    weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
                ) -> ::subxt::tx::Payload<types::HrmpManage> {
                    ::subxt::tx::Payload::new_static(
                        "XcmTransactor",
                        "hrmp_manage",
                        types::HrmpManage {
                            action,
                            fee,
                            weight_info,
                        },
                        [
                            62u8, 235u8, 195u8, 144u8, 109u8, 27u8, 138u8, 101u8, 215u8, 149u8,
                            213u8, 241u8, 21u8, 183u8, 222u8, 113u8, 48u8, 47u8, 114u8, 160u8,
                            20u8, 121u8, 19u8, 224u8, 215u8, 207u8, 82u8, 24u8, 217u8, 242u8,
                            135u8, 71u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_xcm_transactor::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Transacted the inner call through a derivative account in a destination chain."]
            pub struct TransactedDerivative {
                pub account_id: runtime_types::account::AccountId20,
                pub dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                pub call: ::std::vec::Vec<::core::primitive::u8>,
                pub index: ::core::primitive::u16,
            }
            impl ::subxt::events::StaticEvent for TransactedDerivative {
                const PALLET: &'static str = "XcmTransactor";
                const EVENT: &'static str = "TransactedDerivative";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Transacted the call through the sovereign account in a destination chain."]
            pub struct TransactedSovereign {
                pub fee_payer: runtime_types::account::AccountId20,
                pub dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                pub call: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::events::StaticEvent for TransactedSovereign {
                const PALLET: &'static str = "XcmTransactor";
                const EVENT: &'static str = "TransactedSovereign";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Transacted the call through a signed account in a destination chain."]
            pub struct TransactedSigned {
                pub fee_payer: runtime_types::account::AccountId20,
                pub dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                pub call: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::events::StaticEvent for TransactedSigned {
                const PALLET: &'static str = "XcmTransactor";
                const EVENT: &'static str = "TransactedSigned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Registered a derivative index for an account id."]
            pub struct RegisteredDerivative {
                pub account_id: runtime_types::account::AccountId20,
                pub index: ::core::primitive::u16,
            }
            impl ::subxt::events::StaticEvent for RegisteredDerivative {
                const PALLET: &'static str = "XcmTransactor";
                const EVENT: &'static str = "RegisteredDerivative";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DeRegisteredDerivative {
                pub index: ::core::primitive::u16,
            }
            impl ::subxt::events::StaticEvent for DeRegisteredDerivative {
                const PALLET: &'static str = "XcmTransactor";
                const EVENT: &'static str = "DeRegisteredDerivative";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Transact failed"]
            pub struct TransactFailed {
                pub error: runtime_types::xcm::v3::traits::Error,
            }
            impl ::subxt::events::StaticEvent for TransactFailed {
                const PALLET: &'static str = "XcmTransactor";
                const EVENT: &'static str = "TransactFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Changed the transact info of a location"]
            pub struct TransactInfoChanged {
                pub location: runtime_types::xcm::v3::multilocation::MultiLocation,
                pub remote_info:
                    runtime_types::pallet_xcm_transactor::pallet::RemoteTransactInfoWithMaxWeight,
            }
            impl ::subxt::events::StaticEvent for TransactInfoChanged {
                const PALLET: &'static str = "XcmTransactor";
                const EVENT: &'static str = "TransactInfoChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Removed the transact info of a location"]
            pub struct TransactInfoRemoved {
                pub location: runtime_types::xcm::v3::multilocation::MultiLocation,
            }
            impl ::subxt::events::StaticEvent for TransactInfoRemoved {
                const PALLET: &'static str = "XcmTransactor";
                const EVENT: &'static str = "TransactInfoRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Set dest fee per second"]
            pub struct DestFeePerSecondChanged {
                pub location: runtime_types::xcm::v3::multilocation::MultiLocation,
                pub fee_per_second: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DestFeePerSecondChanged {
                const PALLET: &'static str = "XcmTransactor";
                const EVENT: &'static str = "DestFeePerSecondChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Remove dest fee per second"]
            pub struct DestFeePerSecondRemoved {
                pub location: runtime_types::xcm::v3::multilocation::MultiLocation,
            }
            impl ::subxt::events::StaticEvent for DestFeePerSecondRemoved {
                const PALLET: &'static str = "XcmTransactor";
                const EVENT: &'static str = "DestFeePerSecondRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "HRMP manage action succesfully sent"]
            pub struct HrmpManagementSent {
                pub action: runtime_types::pallet_xcm_transactor::pallet::HrmpOperation,
            }
            impl ::subxt::events::StaticEvent for HrmpManagementSent {
                const PALLET: &'static str = "XcmTransactor";
                const EVENT: &'static str = "HrmpManagementSent";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Since we are using pallet-utility for account derivation (through AsDerivative),"]
                #[doc = " we need to provide an index for the account derivation. This storage item stores the index"]
                #[doc = " assigned for a given local account. These indices are usable as derivative in the relay chain"]
                pub fn index_to_account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u16>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::account::AccountId20,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmTransactor",
                        "IndexToAccount",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            199u8, 1u8, 81u8, 53u8, 73u8, 40u8, 70u8, 245u8, 225u8, 59u8, 45u8,
                            103u8, 195u8, 182u8, 174u8, 197u8, 83u8, 212u8, 78u8, 81u8, 167u8,
                            223u8, 251u8, 18u8, 98u8, 63u8, 159u8, 209u8, 206u8, 90u8, 168u8,
                            172u8,
                        ],
                    )
                }
                #[doc = " Since we are using pallet-utility for account derivation (through AsDerivative),"]
                #[doc = " we need to provide an index for the account derivation. This storage item stores the index"]
                #[doc = " assigned for a given local account. These indices are usable as derivative in the relay chain"]
                pub fn index_to_account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::account::AccountId20,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmTransactor",
                        "IndexToAccount",
                        Vec::new(),
                        [
                            199u8, 1u8, 81u8, 53u8, 73u8, 40u8, 70u8, 245u8, 225u8, 59u8, 45u8,
                            103u8, 195u8, 182u8, 174u8, 197u8, 83u8, 212u8, 78u8, 81u8, 167u8,
                            223u8, 251u8, 18u8, 98u8, 63u8, 159u8, 209u8, 206u8, 90u8, 168u8,
                            172u8,
                        ],
                    )
                }
                #[doc = " Stores the transact info of a MultiLocation. This defines how much extra weight we need to"]
                #[doc = " add when we want to transact in the destination chain and maximum amount of weight allowed"]
                #[doc = " by the destination chain"]
                pub fn transact_info_with_weight_limit(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::xcm::v3::multilocation::MultiLocation>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_xcm_transactor::pallet::RemoteTransactInfoWithMaxWeight,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmTransactor",
                        "TransactInfoWithWeightLimit",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            202u8, 127u8, 132u8, 0u8, 218u8, 170u8, 24u8, 246u8, 24u8, 51u8, 255u8,
                            236u8, 222u8, 228u8, 208u8, 154u8, 201u8, 159u8, 241u8, 205u8, 120u8,
                            7u8, 11u8, 48u8, 89u8, 140u8, 40u8, 232u8, 53u8, 204u8, 142u8, 252u8,
                        ],
                    )
                }
                #[doc = " Stores the transact info of a MultiLocation. This defines how much extra weight we need to"]
                #[doc = " add when we want to transact in the destination chain and maximum amount of weight allowed"]
                #[doc = " by the destination chain"]
                pub fn transact_info_with_weight_limit_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_xcm_transactor::pallet::RemoteTransactInfoWithMaxWeight,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmTransactor",
                        "TransactInfoWithWeightLimit",
                        Vec::new(),
                        [
                            202u8, 127u8, 132u8, 0u8, 218u8, 170u8, 24u8, 246u8, 24u8, 51u8, 255u8,
                            236u8, 222u8, 228u8, 208u8, 154u8, 201u8, 159u8, 241u8, 205u8, 120u8,
                            7u8, 11u8, 48u8, 89u8, 140u8, 40u8, 232u8, 53u8, 204u8, 142u8, 252u8,
                        ],
                    )
                }
                #[doc = " Stores the fee per second for an asset in its reserve chain. This allows us to convert"]
                #[doc = " from weight to fee"]
                pub fn destination_asset_fee_per_second(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::xcm::v3::multilocation::MultiLocation>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmTransactor",
                        "DestinationAssetFeePerSecond",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            22u8, 195u8, 213u8, 134u8, 148u8, 149u8, 91u8, 238u8, 96u8, 183u8,
                            233u8, 187u8, 42u8, 84u8, 193u8, 141u8, 33u8, 222u8, 231u8, 195u8,
                            44u8, 218u8, 222u8, 144u8, 0u8, 180u8, 32u8, 41u8, 169u8, 54u8, 143u8,
                            212u8,
                        ],
                    )
                }
                #[doc = " Stores the fee per second for an asset in its reserve chain. This allows us to convert"]
                #[doc = " from weight to fee"]
                pub fn destination_asset_fee_per_second_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "XcmTransactor",
                        "DestinationAssetFeePerSecond",
                        Vec::new(),
                        [
                            22u8, 195u8, 213u8, 134u8, 148u8, 149u8, 91u8, 238u8, 96u8, 183u8,
                            233u8, 187u8, 42u8, 84u8, 193u8, 141u8, 33u8, 222u8, 231u8, 195u8,
                            44u8, 218u8, 222u8, 144u8, 0u8, 180u8, 32u8, 41u8, 169u8, 54u8, 143u8,
                            212u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Self chain location."]
                pub fn self_location(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::xcm::v3::multilocation::MultiLocation>
                {
                    ::subxt::constants::Address::new_static(
                        "XcmTransactor",
                        "SelfLocation",
                        [
                            111u8, 216u8, 110u8, 49u8, 228u8, 60u8, 105u8, 227u8, 141u8, 11u8,
                            125u8, 36u8, 252u8, 184u8, 156u8, 242u8, 146u8, 64u8, 244u8, 7u8, 70u8,
                            186u8, 11u8, 235u8, 13u8, 254u8, 132u8, 2u8, 154u8, 117u8, 85u8, 154u8,
                        ],
                    )
                }
                #[doc = ""]
                #[doc = " The actual weight for an XCM message is `T::BaseXcmWeight +"]
                #[doc = " T::Weigher::weight(&msg)`."]
                pub fn base_xcm_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "XcmTransactor",
                        "BaseXcmWeight",
                        [
                            149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
                            56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
                            128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
                            112u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod proxy_genesis_companion {
        use super::root_mod;
        use super::runtime_types;
    }
    pub mod local_assets {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_assets::pallet::Error2;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_assets::pallet::Call2;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Create {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub admin: runtime_types::account::AccountId20,
                    pub min_balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Create {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceCreate {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub owner: runtime_types::account::AccountId20,
                    pub is_sufficient: ::core::primitive::bool,
                    #[codec(compact)]
                    pub min_balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceCreate {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "force_create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct StartDestroy {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for StartDestroy {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "start_destroy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DestroyAccounts {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for DestroyAccounts {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "destroy_accounts";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DestroyApprovals {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for DestroyApprovals {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "destroy_approvals";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FinishDestroy {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for FinishDestroy {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "finish_destroy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Mint {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub beneficiary: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Mint {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "mint";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Burn {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub who: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Burn {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "burn";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub target: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferKeepAlive {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub target: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferKeepAlive {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "transfer_keep_alive";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceTransfer {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub source: runtime_types::account::AccountId20,
                    pub dest: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceTransfer {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "force_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Freeze {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub who: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for Freeze {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "freeze";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Thaw {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub who: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for Thaw {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "thaw";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FreezeAsset {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for FreezeAsset {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "freeze_asset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ThawAsset {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ThawAsset {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "thaw_asset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferOwnership {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub owner: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferOwnership {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "transfer_ownership";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetTeam {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub issuer: runtime_types::account::AccountId20,
                    pub admin: runtime_types::account::AccountId20,
                    pub freezer: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetTeam {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "set_team";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub name: ::std::vec::Vec<::core::primitive::u8>,
                    pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                    pub decimals: ::core::primitive::u8,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "set_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClearMetadata {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "clear_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceSetMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub name: ::std::vec::Vec<::core::primitive::u8>,
                    pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                    pub decimals: ::core::primitive::u8,
                    pub is_frozen: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSetMetadata {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "force_set_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceClearMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceClearMetadata {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "force_clear_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceAssetStatus {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub owner: runtime_types::account::AccountId20,
                    pub issuer: runtime_types::account::AccountId20,
                    pub admin: runtime_types::account::AccountId20,
                    pub freezer: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub min_balance: ::core::primitive::u128,
                    pub is_sufficient: ::core::primitive::bool,
                    pub is_frozen: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceAssetStatus {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "force_asset_status";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveTransfer {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub delegate: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveTransfer {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "approve_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelApproval {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub delegate: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelApproval {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "cancel_approval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceCancelApproval {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub owner: runtime_types::account::AccountId20,
                    pub delegate: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceCancelApproval {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "force_cancel_approval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferApproved {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub owner: runtime_types::account::AccountId20,
                    pub destination: runtime_types::account::AccountId20,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferApproved {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "transfer_approved";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Touch {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Touch {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "touch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Refund {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub allow_burn: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Refund {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "refund";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMinBalance {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub min_balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMinBalance {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "set_min_balance";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TouchOther {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub who: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for TouchOther {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "touch_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RefundOther {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub who: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for RefundOther {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "refund_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Block {
                    #[codec(compact)]
                    pub id: ::core::primitive::u128,
                    pub who: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for Block {
                    const PALLET: &'static str = "LocalAssets";
                    const CALL: &'static str = "block";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Issue a new class of fungible assets from a public origin."]
                #[doc = ""]
                #[doc = "This new asset class has no assets initially and its owner is the origin."]
                #[doc = ""]
                #[doc = "The origin must conform to the configured `CreateOrigin` and have sufficient funds free."]
                #[doc = ""]
                #[doc = "Funds of sender are reserved by `AssetDeposit`."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
                #[doc = "an existing asset."]
                #[doc = "- `admin`: The admin of this class of assets. The admin is the initial address of each"]
                #[doc = "member of the asset class's admin team."]
                #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                #[doc = ""]
                #[doc = "Emits `Created` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn create(
                    &self,
                    id: ::core::primitive::u128,
                    admin: runtime_types::account::AccountId20,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Create> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "create",
                        types::Create {
                            id,
                            admin,
                            min_balance,
                        },
                        [
                            174u8, 183u8, 0u8, 70u8, 93u8, 8u8, 123u8, 123u8, 144u8, 27u8, 239u8,
                            205u8, 73u8, 127u8, 178u8, 251u8, 97u8, 78u8, 236u8, 212u8, 196u8,
                            57u8, 12u8, 25u8, 117u8, 168u8, 160u8, 141u8, 248u8, 200u8, 21u8, 8u8,
                        ],
                    )
                }
                #[doc = "Issue a new class of fungible assets from a privileged origin."]
                #[doc = ""]
                #[doc = "This new asset class has no assets initially."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin`."]
                #[doc = ""]
                #[doc = "Unlike `create`, no funds are reserved."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
                #[doc = "an existing asset."]
                #[doc = "- `owner`: The owner of this class of assets. The owner has full superuser permissions"]
                #[doc = "over this asset, but may later change and configure the permissions using"]
                #[doc = "`transfer_ownership` and `set_team`."]
                #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                #[doc = ""]
                #[doc = "Emits `ForceCreated` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_create(
                    &self,
                    id: ::core::primitive::u128,
                    owner: runtime_types::account::AccountId20,
                    is_sufficient: ::core::primitive::bool,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceCreate> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "force_create",
                        types::ForceCreate {
                            id,
                            owner,
                            is_sufficient,
                            min_balance,
                        },
                        [
                            182u8, 78u8, 86u8, 61u8, 54u8, 67u8, 196u8, 218u8, 73u8, 168u8, 54u8,
                            172u8, 231u8, 134u8, 84u8, 118u8, 71u8, 210u8, 104u8, 66u8, 234u8,
                            18u8, 233u8, 9u8, 241u8, 188u8, 80u8, 76u8, 105u8, 255u8, 52u8, 120u8,
                        ],
                    )
                }
                #[doc = "Start the process of destroying a fungible asset class."]
                #[doc = ""]
                #[doc = "`start_destroy` is the first in a series of extrinsics that should be called, to allow"]
                #[doc = "destruction of an asset class."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                #[doc = "  asset."]
                #[doc = ""]
                #[doc = "The asset class must be frozen before calling `start_destroy`."]
                pub fn start_destroy(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::StartDestroy> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "start_destroy",
                        types::StartDestroy { id },
                        [
                            36u8, 72u8, 6u8, 145u8, 192u8, 32u8, 10u8, 242u8, 40u8, 2u8, 163u8,
                            102u8, 214u8, 89u8, 25u8, 174u8, 20u8, 151u8, 224u8, 238u8, 117u8,
                            94u8, 174u8, 58u8, 77u8, 73u8, 19u8, 15u8, 232u8, 60u8, 150u8, 1u8,
                        ],
                    )
                }
                #[doc = "Destroy all accounts associated with a given asset."]
                #[doc = ""]
                #[doc = "`destroy_accounts` should only be called after `start_destroy` has been called, and the"]
                #[doc = "asset is in a `Destroying` state."]
                #[doc = ""]
                #[doc = "Due to weight restrictions, this function may need to be called multiple times to fully"]
                #[doc = "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                #[doc = "  asset."]
                #[doc = ""]
                #[doc = "Each call emits the `Event::DestroyedAccounts` event."]
                pub fn destroy_accounts(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::DestroyAccounts> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "destroy_accounts",
                        types::DestroyAccounts { id },
                        [
                            195u8, 7u8, 198u8, 206u8, 127u8, 210u8, 166u8, 3u8, 39u8, 199u8, 24u8,
                            142u8, 239u8, 117u8, 217u8, 110u8, 125u8, 75u8, 89u8, 240u8, 180u8,
                            96u8, 72u8, 136u8, 36u8, 10u8, 34u8, 196u8, 112u8, 131u8, 238u8, 121u8,
                        ],
                    )
                }
                #[doc = "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit)."]
                #[doc = ""]
                #[doc = "`destroy_approvals` should only be called after `start_destroy` has been called, and the"]
                #[doc = "asset is in a `Destroying` state."]
                #[doc = ""]
                #[doc = "Due to weight restrictions, this function may need to be called multiple times to fully"]
                #[doc = "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                #[doc = "  asset."]
                #[doc = ""]
                #[doc = "Each call emits the `Event::DestroyedApprovals` event."]
                pub fn destroy_approvals(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::DestroyApprovals> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "destroy_approvals",
                        types::DestroyApprovals { id },
                        [
                            215u8, 174u8, 117u8, 99u8, 201u8, 118u8, 171u8, 136u8, 37u8, 121u8,
                            209u8, 53u8, 154u8, 45u8, 28u8, 201u8, 186u8, 120u8, 4u8, 63u8, 142u8,
                            222u8, 92u8, 245u8, 149u8, 219u8, 91u8, 186u8, 224u8, 173u8, 186u8,
                            236u8,
                        ],
                    )
                }
                #[doc = "Complete destroying asset and unreserve currency."]
                #[doc = ""]
                #[doc = "`finish_destroy` should only be called after `start_destroy` has been called, and the"]
                #[doc = "asset is in a `Destroying` state. All accounts or approvals should be destroyed before"]
                #[doc = "hand."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                #[doc = "  asset."]
                #[doc = ""]
                #[doc = "Each successful call emits the `Event::Destroyed` event."]
                pub fn finish_destroy(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::FinishDestroy> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "finish_destroy",
                        types::FinishDestroy { id },
                        [
                            235u8, 198u8, 160u8, 5u8, 223u8, 83u8, 17u8, 160u8, 183u8, 81u8, 61u8,
                            171u8, 23u8, 98u8, 39u8, 234u8, 65u8, 197u8, 193u8, 39u8, 175u8, 142u8,
                            138u8, 169u8, 148u8, 136u8, 152u8, 75u8, 21u8, 33u8, 159u8, 221u8,
                        ],
                    )
                }
                #[doc = "Mint assets of a particular class."]
                #[doc = ""]
                #[doc = "The origin must be Signed and the sender must be the Issuer of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount minted."]
                #[doc = "- `beneficiary`: The account to be credited with the minted assets."]
                #[doc = "- `amount`: The amount of the asset to be minted."]
                #[doc = ""]
                #[doc = "Emits `Issued` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."]
                pub fn mint(
                    &self,
                    id: ::core::primitive::u128,
                    beneficiary: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Mint> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "mint",
                        types::Mint {
                            id,
                            beneficiary,
                            amount,
                        },
                        [
                            179u8, 94u8, 220u8, 155u8, 18u8, 149u8, 183u8, 11u8, 67u8, 205u8,
                            175u8, 230u8, 98u8, 81u8, 36u8, 23u8, 181u8, 82u8, 242u8, 47u8, 155u8,
                            254u8, 224u8, 67u8, 191u8, 118u8, 115u8, 204u8, 70u8, 219u8, 202u8,
                            54u8,
                        ],
                    )
                }
                #[doc = "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Manager of the asset `id`."]
                #[doc = ""]
                #[doc = "Bails with `NoAccount` if the `who` is already dead."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount burned."]
                #[doc = "- `who`: The account to be debited from."]
                #[doc = "- `amount`: The maximum amount by which `who`'s balance should be reduced."]
                #[doc = ""]
                #[doc = "Emits `Burned` with the actual amount burned. If this takes the balance to below the"]
                #[doc = "minimum for the asset, then the amount burned is increased to take it to zero."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."]
                pub fn burn(
                    &self,
                    id: ::core::primitive::u128,
                    who: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Burn> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "burn",
                        types::Burn { id, who, amount },
                        [
                            149u8, 92u8, 155u8, 15u8, 5u8, 227u8, 131u8, 33u8, 54u8, 44u8, 198u8,
                            51u8, 93u8, 252u8, 108u8, 22u8, 72u8, 216u8, 7u8, 218u8, 247u8, 180u8,
                            248u8, 193u8, 91u8, 1u8, 168u8, 59u8, 2u8, 85u8, 81u8, 250u8,
                        ],
                    )
                }
                #[doc = "Move some assets from the sender account to another."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                #[doc = "- `target`: The account to be credited."]
                #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
                #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
                #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
                #[doc = "the minimum balance. Must be greater than zero."]
                #[doc = ""]
                #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                #[doc = "to zero."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
                #[doc = "`target`."]
                pub fn transfer(
                    &self,
                    id: ::core::primitive::u128,
                    target: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "transfer",
                        types::Transfer { id, target, amount },
                        [
                            226u8, 122u8, 201u8, 90u8, 60u8, 216u8, 124u8, 208u8, 205u8, 224u8,
                            57u8, 103u8, 121u8, 164u8, 244u8, 116u8, 23u8, 29u8, 16u8, 150u8, 2u8,
                            138u8, 131u8, 192u8, 62u8, 34u8, 60u8, 24u8, 31u8, 205u8, 229u8, 57u8,
                        ],
                    )
                }
                #[doc = "Move some assets from the sender account to another, keeping the sender account alive."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                #[doc = "- `target`: The account to be credited."]
                #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
                #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
                #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
                #[doc = "the minimum balance. Must be greater than zero."]
                #[doc = ""]
                #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                #[doc = "to zero."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
                #[doc = "`target`."]
                pub fn transfer_keep_alive(
                    &self,
                    id: ::core::primitive::u128,
                    target: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::TransferKeepAlive> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "transfer_keep_alive",
                        types::TransferKeepAlive { id, target, amount },
                        [
                            37u8, 184u8, 41u8, 235u8, 220u8, 175u8, 102u8, 111u8, 232u8, 69u8,
                            193u8, 6u8, 102u8, 118u8, 196u8, 7u8, 142u8, 196u8, 210u8, 161u8,
                            151u8, 148u8, 1u8, 249u8, 93u8, 77u8, 50u8, 105u8, 12u8, 5u8, 150u8,
                            152u8,
                        ],
                    )
                }
                #[doc = "Move some assets from one account to another."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                #[doc = "- `source`: The account to be debited."]
                #[doc = "- `dest`: The account to be credited."]
                #[doc = "- `amount`: The amount by which the `source`'s balance of assets should be reduced and"]
                #[doc = "`dest`'s balance increased. The amount actually transferred may be slightly greater in"]
                #[doc = "the case that the transfer would otherwise take the `source` balance above zero but"]
                #[doc = "below the minimum balance. Must be greater than zero."]
                #[doc = ""]
                #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                #[doc = "to zero."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                #[doc = "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of"]
                #[doc = "`dest`."]
                pub fn force_transfer(
                    &self,
                    id: ::core::primitive::u128,
                    source: runtime_types::account::AccountId20,
                    dest: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "force_transfer",
                        types::ForceTransfer {
                            id,
                            source,
                            dest,
                            amount,
                        },
                        [
                            8u8, 160u8, 221u8, 67u8, 206u8, 193u8, 218u8, 153u8, 132u8, 202u8,
                            164u8, 153u8, 172u8, 97u8, 255u8, 136u8, 155u8, 200u8, 212u8, 214u8,
                            75u8, 173u8, 229u8, 132u8, 50u8, 74u8, 72u8, 228u8, 205u8, 0u8, 38u8,
                            93u8,
                        ],
                    )
                }
                #[doc = "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`"]
                #[doc = "must already exist as an entry in `Account`s of the asset. If you want to freeze an"]
                #[doc = "account that does not have an entry, use `touch_other` first."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be frozen."]
                #[doc = "- `who`: The account to be frozen."]
                #[doc = ""]
                #[doc = "Emits `Frozen`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn freeze(
                    &self,
                    id: ::core::primitive::u128,
                    who: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::Freeze> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "freeze",
                        types::Freeze { id, who },
                        [
                            234u8, 178u8, 162u8, 190u8, 187u8, 133u8, 73u8, 101u8, 143u8, 54u8,
                            71u8, 23u8, 201u8, 84u8, 198u8, 196u8, 197u8, 202u8, 109u8, 141u8,
                            185u8, 232u8, 226u8, 59u8, 110u8, 28u8, 172u8, 153u8, 189u8, 236u8,
                            160u8, 57u8,
                        ],
                    )
                }
                #[doc = "Allow unprivileged transfers to and from an account again."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be frozen."]
                #[doc = "- `who`: The account to be unfrozen."]
                #[doc = ""]
                #[doc = "Emits `Thawed`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn thaw(
                    &self,
                    id: ::core::primitive::u128,
                    who: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::Thaw> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "thaw",
                        types::Thaw { id, who },
                        [
                            247u8, 167u8, 86u8, 50u8, 254u8, 204u8, 56u8, 174u8, 163u8, 166u8,
                            233u8, 249u8, 103u8, 99u8, 224u8, 195u8, 19u8, 175u8, 42u8, 240u8,
                            25u8, 115u8, 62u8, 39u8, 231u8, 10u8, 114u8, 59u8, 164u8, 201u8, 236u8,
                            41u8,
                        ],
                    )
                }
                #[doc = "Disallow further unprivileged transfers for the asset class."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be frozen."]
                #[doc = ""]
                #[doc = "Emits `Frozen`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn freeze_asset(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::FreezeAsset> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "freeze_asset",
                        types::FreezeAsset { id },
                        [
                            189u8, 253u8, 85u8, 111u8, 106u8, 34u8, 124u8, 108u8, 39u8, 240u8,
                            26u8, 83u8, 0u8, 110u8, 218u8, 93u8, 216u8, 82u8, 14u8, 5u8, 241u8,
                            172u8, 15u8, 250u8, 220u8, 101u8, 196u8, 18u8, 214u8, 208u8, 149u8,
                            148u8,
                        ],
                    )
                }
                #[doc = "Allow unprivileged transfers for the asset again."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be thawed."]
                #[doc = ""]
                #[doc = "Emits `Thawed`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn thaw_asset(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ThawAsset> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "thaw_asset",
                        types::ThawAsset { id },
                        [
                            15u8, 56u8, 25u8, 188u8, 111u8, 220u8, 108u8, 41u8, 232u8, 254u8, 58u8,
                            202u8, 249u8, 240u8, 2u8, 45u8, 128u8, 89u8, 116u8, 120u8, 24u8, 99u8,
                            88u8, 99u8, 97u8, 254u8, 166u8, 174u8, 103u8, 23u8, 42u8, 74u8,
                        ],
                    )
                }
                #[doc = "Change the Owner of an asset."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `owner`: The new Owner of this asset."]
                #[doc = ""]
                #[doc = "Emits `OwnerChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn transfer_ownership(
                    &self,
                    id: ::core::primitive::u128,
                    owner: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::TransferOwnership> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "transfer_ownership",
                        types::TransferOwnership { id, owner },
                        [
                            210u8, 109u8, 67u8, 255u8, 45u8, 232u8, 243u8, 114u8, 107u8, 166u8,
                            209u8, 232u8, 77u8, 94u8, 119u8, 133u8, 9u8, 39u8, 183u8, 227u8, 244u8,
                            46u8, 147u8, 10u8, 138u8, 235u8, 186u8, 2u8, 106u8, 14u8, 126u8, 251u8,
                        ],
                    )
                }
                #[doc = "Change the Issuer, Admin and Freezer of an asset."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to be frozen."]
                #[doc = "- `issuer`: The new Issuer of this asset."]
                #[doc = "- `admin`: The new Admin of this asset."]
                #[doc = "- `freezer`: The new Freezer of this asset."]
                #[doc = ""]
                #[doc = "Emits `TeamChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn set_team(
                    &self,
                    id: ::core::primitive::u128,
                    issuer: runtime_types::account::AccountId20,
                    admin: runtime_types::account::AccountId20,
                    freezer: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::SetTeam> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "set_team",
                        types::SetTeam {
                            id,
                            issuer,
                            admin,
                            freezer,
                        },
                        [
                            172u8, 175u8, 179u8, 252u8, 234u8, 249u8, 4u8, 39u8, 241u8, 15u8, 37u8,
                            0u8, 123u8, 129u8, 79u8, 110u8, 139u8, 191u8, 172u8, 177u8, 83u8,
                            205u8, 13u8, 113u8, 254u8, 203u8, 123u8, 118u8, 102u8, 90u8, 119u8,
                            38u8,
                        ],
                    )
                }
                #[doc = "Set the metadata for an asset."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                #[doc = ""]
                #[doc = "Funds of sender are reserved according to the formula:"]
                #[doc = "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into"]
                #[doc = "account any already reserved funds."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to update."]
                #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
                #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
                #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
                #[doc = ""]
                #[doc = "Emits `MetadataSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn set_metadata(
                    &self,
                    id: ::core::primitive::u128,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    symbol: ::std::vec::Vec<::core::primitive::u8>,
                    decimals: ::core::primitive::u8,
                ) -> ::subxt::tx::Payload<types::SetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "set_metadata",
                        types::SetMetadata {
                            id,
                            name,
                            symbol,
                            decimals,
                        },
                        [
                            53u8, 40u8, 19u8, 104u8, 202u8, 184u8, 183u8, 250u8, 2u8, 60u8, 232u8,
                            140u8, 159u8, 97u8, 246u8, 139u8, 230u8, 111u8, 186u8, 159u8, 170u8,
                            192u8, 205u8, 186u8, 96u8, 25u8, 89u8, 75u8, 230u8, 247u8, 181u8,
                            211u8,
                        ],
                    )
                }
                #[doc = "Clear the metadata for an asset."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                #[doc = ""]
                #[doc = "Any deposit is freed for the asset owner."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to clear."]
                #[doc = ""]
                #[doc = "Emits `MetadataCleared`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn clear_metadata(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ClearMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "clear_metadata",
                        types::ClearMetadata { id },
                        [
                            137u8, 235u8, 66u8, 91u8, 5u8, 130u8, 150u8, 242u8, 209u8, 166u8, 32u8,
                            157u8, 49u8, 158u8, 49u8, 199u8, 209u8, 107u8, 21u8, 125u8, 222u8,
                            19u8, 41u8, 120u8, 207u8, 168u8, 5u8, 177u8, 171u8, 9u8, 176u8, 238u8,
                        ],
                    )
                }
                #[doc = "Force the metadata for an asset to some value."]
                #[doc = ""]
                #[doc = "Origin must be ForceOrigin."]
                #[doc = ""]
                #[doc = "Any deposit is left alone."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to update."]
                #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
                #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
                #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
                #[doc = ""]
                #[doc = "Emits `MetadataSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."]
                pub fn force_set_metadata(
                    &self,
                    id: ::core::primitive::u128,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    symbol: ::std::vec::Vec<::core::primitive::u8>,
                    decimals: ::core::primitive::u8,
                    is_frozen: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::ForceSetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "force_set_metadata",
                        types::ForceSetMetadata {
                            id,
                            name,
                            symbol,
                            decimals,
                            is_frozen,
                        },
                        [
                            177u8, 45u8, 247u8, 110u8, 214u8, 132u8, 130u8, 86u8, 46u8, 201u8,
                            169u8, 19u8, 46u8, 89u8, 227u8, 114u8, 195u8, 46u8, 135u8, 216u8,
                            202u8, 78u8, 182u8, 114u8, 126u8, 71u8, 34u8, 13u8, 48u8, 19u8, 99u8,
                            192u8,
                        ],
                    )
                }
                #[doc = "Clear the metadata for an asset."]
                #[doc = ""]
                #[doc = "Origin must be ForceOrigin."]
                #[doc = ""]
                #[doc = "Any deposit is returned."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset to clear."]
                #[doc = ""]
                #[doc = "Emits `MetadataCleared`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_clear_metadata(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceClearMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "force_clear_metadata",
                        types::ForceClearMetadata { id },
                        [
                            214u8, 13u8, 163u8, 168u8, 249u8, 152u8, 53u8, 201u8, 218u8, 161u8,
                            23u8, 187u8, 48u8, 132u8, 66u8, 172u8, 118u8, 76u8, 229u8, 139u8,
                            234u8, 64u8, 28u8, 86u8, 91u8, 155u8, 38u8, 136u8, 141u8, 136u8, 43u8,
                            150u8,
                        ],
                    )
                }
                #[doc = "Alter the attributes of a given asset."]
                #[doc = ""]
                #[doc = "Origin must be `ForceOrigin`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `owner`: The new Owner of this asset."]
                #[doc = "- `issuer`: The new Issuer of this asset."]
                #[doc = "- `admin`: The new Admin of this asset."]
                #[doc = "- `freezer`: The new Freezer of this asset."]
                #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                #[doc = "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient"]
                #[doc = "value to account for the state bloat associated with its balance storage. If set to"]
                #[doc = "`true`, then non-zero balances may be stored without a `consumer` reference (and thus"]
                #[doc = "an ED in the Balances pallet or whatever else is used to control user-account state"]
                #[doc = "growth)."]
                #[doc = "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin"]
                #[doc = "instructions."]
                #[doc = ""]
                #[doc = "Emits `AssetStatusChanged` with the identity of the asset."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_asset_status(
                    &self,
                    id: ::core::primitive::u128,
                    owner: runtime_types::account::AccountId20,
                    issuer: runtime_types::account::AccountId20,
                    admin: runtime_types::account::AccountId20,
                    freezer: runtime_types::account::AccountId20,
                    min_balance: ::core::primitive::u128,
                    is_sufficient: ::core::primitive::bool,
                    is_frozen: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::ForceAssetStatus> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "force_asset_status",
                        types::ForceAssetStatus {
                            id,
                            owner,
                            issuer,
                            admin,
                            freezer,
                            min_balance,
                            is_sufficient,
                            is_frozen,
                        },
                        [
                            123u8, 18u8, 105u8, 243u8, 124u8, 37u8, 135u8, 108u8, 150u8, 173u8,
                            46u8, 49u8, 109u8, 255u8, 230u8, 169u8, 158u8, 180u8, 122u8, 34u8,
                            199u8, 14u8, 132u8, 189u8, 49u8, 199u8, 132u8, 164u8, 173u8, 237u8,
                            109u8, 177u8,
                        ],
                    )
                }
                #[doc = "Approve an amount of asset for transfer by a delegated third-party account."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = ""]
                #[doc = "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account"]
                #[doc = "for the purpose of holding the approval. If some non-zero amount of assets is already"]
                #[doc = "approved from signing account to `delegate`, then it is topped up or unreserved to"]
                #[doc = "meet the right value."]
                #[doc = ""]
                #[doc = "NOTE: The signing account does not need to own `amount` of assets at the point of"]
                #[doc = "making this call."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `delegate`: The account to delegate permission to transfer asset."]
                #[doc = "- `amount`: The amount of asset that may be transferred by `delegate`. If there is"]
                #[doc = "already an approval in place, then this acts additively."]
                #[doc = ""]
                #[doc = "Emits `ApprovedTransfer` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn approve_transfer(
                    &self,
                    id: ::core::primitive::u128,
                    delegate: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ApproveTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "approve_transfer",
                        types::ApproveTransfer {
                            id,
                            delegate,
                            amount,
                        },
                        [
                            143u8, 73u8, 247u8, 236u8, 152u8, 148u8, 83u8, 90u8, 84u8, 214u8,
                            125u8, 46u8, 11u8, 252u8, 71u8, 73u8, 35u8, 108u8, 114u8, 74u8, 102u8,
                            69u8, 148u8, 68u8, 120u8, 91u8, 92u8, 128u8, 222u8, 238u8, 63u8, 181u8,
                        ],
                    )
                }
                #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
                #[doc = ""]
                #[doc = "Origin must be Signed and there must be an approval in place between signer and"]
                #[doc = "`delegate`."]
                #[doc = ""]
                #[doc = "Unreserves any deposit previously reserved by `approve_transfer` for the approval."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `delegate`: The account delegated permission to transfer asset."]
                #[doc = ""]
                #[doc = "Emits `ApprovalCancelled` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn cancel_approval(
                    &self,
                    id: ::core::primitive::u128,
                    delegate: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::CancelApproval> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "cancel_approval",
                        types::CancelApproval { id, delegate },
                        [
                            74u8, 95u8, 200u8, 63u8, 33u8, 253u8, 196u8, 115u8, 216u8, 45u8, 76u8,
                            7u8, 239u8, 48u8, 223u8, 110u8, 113u8, 94u8, 85u8, 151u8, 33u8, 239u8,
                            99u8, 103u8, 16u8, 159u8, 147u8, 148u8, 138u8, 167u8, 224u8, 157u8,
                        ],
                    )
                }
                #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
                #[doc = ""]
                #[doc = "Origin must be either ForceOrigin or Signed origin with the signer being the Admin"]
                #[doc = "account of the asset `id`."]
                #[doc = ""]
                #[doc = "Unreserves any deposit previously reserved by `approve_transfer` for the approval."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `delegate`: The account delegated permission to transfer asset."]
                #[doc = ""]
                #[doc = "Emits `ApprovalCancelled` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_cancel_approval(
                    &self,
                    id: ::core::primitive::u128,
                    owner: runtime_types::account::AccountId20,
                    delegate: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::ForceCancelApproval> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "force_cancel_approval",
                        types::ForceCancelApproval {
                            id,
                            owner,
                            delegate,
                        },
                        [
                            102u8, 167u8, 183u8, 235u8, 248u8, 78u8, 81u8, 231u8, 21u8, 195u8,
                            224u8, 51u8, 247u8, 195u8, 214u8, 132u8, 163u8, 245u8, 44u8, 33u8,
                            29u8, 97u8, 49u8, 95u8, 89u8, 138u8, 159u8, 166u8, 58u8, 173u8, 229u8,
                            206u8,
                        ],
                    )
                }
                #[doc = "Transfer some asset balance from a previously delegated account to some third-party"]
                #[doc = "account."]
                #[doc = ""]
                #[doc = "Origin must be Signed and there must be an approval in place by the `owner` to the"]
                #[doc = "signer."]
                #[doc = ""]
                #[doc = "If the entire amount approved for transfer is transferred, then any deposit previously"]
                #[doc = "reserved by `approve_transfer` is unreserved."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `owner`: The account which previously approved for a transfer of at least `amount` and"]
                #[doc = "from which the asset balance will be withdrawn."]
                #[doc = "- `destination`: The account to which the asset balance of `amount` will be transferred."]
                #[doc = "- `amount`: The amount of assets to transfer."]
                #[doc = ""]
                #[doc = "Emits `TransferredApproved` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn transfer_approved(
                    &self,
                    id: ::core::primitive::u128,
                    owner: runtime_types::account::AccountId20,
                    destination: runtime_types::account::AccountId20,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::TransferApproved> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "transfer_approved",
                        types::TransferApproved {
                            id,
                            owner,
                            destination,
                            amount,
                        },
                        [
                            127u8, 78u8, 117u8, 210u8, 253u8, 81u8, 27u8, 247u8, 214u8, 208u8,
                            40u8, 185u8, 4u8, 140u8, 141u8, 3u8, 253u8, 211u8, 105u8, 93u8, 222u8,
                            233u8, 158u8, 151u8, 240u8, 81u8, 69u8, 208u8, 247u8, 165u8, 94u8,
                            211u8,
                        ],
                    )
                }
                #[doc = "Create an asset account for non-provider assets."]
                #[doc = ""]
                #[doc = "A deposit will be taken from the signer account."]
                #[doc = ""]
                #[doc = "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit"]
                #[doc = "  to be taken."]
                #[doc = "- `id`: The identifier of the asset for the account to be created."]
                #[doc = ""]
                #[doc = "Emits `Touched` event when successful."]
                pub fn touch(
                    &self,
                    id: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Touch> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "touch",
                        types::Touch { id },
                        [
                            93u8, 110u8, 255u8, 67u8, 63u8, 27u8, 179u8, 188u8, 189u8, 16u8, 207u8,
                            50u8, 23u8, 89u8, 125u8, 220u8, 81u8, 173u8, 33u8, 242u8, 231u8, 211u8,
                            212u8, 33u8, 135u8, 239u8, 198u8, 58u8, 24u8, 205u8, 236u8, 178u8,
                        ],
                    )
                }
                #[doc = "Return the deposit (if any) of an asset account or a consumer reference (if any) of an"]
                #[doc = "account."]
                #[doc = ""]
                #[doc = "The origin must be Signed."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset for which the caller would like the deposit"]
                #[doc = "  refunded."]
                #[doc = "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund."]
                #[doc = ""]
                #[doc = "Emits `Refunded` event when successful."]
                pub fn refund(
                    &self,
                    id: ::core::primitive::u128,
                    allow_burn: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Refund> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "refund",
                        types::Refund { id, allow_burn },
                        [
                            212u8, 171u8, 194u8, 110u8, 144u8, 125u8, 9u8, 224u8, 173u8, 44u8,
                            146u8, 30u8, 7u8, 51u8, 82u8, 239u8, 18u8, 170u8, 66u8, 201u8, 148u8,
                            189u8, 210u8, 218u8, 98u8, 166u8, 128u8, 77u8, 136u8, 151u8, 114u8,
                            237u8,
                        ],
                    )
                }
                #[doc = "Sets the minimum balance of an asset."]
                #[doc = ""]
                #[doc = "Only works if there aren't any accounts that are holding the asset or if"]
                #[doc = "the new value of `min_balance` is less than the old one."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender has to be the Owner of the"]
                #[doc = "asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset."]
                #[doc = "- `min_balance`: The new value of `min_balance`."]
                #[doc = ""]
                #[doc = "Emits `AssetMinBalanceChanged` event when successful."]
                pub fn set_min_balance(
                    &self,
                    id: ::core::primitive::u128,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::SetMinBalance> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "set_min_balance",
                        types::SetMinBalance { id, min_balance },
                        [
                            237u8, 126u8, 65u8, 131u8, 29u8, 64u8, 78u8, 86u8, 151u8, 18u8, 248u8,
                            45u8, 25u8, 48u8, 219u8, 17u8, 211u8, 81u8, 53u8, 5u8, 17u8, 214u8,
                            86u8, 143u8, 79u8, 200u8, 88u8, 147u8, 150u8, 103u8, 228u8, 253u8,
                        ],
                    )
                }
                #[doc = "Create an asset account for `who`."]
                #[doc = ""]
                #[doc = "A deposit will be taken from the signer account."]
                #[doc = ""]
                #[doc = "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account"]
                #[doc = "  must have sufficient funds for a deposit to be taken."]
                #[doc = "- `id`: The identifier of the asset for the account to be created."]
                #[doc = "- `who`: The account to be created."]
                #[doc = ""]
                #[doc = "Emits `Touched` event when successful."]
                pub fn touch_other(
                    &self,
                    id: ::core::primitive::u128,
                    who: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::TouchOther> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "touch_other",
                        types::TouchOther { id, who },
                        [
                            223u8, 183u8, 91u8, 128u8, 204u8, 132u8, 120u8, 58u8, 37u8, 134u8, 1u8,
                            244u8, 151u8, 144u8, 234u8, 112u8, 236u8, 72u8, 153u8, 41u8, 235u8,
                            46u8, 19u8, 7u8, 180u8, 237u8, 147u8, 65u8, 122u8, 210u8, 95u8, 223u8,
                        ],
                    )
                }
                #[doc = "Return the deposit (if any) of a target asset account. Useful if you are the depositor."]
                #[doc = ""]
                #[doc = "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In"]
                #[doc = "order to burn a non-zero balance of the asset, the caller must be the account and should"]
                #[doc = "use `refund`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the asset for the account holding a deposit."]
                #[doc = "- `who`: The account to refund."]
                #[doc = ""]
                #[doc = "Emits `Refunded` event when successful."]
                pub fn refund_other(
                    &self,
                    id: ::core::primitive::u128,
                    who: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::RefundOther> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "refund_other",
                        types::RefundOther { id, who },
                        [
                            160u8, 167u8, 195u8, 10u8, 50u8, 180u8, 160u8, 233u8, 209u8, 140u8,
                            69u8, 237u8, 28u8, 95u8, 47u8, 174u8, 116u8, 36u8, 17u8, 122u8, 102u8,
                            231u8, 180u8, 215u8, 27u8, 165u8, 155u8, 62u8, 38u8, 235u8, 89u8,
                            201u8,
                        ],
                    )
                }
                #[doc = "Disallow further unprivileged transfers of an asset `id` to and from an account `who`."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                #[doc = ""]
                #[doc = "- `id`: The identifier of the account's asset."]
                #[doc = "- `who`: The account to be unblocked."]
                #[doc = ""]
                #[doc = "Emits `Blocked`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn block(
                    &self,
                    id: ::core::primitive::u128,
                    who: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::Block> {
                    ::subxt::tx::Payload::new_static(
                        "LocalAssets",
                        "block",
                        types::Block { id, who },
                        [
                            131u8, 220u8, 231u8, 90u8, 100u8, 3u8, 191u8, 149u8, 116u8, 73u8,
                            176u8, 103u8, 72u8, 238u8, 76u8, 243u8, 211u8, 246u8, 167u8, 119u8,
                            89u8, 33u8, 206u8, 161u8, 89u8, 192u8, 222u8, 220u8, 245u8, 208u8,
                            171u8, 69u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_assets::pallet::Event2;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset class was created."]
            pub struct Created {
                pub asset_id: ::core::primitive::u128,
                pub creator: runtime_types::account::AccountId20,
                pub owner: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Created {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets were issued."]
            pub struct Issued {
                pub asset_id: ::core::primitive::u128,
                pub owner: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Issued {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets were transferred."]
            pub struct Transferred {
                pub asset_id: ::core::primitive::u128,
                pub from: runtime_types::account::AccountId20,
                pub to: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Transferred {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "Transferred";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets were destroyed."]
            pub struct Burned {
                pub asset_id: ::core::primitive::u128,
                pub owner: runtime_types::account::AccountId20,
                pub balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Burned {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The management team changed."]
            pub struct TeamChanged {
                pub asset_id: ::core::primitive::u128,
                pub issuer: runtime_types::account::AccountId20,
                pub admin: runtime_types::account::AccountId20,
                pub freezer: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for TeamChanged {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "TeamChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The owner changed."]
            pub struct OwnerChanged {
                pub asset_id: ::core::primitive::u128,
                pub owner: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for OwnerChanged {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "OwnerChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was frozen."]
            pub struct Frozen {
                pub asset_id: ::core::primitive::u128,
                pub who: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Frozen {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "Frozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was thawed."]
            pub struct Thawed {
                pub asset_id: ::core::primitive::u128,
                pub who: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Thawed {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "Thawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset `asset_id` was frozen."]
            pub struct AssetFrozen {
                pub asset_id: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for AssetFrozen {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "AssetFrozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset `asset_id` was thawed."]
            pub struct AssetThawed {
                pub asset_id: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for AssetThawed {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "AssetThawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Accounts were destroyed for given asset."]
            pub struct AccountsDestroyed {
                pub asset_id: ::core::primitive::u128,
                pub accounts_destroyed: ::core::primitive::u32,
                pub accounts_remaining: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AccountsDestroyed {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "AccountsDestroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Approvals were destroyed for given asset."]
            pub struct ApprovalsDestroyed {
                pub asset_id: ::core::primitive::u128,
                pub approvals_destroyed: ::core::primitive::u32,
                pub approvals_remaining: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ApprovalsDestroyed {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "ApprovalsDestroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An asset class is in the process of being destroyed."]
            pub struct DestructionStarted {
                pub asset_id: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DestructionStarted {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "DestructionStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An asset class was destroyed."]
            pub struct Destroyed {
                pub asset_id: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Destroyed {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "Destroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset class was force-created."]
            pub struct ForceCreated {
                pub asset_id: ::core::primitive::u128,
                pub owner: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for ForceCreated {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "ForceCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New metadata has been set for an asset."]
            pub struct MetadataSet {
                pub asset_id: ::core::primitive::u128,
                pub name: ::std::vec::Vec<::core::primitive::u8>,
                pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                pub decimals: ::core::primitive::u8,
                pub is_frozen: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata has been cleared for an asset."]
            pub struct MetadataCleared {
                pub asset_id: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for MetadataCleared {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "MetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "(Additional) funds have been approved for transfer to a destination account."]
            pub struct ApprovedTransfer {
                pub asset_id: ::core::primitive::u128,
                pub source: runtime_types::account::AccountId20,
                pub delegate: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for ApprovedTransfer {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "ApprovedTransfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An approval for account `delegate` was cancelled by `owner`."]
            pub struct ApprovalCancelled {
                pub asset_id: ::core::primitive::u128,
                pub owner: runtime_types::account::AccountId20,
                pub delegate: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for ApprovalCancelled {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "ApprovalCancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
            #[doc = "the approved `delegate`."]
            pub struct TransferredApproved {
                pub asset_id: ::core::primitive::u128,
                pub owner: runtime_types::account::AccountId20,
                pub delegate: runtime_types::account::AccountId20,
                pub destination: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TransferredApproved {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "TransferredApproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An asset has had its attributes changed by the `Force` origin."]
            pub struct AssetStatusChanged {
                pub asset_id: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for AssetStatusChanged {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "AssetStatusChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The min_balance of an asset has been updated by the asset owner."]
            pub struct AssetMinBalanceChanged {
                pub asset_id: ::core::primitive::u128,
                pub new_min_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for AssetMinBalanceChanged {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "AssetMinBalanceChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was created with a deposit from `depositor`."]
            pub struct Touched {
                pub asset_id: ::core::primitive::u128,
                pub who: runtime_types::account::AccountId20,
                pub depositor: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Touched {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "Touched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was blocked."]
            pub struct Blocked {
                pub asset_id: ::core::primitive::u128,
                pub who: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for Blocked {
                const PALLET: &'static str = "LocalAssets";
                const EVENT: &'static str = "Blocked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Details of an asset."]
                pub fn asset(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetDetails<
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "LocalAssets",
                        "Asset",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            0u8, 255u8, 133u8, 57u8, 64u8, 140u8, 84u8, 58u8, 240u8, 153u8, 62u8,
                            191u8, 124u8, 116u8, 12u8, 185u8, 115u8, 244u8, 237u8, 77u8, 20u8,
                            78u8, 153u8, 222u8, 8u8, 98u8, 190u8, 99u8, 95u8, 144u8, 201u8, 118u8,
                        ],
                    )
                }
                #[doc = " Details of an asset."]
                pub fn asset_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetDetails<
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "LocalAssets",
                        "Asset",
                        Vec::new(),
                        [
                            0u8, 255u8, 133u8, 57u8, 64u8, 140u8, 84u8, 58u8, 240u8, 153u8, 62u8,
                            191u8, 124u8, 116u8, 12u8, 185u8, 115u8, 244u8, 237u8, 77u8, 20u8,
                            78u8, 153u8, 222u8, 8u8, 98u8, 190u8, 99u8, 95u8, 144u8, 201u8, 118u8,
                        ],
                    )
                }
                #[doc = " The holdings of a specific account for a specific asset."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                    _1: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetAccount<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        (),
                        runtime_types::account::AccountId20,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "LocalAssets",
                        "Account",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            155u8, 249u8, 218u8, 155u8, 65u8, 235u8, 32u8, 249u8, 96u8, 16u8,
                            167u8, 217u8, 5u8, 78u8, 96u8, 88u8, 197u8, 64u8, 253u8, 26u8, 251u8,
                            47u8, 241u8, 236u8, 174u8, 247u8, 37u8, 169u8, 88u8, 245u8, 229u8,
                            175u8,
                        ],
                    )
                }
                #[doc = " The holdings of a specific account for a specific asset."]
                pub fn account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetAccount<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        (),
                        runtime_types::account::AccountId20,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "LocalAssets",
                        "Account",
                        Vec::new(),
                        [
                            155u8, 249u8, 218u8, 155u8, 65u8, 235u8, 32u8, 249u8, 96u8, 16u8,
                            167u8, 217u8, 5u8, 78u8, 96u8, 88u8, 197u8, 64u8, 253u8, 26u8, 251u8,
                            47u8, 241u8, 236u8, 174u8, 247u8, 37u8, 169u8, 88u8, 245u8, 229u8,
                            175u8,
                        ],
                    )
                }
                #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
                #[doc = " is the amount of `T::Currency` reserved for storing this."]
                #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]
                pub fn approvals(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                    _1: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                    _2: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::Approval<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "LocalAssets",
                        "Approvals",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
                        ],
                        [
                            6u8, 182u8, 21u8, 189u8, 182u8, 11u8, 175u8, 168u8, 46u8, 165u8, 75u8,
                            65u8, 130u8, 167u8, 96u8, 47u8, 80u8, 134u8, 56u8, 152u8, 69u8, 49u8,
                            137u8, 126u8, 56u8, 43u8, 201u8, 38u8, 26u8, 114u8, 66u8, 1u8,
                        ],
                    )
                }
                #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
                #[doc = " is the amount of `T::Currency` reserved for storing this."]
                #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]
                pub fn approvals_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::Approval<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "LocalAssets",
                        "Approvals",
                        Vec::new(),
                        [
                            6u8, 182u8, 21u8, 189u8, 182u8, 11u8, 175u8, 168u8, 46u8, 165u8, 75u8,
                            65u8, 130u8, 167u8, 96u8, 47u8, 80u8, 134u8, 56u8, 152u8, 69u8, 49u8,
                            137u8, 126u8, 56u8, 43u8, 201u8, 38u8, 26u8, 114u8, 66u8, 1u8,
                        ],
                    )
                }
                #[doc = " Metadata of an asset."]
                pub fn metadata(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u128>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetMetadata<
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "LocalAssets",
                        "Metadata",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            9u8, 154u8, 67u8, 209u8, 73u8, 219u8, 203u8, 105u8, 197u8, 101u8,
                            174u8, 94u8, 37u8, 239u8, 121u8, 52u8, 186u8, 127u8, 29u8, 182u8, 32u8,
                            21u8, 49u8, 140u8, 135u8, 144u8, 231u8, 73u8, 33u8, 158u8, 27u8, 241u8,
                        ],
                    )
                }
                #[doc = " Metadata of an asset."]
                pub fn metadata_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetMetadata<
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "LocalAssets",
                        "Metadata",
                        Vec::new(),
                        [
                            9u8, 154u8, 67u8, 209u8, 73u8, 219u8, 203u8, 105u8, 197u8, 101u8,
                            174u8, 94u8, 37u8, 239u8, 121u8, 52u8, 186u8, 127u8, 29u8, 182u8, 32u8,
                            21u8, 49u8, 140u8, 135u8, 144u8, 231u8, 73u8, 33u8, 158u8, 27u8, 241u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call."]
                #[doc = ""]
                #[doc = " Must be configured to result in a weight that makes each call fit in a block."]
                pub fn remove_items_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "LocalAssets",
                        "RemoveItemsLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved for an asset."]
                pub fn asset_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "LocalAssets",
                        "AssetDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of funds that must be reserved for a non-provider asset account to be"]
                #[doc = " maintained."]
                pub fn asset_account_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "LocalAssets",
                        "AssetAccountDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved when adding metadata to your asset."]
                pub fn metadata_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "LocalAssets",
                        "MetadataDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The additional funds that must be reserved for the number of bytes you store in your"]
                #[doc = " metadata."]
                pub fn metadata_deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "LocalAssets",
                        "MetadataDepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of funds that must be reserved when creating a new approval."]
                pub fn approval_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "LocalAssets",
                        "ApprovalDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a name or symbol stored on-chain."]
                pub fn string_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "LocalAssets",
                        "StringLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod moonbeam_orbiters {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "An error that can occur while executing this pallet's extrinsics."]
        pub type Error = runtime_types::pallet_moonbeam_orbiters::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_moonbeam_orbiters::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CollatorAddOrbiter {
                    pub orbiter: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for CollatorAddOrbiter {
                    const PALLET: &'static str = "MoonbeamOrbiters";
                    const CALL: &'static str = "collator_add_orbiter";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CollatorRemoveOrbiter {
                    pub orbiter: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for CollatorRemoveOrbiter {
                    const PALLET: &'static str = "MoonbeamOrbiters";
                    const CALL: &'static str = "collator_remove_orbiter";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OrbiterLeaveCollatorPool {
                    pub collator: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for OrbiterLeaveCollatorPool {
                    const PALLET: &'static str = "MoonbeamOrbiters";
                    const CALL: &'static str = "orbiter_leave_collator_pool";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OrbiterRegister;
                impl ::subxt::blocks::StaticExtrinsic for OrbiterRegister {
                    const PALLET: &'static str = "MoonbeamOrbiters";
                    const CALL: &'static str = "orbiter_register";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OrbiterUnregister {
                    pub collators_pool_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for OrbiterUnregister {
                    const PALLET: &'static str = "MoonbeamOrbiters";
                    const CALL: &'static str = "orbiter_unregister";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddCollator {
                    pub collator: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for AddCollator {
                    const PALLET: &'static str = "MoonbeamOrbiters";
                    const CALL: &'static str = "add_collator";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveCollator {
                    pub collator: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveCollator {
                    const PALLET: &'static str = "MoonbeamOrbiters";
                    const CALL: &'static str = "remove_collator";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Add an orbiter in a collator pool"]
                pub fn collator_add_orbiter(
                    &self,
                    orbiter: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::CollatorAddOrbiter> {
                    ::subxt::tx::Payload::new_static(
                        "MoonbeamOrbiters",
                        "collator_add_orbiter",
                        types::CollatorAddOrbiter { orbiter },
                        [
                            24u8, 161u8, 157u8, 159u8, 211u8, 46u8, 228u8, 198u8, 158u8, 38u8,
                            128u8, 243u8, 75u8, 127u8, 229u8, 24u8, 58u8, 9u8, 70u8, 225u8, 103u8,
                            34u8, 45u8, 161u8, 159u8, 48u8, 24u8, 69u8, 142u8, 206u8, 6u8, 64u8,
                        ],
                    )
                }
                #[doc = "Remove an orbiter from the caller collator pool"]
                pub fn collator_remove_orbiter(
                    &self,
                    orbiter: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::CollatorRemoveOrbiter> {
                    ::subxt::tx::Payload::new_static(
                        "MoonbeamOrbiters",
                        "collator_remove_orbiter",
                        types::CollatorRemoveOrbiter { orbiter },
                        [
                            195u8, 20u8, 179u8, 158u8, 27u8, 14u8, 59u8, 222u8, 141u8, 224u8, 22u8,
                            251u8, 214u8, 65u8, 203u8, 30u8, 78u8, 4u8, 40u8, 79u8, 22u8, 248u8,
                            253u8, 36u8, 168u8, 44u8, 46u8, 254u8, 198u8, 48u8, 229u8, 135u8,
                        ],
                    )
                }
                #[doc = "Remove the caller from the specified collator pool"]
                pub fn orbiter_leave_collator_pool(
                    &self,
                    collator: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::OrbiterLeaveCollatorPool> {
                    ::subxt::tx::Payload::new_static(
                        "MoonbeamOrbiters",
                        "orbiter_leave_collator_pool",
                        types::OrbiterLeaveCollatorPool { collator },
                        [
                            34u8, 181u8, 8u8, 81u8, 61u8, 127u8, 248u8, 176u8, 101u8, 39u8, 88u8,
                            52u8, 124u8, 8u8, 88u8, 30u8, 101u8, 77u8, 41u8, 19u8, 152u8, 39u8,
                            170u8, 243u8, 47u8, 120u8, 246u8, 43u8, 34u8, 209u8, 30u8, 200u8,
                        ],
                    )
                }
                #[doc = "Registering as an orbiter"]
                pub fn orbiter_register(&self) -> ::subxt::tx::Payload<types::OrbiterRegister> {
                    ::subxt::tx::Payload::new_static(
                        "MoonbeamOrbiters",
                        "orbiter_register",
                        types::OrbiterRegister {},
                        [
                            19u8, 176u8, 111u8, 137u8, 26u8, 186u8, 91u8, 253u8, 222u8, 225u8,
                            19u8, 142u8, 32u8, 87u8, 6u8, 173u8, 3u8, 127u8, 3u8, 74u8, 22u8,
                            151u8, 63u8, 132u8, 156u8, 89u8, 158u8, 8u8, 5u8, 75u8, 188u8, 173u8,
                        ],
                    )
                }
                #[doc = "Deregistering from orbiters"]
                pub fn orbiter_unregister(
                    &self,
                    collators_pool_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::OrbiterUnregister> {
                    ::subxt::tx::Payload::new_static(
                        "MoonbeamOrbiters",
                        "orbiter_unregister",
                        types::OrbiterUnregister {
                            collators_pool_count,
                        },
                        [
                            55u8, 134u8, 125u8, 116u8, 186u8, 208u8, 0u8, 19u8, 132u8, 107u8, 23u8,
                            141u8, 235u8, 193u8, 126u8, 144u8, 238u8, 226u8, 21u8, 5u8, 27u8,
                            166u8, 84u8, 165u8, 27u8, 101u8, 141u8, 51u8, 94u8, 206u8, 67u8, 222u8,
                        ],
                    )
                }
                #[doc = "Add a collator to orbiters program."]
                pub fn add_collator(
                    &self,
                    collator: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::AddCollator> {
                    ::subxt::tx::Payload::new_static(
                        "MoonbeamOrbiters",
                        "add_collator",
                        types::AddCollator { collator },
                        [
                            112u8, 219u8, 175u8, 77u8, 43u8, 34u8, 0u8, 6u8, 25u8, 76u8, 213u8,
                            219u8, 70u8, 243u8, 95u8, 236u8, 110u8, 90u8, 39u8, 243u8, 99u8, 117u8,
                            239u8, 116u8, 138u8, 209u8, 63u8, 49u8, 164u8, 253u8, 51u8, 79u8,
                        ],
                    )
                }
                #[doc = "Remove a collator from orbiters program."]
                pub fn remove_collator(
                    &self,
                    collator: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::RemoveCollator> {
                    ::subxt::tx::Payload::new_static(
                        "MoonbeamOrbiters",
                        "remove_collator",
                        types::RemoveCollator { collator },
                        [
                            16u8, 70u8, 164u8, 59u8, 97u8, 140u8, 65u8, 12u8, 202u8, 101u8, 0u8,
                            195u8, 250u8, 193u8, 89u8, 37u8, 229u8, 56u8, 71u8, 211u8, 232u8,
                            109u8, 129u8, 147u8, 5u8, 126u8, 237u8, 67u8, 210u8, 74u8, 140u8,
                            239u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_moonbeam_orbiters::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An orbiter join a collator pool"]
            pub struct OrbiterJoinCollatorPool {
                pub collator: runtime_types::account::AccountId20,
                pub orbiter: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for OrbiterJoinCollatorPool {
                const PALLET: &'static str = "MoonbeamOrbiters";
                const EVENT: &'static str = "OrbiterJoinCollatorPool";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An orbiter leave a collator pool"]
            pub struct OrbiterLeaveCollatorPool {
                pub collator: runtime_types::account::AccountId20,
                pub orbiter: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for OrbiterLeaveCollatorPool {
                const PALLET: &'static str = "MoonbeamOrbiters";
                const EVENT: &'static str = "OrbiterLeaveCollatorPool";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Paid the orbiter account the balance as liquid rewards."]
            pub struct OrbiterRewarded {
                pub account: runtime_types::account::AccountId20,
                pub rewards: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for OrbiterRewarded {
                const PALLET: &'static str = "MoonbeamOrbiters";
                const EVENT: &'static str = "OrbiterRewarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OrbiterRotation {
                pub collator: runtime_types::account::AccountId20,
                pub old_orbiter: ::core::option::Option<runtime_types::account::AccountId20>,
                pub new_orbiter: ::core::option::Option<runtime_types::account::AccountId20>,
            }
            impl ::subxt::events::StaticEvent for OrbiterRotation {
                const PALLET: &'static str = "MoonbeamOrbiters";
                const EVENT: &'static str = "OrbiterRotation";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An orbiter has registered"]
            pub struct OrbiterRegistered {
                pub account: runtime_types::account::AccountId20,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for OrbiterRegistered {
                const PALLET: &'static str = "MoonbeamOrbiters";
                const EVENT: &'static str = "OrbiterRegistered";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An orbiter has unregistered"]
            pub struct OrbiterUnregistered {
                pub account: runtime_types::account::AccountId20,
            }
            impl ::subxt::events::StaticEvent for OrbiterUnregistered {
                const PALLET: &'static str = "MoonbeamOrbiters";
                const EVENT: &'static str = "OrbiterUnregistered";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Account lookup override"]
                pub fn account_lookup_override(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::option::Option<runtime_types::account::AccountId20>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MoonbeamOrbiters",
                        "AccountLookupOverride",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            32u8, 85u8, 16u8, 83u8, 119u8, 50u8, 114u8, 3u8, 132u8, 94u8, 167u8,
                            243u8, 194u8, 1u8, 131u8, 148u8, 2u8, 252u8, 55u8, 63u8, 109u8, 152u8,
                            227u8, 248u8, 208u8, 168u8, 94u8, 90u8, 217u8, 59u8, 122u8, 207u8,
                        ],
                    )
                }
                #[doc = " Account lookup override"]
                pub fn account_lookup_override_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::option::Option<runtime_types::account::AccountId20>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MoonbeamOrbiters",
                        "AccountLookupOverride",
                        Vec::new(),
                        [
                            32u8, 85u8, 16u8, 83u8, 119u8, 50u8, 114u8, 3u8, 132u8, 94u8, 167u8,
                            243u8, 194u8, 1u8, 131u8, 148u8, 2u8, 252u8, 55u8, 63u8, 109u8, 152u8,
                            227u8, 248u8, 208u8, 168u8, 94u8, 90u8, 217u8, 59u8, 122u8, 207u8,
                        ],
                    )
                }
                #[doc = " Current orbiters, with their \"parent\" collator"]
                pub fn collators_pool(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_moonbeam_orbiters::types::CollatorPoolInfo<
                        runtime_types::account::AccountId20,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MoonbeamOrbiters",
                        "CollatorsPool",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            43u8, 249u8, 81u8, 170u8, 86u8, 34u8, 17u8, 221u8, 160u8, 185u8, 155u8,
                            189u8, 37u8, 74u8, 166u8, 3u8, 128u8, 25u8, 166u8, 245u8, 243u8, 48u8,
                            145u8, 124u8, 60u8, 10u8, 186u8, 2u8, 253u8, 38u8, 11u8, 101u8,
                        ],
                    )
                }
                #[doc = " Current orbiters, with their \"parent\" collator"]
                pub fn collators_pool_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_moonbeam_orbiters::types::CollatorPoolInfo<
                        runtime_types::account::AccountId20,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MoonbeamOrbiters",
                        "CollatorsPool",
                        Vec::new(),
                        [
                            43u8, 249u8, 81u8, 170u8, 86u8, 34u8, 17u8, 221u8, 160u8, 185u8, 155u8,
                            189u8, 37u8, 74u8, 166u8, 3u8, 128u8, 25u8, 166u8, 245u8, 243u8, 48u8,
                            145u8, 124u8, 60u8, 10u8, 186u8, 2u8, 253u8, 38u8, 11u8, 101u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_collators_pool(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MoonbeamOrbiters",
                        "CounterForCollatorsPool",
                        vec![],
                        [
                            132u8, 8u8, 166u8, 64u8, 133u8, 49u8, 90u8, 119u8, 251u8, 225u8, 94u8,
                            164u8, 104u8, 200u8, 149u8, 175u8, 13u8, 135u8, 170u8, 7u8, 26u8,
                            219u8, 104u8, 173u8, 155u8, 124u8, 95u8, 104u8, 251u8, 100u8, 134u8,
                            101u8,
                        ],
                    )
                }
                #[doc = " Current round index"]
                pub fn current_round(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MoonbeamOrbiters",
                        "CurrentRound",
                        vec![],
                        [
                            36u8, 98u8, 75u8, 19u8, 13u8, 250u8, 136u8, 31u8, 63u8, 120u8, 224u8,
                            83u8, 183u8, 198u8, 195u8, 37u8, 82u8, 213u8, 193u8, 217u8, 137u8,
                            62u8, 201u8, 251u8, 45u8, 141u8, 171u8, 22u8, 54u8, 134u8, 113u8,
                            232u8,
                        ],
                    )
                }
                #[doc = " If true, it forces the rotation at the next round."]
                #[doc = " A use case: when changing RotatePeriod, you need a migration code that sets this value to"]
                #[doc = " true to avoid holes in OrbiterPerRound."]
                pub fn force_rotation(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MoonbeamOrbiters",
                        "ForceRotation",
                        vec![],
                        [
                            42u8, 36u8, 103u8, 219u8, 246u8, 87u8, 118u8, 173u8, 49u8, 206u8, 0u8,
                            154u8, 92u8, 161u8, 87u8, 13u8, 245u8, 155u8, 188u8, 227u8, 224u8,
                            210u8, 161u8, 113u8, 209u8, 7u8, 108u8, 33u8, 236u8, 167u8, 88u8,
                            190u8,
                        ],
                    )
                }
                #[doc = " Minimum deposit required to be registered as an orbiter"]
                pub fn min_orbiter_deposit(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MoonbeamOrbiters",
                        "MinOrbiterDeposit",
                        vec![],
                        [
                            178u8, 137u8, 8u8, 251u8, 147u8, 202u8, 252u8, 173u8, 131u8, 158u8,
                            45u8, 68u8, 164u8, 87u8, 241u8, 149u8, 15u8, 7u8, 102u8, 108u8, 22u8,
                            220u8, 172u8, 4u8, 81u8, 253u8, 147u8, 199u8, 19u8, 19u8, 94u8, 229u8,
                        ],
                    )
                }
                #[doc = " Store active orbiter per round and per parent collator"]
                pub fn orbiter_per_round(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::account::AccountId20,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MoonbeamOrbiters",
                        "OrbiterPerRound",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            20u8, 40u8, 73u8, 15u8, 9u8, 238u8, 160u8, 242u8, 11u8, 20u8, 141u8,
                            189u8, 83u8, 31u8, 134u8, 194u8, 153u8, 53u8, 144u8, 2u8, 190u8, 177u8,
                            97u8, 83u8, 200u8, 191u8, 173u8, 234u8, 236u8, 113u8, 227u8, 42u8,
                        ],
                    )
                }
                #[doc = " Store active orbiter per round and per parent collator"]
                pub fn orbiter_per_round_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::account::AccountId20,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MoonbeamOrbiters",
                        "OrbiterPerRound",
                        Vec::new(),
                        [
                            20u8, 40u8, 73u8, 15u8, 9u8, 238u8, 160u8, 242u8, 11u8, 20u8, 141u8,
                            189u8, 83u8, 31u8, 134u8, 194u8, 153u8, 53u8, 144u8, 2u8, 190u8, 177u8,
                            97u8, 83u8, 200u8, 191u8, 173u8, 234u8, 236u8, 113u8, 227u8, 42u8,
                        ],
                    )
                }
                #[doc = " Check if account is an orbiter"]
                pub fn registered_orbiter(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MoonbeamOrbiters",
                        "RegisteredOrbiter",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            92u8, 138u8, 98u8, 173u8, 164u8, 234u8, 6u8, 104u8, 165u8, 131u8,
                            193u8, 133u8, 131u8, 195u8, 42u8, 117u8, 22u8, 14u8, 96u8, 49u8, 152u8,
                            42u8, 196u8, 111u8, 31u8, 155u8, 70u8, 120u8, 83u8, 128u8, 97u8, 159u8,
                        ],
                    )
                }
                #[doc = " Check if account is an orbiter"]
                pub fn registered_orbiter_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MoonbeamOrbiters",
                        "RegisteredOrbiter",
                        Vec::new(),
                        [
                            92u8, 138u8, 98u8, 173u8, 164u8, 234u8, 6u8, 104u8, 165u8, 131u8,
                            193u8, 133u8, 131u8, 195u8, 42u8, 117u8, 22u8, 14u8, 96u8, 49u8, 152u8,
                            42u8, 196u8, 111u8, 31u8, 155u8, 70u8, 120u8, 83u8, 128u8, 97u8, 159u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Maximum number of orbiters per collator."]
                pub fn max_pool_size(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "MoonbeamOrbiters",
                        "MaxPoolSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum number of round to keep on storage."]
                pub fn max_round_archive(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "MoonbeamOrbiters",
                        "MaxRoundArchive",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds before changing the selected orbiter."]
                #[doc = " WARNING: when changing `RotatePeriod`, you need a migration code that sets"]
                #[doc = " `ForceRotation` to true to avoid holes in `OrbiterPerRound`."]
                pub fn rotate_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "MoonbeamOrbiters",
                        "RotatePeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod ethereum_xcm {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_ethereum_xcm::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_ethereum_xcm::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transact {
                    pub xcm_transaction:
                        runtime_types::xcm_primitives::ethereum_xcm::EthereumXcmTransaction,
                }
                impl ::subxt::blocks::StaticExtrinsic for Transact {
                    const PALLET: &'static str = "EthereumXcm";
                    const CALL: &'static str = "transact";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransactThroughProxy {
                    pub transact_as: ::subxt::utils::H160,
                    pub xcm_transaction:
                        runtime_types::xcm_primitives::ethereum_xcm::EthereumXcmTransaction,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransactThroughProxy {
                    const PALLET: &'static str = "EthereumXcm";
                    const CALL: &'static str = "transact_through_proxy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SuspendEthereumXcmExecution;
                impl ::subxt::blocks::StaticExtrinsic for SuspendEthereumXcmExecution {
                    const PALLET: &'static str = "EthereumXcm";
                    const CALL: &'static str = "suspend_ethereum_xcm_execution";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ResumeEthereumXcmExecution;
                impl ::subxt::blocks::StaticExtrinsic for ResumeEthereumXcmExecution {
                    const PALLET: &'static str = "EthereumXcm";
                    const CALL: &'static str = "resume_ethereum_xcm_execution";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Xcm Transact an Ethereum transaction."]
                #[doc = "Weight: Gas limit plus the db read involving the suspension check"]
                pub fn transact(
                    &self,
                    xcm_transaction : runtime_types :: xcm_primitives :: ethereum_xcm :: EthereumXcmTransaction,
                ) -> ::subxt::tx::Payload<types::Transact> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumXcm",
                        "transact",
                        types::Transact { xcm_transaction },
                        [
                            211u8, 217u8, 236u8, 22u8, 185u8, 182u8, 39u8, 37u8, 139u8, 180u8,
                            64u8, 184u8, 149u8, 108u8, 113u8, 67u8, 105u8, 144u8, 53u8, 9u8, 190u8,
                            24u8, 6u8, 83u8, 62u8, 93u8, 67u8, 90u8, 170u8, 74u8, 165u8, 36u8,
                        ],
                    )
                }
                #[doc = "Xcm Transact an Ethereum transaction through proxy."]
                #[doc = "Weight: Gas limit plus the db reads involving the suspension and proxy checks"]
                pub fn transact_through_proxy(
                    &self,
                    transact_as: ::subxt::utils::H160,
                    xcm_transaction : runtime_types :: xcm_primitives :: ethereum_xcm :: EthereumXcmTransaction,
                ) -> ::subxt::tx::Payload<types::TransactThroughProxy> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumXcm",
                        "transact_through_proxy",
                        types::TransactThroughProxy {
                            transact_as,
                            xcm_transaction,
                        },
                        [
                            1u8, 156u8, 239u8, 200u8, 59u8, 238u8, 82u8, 171u8, 243u8, 206u8,
                            138u8, 191u8, 3u8, 88u8, 142u8, 255u8, 232u8, 87u8, 33u8, 74u8, 23u8,
                            74u8, 64u8, 137u8, 176u8, 97u8, 64u8, 253u8, 43u8, 20u8, 90u8, 16u8,
                        ],
                    )
                }
                #[doc = "Suspends all Ethereum executions from XCM."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                pub fn suspend_ethereum_xcm_execution(
                    &self,
                ) -> ::subxt::tx::Payload<types::SuspendEthereumXcmExecution> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumXcm",
                        "suspend_ethereum_xcm_execution",
                        types::SuspendEthereumXcmExecution {},
                        [
                            136u8, 94u8, 212u8, 4u8, 47u8, 44u8, 126u8, 180u8, 16u8, 210u8, 130u8,
                            5u8, 112u8, 185u8, 65u8, 15u8, 182u8, 152u8, 48u8, 46u8, 251u8, 42u8,
                            154u8, 21u8, 150u8, 218u8, 192u8, 88u8, 55u8, 6u8, 78u8, 203u8,
                        ],
                    )
                }
                #[doc = "Resumes all Ethereum executions from XCM."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                pub fn resume_ethereum_xcm_execution(
                    &self,
                ) -> ::subxt::tx::Payload<types::ResumeEthereumXcmExecution> {
                    ::subxt::tx::Payload::new_static(
                        "EthereumXcm",
                        "resume_ethereum_xcm_execution",
                        types::ResumeEthereumXcmExecution {},
                        [
                            158u8, 48u8, 120u8, 179u8, 66u8, 82u8, 192u8, 28u8, 133u8, 188u8, 85u8,
                            102u8, 29u8, 127u8, 55u8, 201u8, 69u8, 15u8, 241u8, 223u8, 248u8,
                            105u8, 51u8, 199u8, 171u8, 16u8, 77u8, 59u8, 173u8, 28u8, 21u8, 204u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Global nonce used for building Ethereum transaction payload."]
                pub fn nonce(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::primitive_types::U256,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumXcm",
                        "Nonce",
                        vec![],
                        [
                            156u8, 242u8, 210u8, 8u8, 205u8, 67u8, 89u8, 218u8, 135u8, 151u8,
                            131u8, 26u8, 129u8, 181u8, 112u8, 3u8, 170u8, 182u8, 76u8, 129u8, 58u8,
                            156u8, 198u8, 247u8, 78u8, 3u8, 89u8, 18u8, 7u8, 68u8, 119u8, 42u8,
                        ],
                    )
                }
                #[doc = " Whether or not Ethereum-XCM is suspended from executing"]
                pub fn ethereum_xcm_suspended(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "EthereumXcm",
                        "EthereumXcmSuspended",
                        vec![],
                        [
                            0u8, 175u8, 233u8, 148u8, 151u8, 186u8, 241u8, 70u8, 100u8, 132u8,
                            107u8, 51u8, 159u8, 122u8, 70u8, 223u8, 24u8, 181u8, 90u8, 142u8,
                            143u8, 151u8, 106u8, 203u8, 234u8, 41u8, 231u8, 243u8, 50u8, 93u8,
                            61u8, 106u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod randomness {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_randomness::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_randomness::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetBabeRandomnessResults;
                impl ::subxt::blocks::StaticExtrinsic for SetBabeRandomnessResults {
                    const PALLET: &'static str = "Randomness";
                    const CALL: &'static str = "set_babe_randomness_results";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Populates `RandomnessResults` due this epoch with BABE epoch randomness"]
                pub fn set_babe_randomness_results(
                    &self,
                ) -> ::subxt::tx::Payload<types::SetBabeRandomnessResults> {
                    ::subxt::tx::Payload::new_static(
                        "Randomness",
                        "set_babe_randomness_results",
                        types::SetBabeRandomnessResults {},
                        [
                            103u8, 120u8, 95u8, 104u8, 163u8, 0u8, 22u8, 183u8, 174u8, 249u8,
                            255u8, 178u8, 239u8, 31u8, 95u8, 21u8, 43u8, 107u8, 56u8, 179u8, 197u8,
                            130u8, 102u8, 91u8, 236u8, 34u8, 10u8, 14u8, 70u8, 245u8, 116u8, 97u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_randomness::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RandomnessRequestedBabeEpoch {
                pub id: ::core::primitive::u64,
                pub refund_address: ::subxt::utils::H160,
                pub contract_address: ::subxt::utils::H160,
                pub fee: ::core::primitive::u128,
                pub gas_limit: ::core::primitive::u64,
                pub num_words: ::core::primitive::u8,
                pub salt: ::subxt::utils::H256,
                pub earliest_epoch: ::core::primitive::u64,
            }
            impl ::subxt::events::StaticEvent for RandomnessRequestedBabeEpoch {
                const PALLET: &'static str = "Randomness";
                const EVENT: &'static str = "RandomnessRequestedBabeEpoch";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RandomnessRequestedLocal {
                pub id: ::core::primitive::u64,
                pub refund_address: ::subxt::utils::H160,
                pub contract_address: ::subxt::utils::H160,
                pub fee: ::core::primitive::u128,
                pub gas_limit: ::core::primitive::u64,
                pub num_words: ::core::primitive::u8,
                pub salt: ::subxt::utils::H256,
                pub earliest_block: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for RandomnessRequestedLocal {
                const PALLET: &'static str = "Randomness";
                const EVENT: &'static str = "RandomnessRequestedLocal";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RequestFulfilled {
                pub id: ::core::primitive::u64,
            }
            impl ::subxt::events::StaticEvent for RequestFulfilled {
                const PALLET: &'static str = "Randomness";
                const EVENT: &'static str = "RequestFulfilled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RequestFeeIncreased {
                pub id: ::core::primitive::u64,
                pub new_fee: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for RequestFeeIncreased {
                const PALLET: &'static str = "Randomness";
                const EVENT: &'static str = "RequestFeeIncreased";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RequestExpirationExecuted {
                pub id: ::core::primitive::u64,
            }
            impl ::subxt::events::StaticEvent for RequestExpirationExecuted {
                const PALLET: &'static str = "Randomness";
                const EVENT: &'static str = "RequestExpirationExecuted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Randomness requests not yet fulfilled or purged"]
                pub fn requests(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_randomness::types::RequestState,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Randomness",
                        "Requests",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            183u8, 213u8, 15u8, 104u8, 20u8, 242u8, 9u8, 158u8, 247u8, 135u8,
                            113u8, 83u8, 201u8, 217u8, 194u8, 171u8, 185u8, 21u8, 209u8, 102u8,
                            189u8, 99u8, 21u8, 95u8, 227u8, 157u8, 188u8, 125u8, 209u8, 89u8, 28u8,
                            142u8,
                        ],
                    )
                }
                #[doc = " Randomness requests not yet fulfilled or purged"]
                pub fn requests_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_randomness::types::RequestState,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Randomness",
                        "Requests",
                        Vec::new(),
                        [
                            183u8, 213u8, 15u8, 104u8, 20u8, 242u8, 9u8, 158u8, 247u8, 135u8,
                            113u8, 83u8, 201u8, 217u8, 194u8, 171u8, 185u8, 21u8, 209u8, 102u8,
                            189u8, 99u8, 21u8, 95u8, 227u8, 157u8, 188u8, 125u8, 209u8, 89u8, 28u8,
                            142u8,
                        ],
                    )
                }
                #[doc = " Number of randomness requests made so far, used to generate the next request's uid"]
                pub fn request_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Randomness",
                        "RequestCount",
                        vec![],
                        [
                            244u8, 81u8, 167u8, 135u8, 155u8, 125u8, 31u8, 98u8, 163u8, 180u8,
                            64u8, 243u8, 17u8, 27u8, 96u8, 106u8, 101u8, 220u8, 47u8, 42u8, 255u8,
                            26u8, 88u8, 206u8, 72u8, 51u8, 88u8, 63u8, 241u8, 249u8, 40u8, 2u8,
                        ],
                    )
                }
                #[doc = " Current local per-block VRF randomness"]
                #[doc = " Set in `on_initialize`"]
                pub fn local_vrf_output(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::option::Option<::subxt::utils::H256>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Randomness",
                        "LocalVrfOutput",
                        vec![],
                        [
                            77u8, 41u8, 25u8, 187u8, 108u8, 62u8, 193u8, 162u8, 238u8, 242u8, 35u8,
                            220u8, 94u8, 135u8, 198u8, 78u8, 6u8, 125u8, 26u8, 36u8, 216u8, 205u8,
                            144u8, 166u8, 37u8, 41u8, 12u8, 121u8, 124u8, 35u8, 225u8, 12u8,
                        ],
                    )
                }
                #[doc = " Relay epoch"]
                pub fn relay_epoch(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Randomness",
                        "RelayEpoch",
                        vec![],
                        [
                            136u8, 61u8, 126u8, 48u8, 69u8, 179u8, 33u8, 87u8, 87u8, 117u8, 177u8,
                            76u8, 214u8, 109u8, 139u8, 204u8, 6u8, 238u8, 9u8, 148u8, 24u8, 51u8,
                            141u8, 194u8, 193u8, 14u8, 123u8, 7u8, 246u8, 80u8, 19u8, 137u8,
                        ],
                    )
                }
                #[doc = " Ensures the mandatory inherent was included in the block"]
                pub fn inherent_included(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Randomness",
                        "InherentIncluded",
                        vec![],
                        [
                            199u8, 166u8, 146u8, 40u8, 36u8, 142u8, 39u8, 224u8, 125u8, 113u8,
                            177u8, 97u8, 145u8, 2u8, 130u8, 241u8, 230u8, 66u8, 93u8, 90u8, 114u8,
                            119u8, 241u8, 229u8, 211u8, 70u8, 96u8, 158u8, 39u8, 199u8, 187u8,
                            79u8,
                        ],
                    )
                }
                #[doc = " Records whether this is the first block (genesis or runtime upgrade)"]
                pub fn not_first_block(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Randomness",
                        "NotFirstBlock",
                        vec![],
                        [
                            151u8, 234u8, 166u8, 6u8, 160u8, 59u8, 99u8, 195u8, 201u8, 83u8, 84u8,
                            205u8, 226u8, 84u8, 55u8, 28u8, 96u8, 8u8, 38u8, 192u8, 159u8, 48u8,
                            103u8, 123u8, 59u8, 143u8, 13u8, 163u8, 21u8, 137u8, 82u8, 47u8,
                        ],
                    )
                }
                #[doc = " Snapshot of randomness to fulfill all requests that are for the same raw randomness"]
                #[doc = " Removed once $value.request_count == 0"]
                pub fn randomness_results(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::pallet_randomness::types::RequestType>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_randomness::types::RandomnessResult<::subxt::utils::H256>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Randomness",
                        "RandomnessResults",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            164u8, 55u8, 182u8, 215u8, 141u8, 123u8, 62u8, 96u8, 174u8, 235u8,
                            114u8, 253u8, 7u8, 72u8, 6u8, 199u8, 234u8, 158u8, 71u8, 26u8, 61u8,
                            65u8, 137u8, 197u8, 173u8, 179u8, 0u8, 242u8, 3u8, 137u8, 179u8, 213u8,
                        ],
                    )
                }
                #[doc = " Snapshot of randomness to fulfill all requests that are for the same raw randomness"]
                #[doc = " Removed once $value.request_count == 0"]
                pub fn randomness_results_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_randomness::types::RandomnessResult<::subxt::utils::H256>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Randomness",
                        "RandomnessResults",
                        Vec::new(),
                        [
                            164u8, 55u8, 182u8, 215u8, 141u8, 123u8, 62u8, 96u8, 174u8, 235u8,
                            114u8, 253u8, 7u8, 72u8, 6u8, 199u8, 234u8, 158u8, 71u8, 26u8, 61u8,
                            65u8, 137u8, 197u8, 173u8, 179u8, 0u8, 242u8, 3u8, 137u8, 179u8, 213u8,
                        ],
                    )
                }
                #[doc = " Previous local per-block VRF randomness"]
                #[doc = " Set in `on_finalize` of last block"]
                pub fn previous_local_vrf_output(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Randomness",
                        "PreviousLocalVrfOutput",
                        vec![],
                        [
                            104u8, 9u8, 73u8, 78u8, 246u8, 100u8, 71u8, 210u8, 31u8, 249u8, 44u8,
                            184u8, 81u8, 110u8, 8u8, 178u8, 147u8, 23u8, 232u8, 153u8, 45u8, 222u8,
                            215u8, 60u8, 101u8, 94u8, 228u8, 45u8, 190u8, 33u8, 137u8, 133u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The amount that should be taken as a security deposit when requesting randomness."]
                pub fn deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Randomness",
                        "Deposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Maximum number of random words that can be requested per request"]
                pub fn max_random_words(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u8> {
                    ::subxt::constants::Address::new_static(
                        "Randomness",
                        "MaxRandomWords",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
                #[doc = " Local per-block VRF requests must be at least this many blocks after the block in which"]
                #[doc = " they were requested"]
                pub fn min_block_delay(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Randomness",
                        "MinBlockDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Local per-block VRF requests must be at most this many blocks after the block in which"]
                #[doc = " they were requested"]
                pub fn max_block_delay(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Randomness",
                        "MaxBlockDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Local requests expire and can be purged from storage after this many blocks/epochs"]
                pub fn block_expiration_delay(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Randomness",
                        "BlockExpirationDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Babe requests expire and can be purged from storage after this many blocks/epochs"]
                pub fn epoch_expiration_delay(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Randomness",
                        "EpochExpirationDelay",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod treasury_council_collective {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_collective::pallet::Error3;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_collective::pallet::Call3;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMembers {
                    pub new_members: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    pub prime: ::core::option::Option<runtime_types::account::AccountId20>,
                    pub old_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMembers {
                    const PALLET: &'static str = "TreasuryCouncilCollective";
                    const CALL: &'static str = "set_members";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Execute {
                    pub proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "TreasuryCouncilCollective";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Propose {
                    #[codec(compact)]
                    pub threshold: ::core::primitive::u32,
                    pub proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "TreasuryCouncilCollective";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    pub proposal: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub approve: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "TreasuryCouncilCollective";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisapproveProposal {
                    pub proposal_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for DisapproveProposal {
                    const PALLET: &'static str = "TreasuryCouncilCollective";
                    const CALL: &'static str = "disapprove_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Close {
                    pub proposal_hash: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Close {
                    const PALLET: &'static str = "TreasuryCouncilCollective";
                    const CALL: &'static str = "close";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the collective's membership."]
                #[doc = ""]
                #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                #[doc = "- `prime`: The prime member whose vote sets the default."]
                #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                #[doc = "  weight estimation."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                #[doc = ""]
                #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                #[doc = ""]
                #[doc = "# WARNING:"]
                #[doc = ""]
                #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                #[doc = "implementation of the trait [`ChangeMembers`]."]
                #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                #[doc = "with other logic managing the member set."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(MP + N)` where:"]
                #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                #[doc = "  - `P` proposals-count (code-bounded)"]
                pub fn set_members(
                    &self,
                    new_members: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    prime: ::core::option::Option<runtime_types::account::AccountId20>,
                    old_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "TreasuryCouncilCollective",
                        "set_members",
                        types::SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            57u8, 48u8, 193u8, 19u8, 33u8, 214u8, 209u8, 67u8, 27u8, 228u8, 99u8,
                            142u8, 118u8, 147u8, 228u8, 12u8, 25u8, 250u8, 141u8, 100u8, 98u8,
                            206u8, 128u8, 17u8, 226u8, 68u8, 96u8, 177u8, 196u8, 192u8, 4u8, 67u8,
                        ],
                    )
                }
                #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                #[doc = ""]
                #[doc = "Origin must be a member of the collective."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(B + M + P)` where:"]
                #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "- `M` members-count (code-bounded)"]
                #[doc = "- `P` complexity of dispatching `proposal`"]
                pub fn execute(
                    &self,
                    proposal: runtime_types::moonbase_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Execute> {
                    ::subxt::tx::Payload::new_static(
                        "TreasuryCouncilCollective",
                        "execute",
                        types::Execute {
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            46u8, 232u8, 151u8, 1u8, 147u8, 192u8, 62u8, 63u8, 0u8, 254u8, 157u8,
                            44u8, 94u8, 5u8, 31u8, 15u8, 16u8, 208u8, 38u8, 142u8, 71u8, 169u8,
                            139u8, 158u8, 162u8, 102u8, 100u8, 49u8, 66u8, 255u8, 123u8, 163u8,
                        ],
                    )
                }
                #[doc = "Add a new proposal to either be voted on or executed directly."]
                #[doc = ""]
                #[doc = "Requires the sender to be member."]
                #[doc = ""]
                #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                #[doc = "or put up for voting."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - branching is influenced by `threshold` where:"]
                #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                pub fn propose(
                    &self,
                    threshold: ::core::primitive::u32,
                    proposal: runtime_types::moonbase_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Propose> {
                    ::subxt::tx::Payload::new_static(
                        "TreasuryCouncilCollective",
                        "propose",
                        types::Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            114u8, 103u8, 23u8, 11u8, 199u8, 241u8, 42u8, 57u8, 215u8, 223u8,
                            152u8, 236u8, 32u8, 240u8, 165u8, 65u8, 246u8, 222u8, 195u8, 252u8,
                            93u8, 163u8, 43u8, 85u8, 150u8, 127u8, 146u8, 135u8, 215u8, 213u8,
                            152u8, 99u8,
                        ],
                    )
                }
                #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                #[doc = ""]
                #[doc = "Requires the sender to be a member."]
                #[doc = ""]
                #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                #[doc = "fee."]
                #[doc = "## Complexity"]
                #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                pub fn vote(
                    &self,
                    proposal: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "TreasuryCouncilCollective",
                        "vote",
                        types::Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
                            129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
                            176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
                            120u8,
                        ],
                    )
                }
                #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                #[doc = "state."]
                #[doc = ""]
                #[doc = "Must be called by the Root origin."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(P) where P is the number of max proposals"]
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::DisapproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "TreasuryCouncilCollective",
                        "disapprove_proposal",
                        types::DisapproveProposal { proposal_hash },
                        [
                            26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
                            155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
                            156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
                        ],
                    )
                }
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                pub fn close(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Close> {
                    ::subxt::tx::Payload::new_static(
                        "TreasuryCouncilCollective",
                        "close",
                        types::Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            136u8, 48u8, 243u8, 34u8, 60u8, 109u8, 186u8, 158u8, 72u8, 48u8, 62u8,
                            34u8, 167u8, 46u8, 33u8, 142u8, 239u8, 43u8, 238u8, 125u8, 94u8, 80u8,
                            157u8, 245u8, 220u8, 126u8, 58u8, 244u8, 186u8, 195u8, 30u8, 127u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_collective::pallet::Event3;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
            #[doc = "`MemberCount`)."]
            pub struct Proposed {
                pub account: runtime_types::account::AccountId20,
                pub proposal_index: ::core::primitive::u32,
                pub proposal_hash: ::subxt::utils::H256,
                pub threshold: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "TreasuryCouncilCollective";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been voted on by given account, leaving"]
            #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
            pub struct Voted {
                pub account: runtime_types::account::AccountId20,
                pub proposal_hash: ::subxt::utils::H256,
                pub voted: ::core::primitive::bool,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "TreasuryCouncilCollective";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was approved by the required threshold."]
            pub struct Approved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "TreasuryCouncilCollective";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was not approved by the required threshold."]
            pub struct Disapproved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "TreasuryCouncilCollective";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
            pub struct Executed {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "TreasuryCouncilCollective";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
            pub struct MemberExecuted {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "TreasuryCouncilCollective";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
            pub struct Closed {
                pub proposal_hash: ::subxt::utils::H256,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "TreasuryCouncilCollective";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The hashes of the active proposals."]
                pub fn proposals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::H256,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TreasuryCouncilCollective",
                        "Proposals",
                        vec![],
                        [
                            210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
                            147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
                            198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::moonbase_runtime::RuntimeCall,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TreasuryCouncilCollective",
                        "ProposalOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            72u8, 150u8, 102u8, 62u8, 13u8, 225u8, 203u8, 109u8, 26u8, 138u8,
                            181u8, 159u8, 164u8, 57u8, 83u8, 90u8, 177u8, 162u8, 250u8, 224u8,
                            176u8, 206u8, 28u8, 214u8, 219u8, 235u8, 31u8, 65u8, 1u8, 143u8, 246u8,
                            171u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::moonbase_runtime::RuntimeCall,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TreasuryCouncilCollective",
                        "ProposalOf",
                        Vec::new(),
                        [
                            72u8, 150u8, 102u8, 62u8, 13u8, 225u8, 203u8, 109u8, 26u8, 138u8,
                            181u8, 159u8, 164u8, 57u8, 83u8, 90u8, 177u8, 162u8, 250u8, 224u8,
                            176u8, 206u8, 28u8, 214u8, 219u8, 235u8, 31u8, 65u8, 1u8, 143u8, 246u8,
                            171u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TreasuryCouncilCollective",
                        "Voting",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            98u8, 196u8, 41u8, 133u8, 250u8, 43u8, 117u8, 234u8, 220u8, 251u8,
                            209u8, 250u8, 141u8, 167u8, 161u8, 75u8, 192u8, 37u8, 144u8, 123u8,
                            18u8, 140u8, 173u8, 98u8, 87u8, 143u8, 145u8, 58u8, 37u8, 80u8, 173u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TreasuryCouncilCollective",
                        "Voting",
                        Vec::new(),
                        [
                            98u8, 196u8, 41u8, 133u8, 250u8, 43u8, 117u8, 234u8, 220u8, 251u8,
                            209u8, 250u8, 141u8, 167u8, 161u8, 75u8, 192u8, 37u8, 144u8, 123u8,
                            18u8, 140u8, 173u8, 98u8, 87u8, 143u8, 145u8, 58u8, 37u8, 80u8, 173u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " Proposals so far."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TreasuryCouncilCollective",
                        "ProposalCount",
                        vec![],
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective. This is stored sorted (just by value)."]
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::account::AccountId20>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TreasuryCouncilCollective",
                        "Members",
                        vec![],
                        [
                            239u8, 177u8, 211u8, 65u8, 244u8, 88u8, 99u8, 62u8, 211u8, 52u8, 40u8,
                            10u8, 99u8, 162u8, 212u8, 203u8, 225u8, 253u8, 182u8, 133u8, 107u8,
                            103u8, 77u8, 238u8, 148u8, 255u8, 65u8, 106u8, 9u8, 230u8, 236u8,
                            224u8,
                        ],
                    )
                }
                #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::account::AccountId20,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TreasuryCouncilCollective",
                        "Prime",
                        vec![],
                        [
                            37u8, 41u8, 188u8, 54u8, 33u8, 64u8, 159u8, 123u8, 190u8, 96u8, 187u8,
                            46u8, 35u8, 217u8, 157u8, 189u8, 243u8, 40u8, 118u8, 144u8, 104u8,
                            27u8, 188u8, 54u8, 55u8, 241u8, 78u8, 33u8, 116u8, 44u8, 88u8, 62u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
                pub fn max_proposal_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "TreasuryCouncilCollective",
                        "MaxProposalWeight",
                        [
                            149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
                            56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
                            128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
                            112u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod conviction_voting {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_conviction_voting::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_conviction_voting::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    #[codec(compact)]
                    pub poll_index: ::core::primitive::u32,
                    pub vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
                        ::core::primitive::u128,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "ConvictionVoting";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegate {
                    pub class: ::core::primitive::u16,
                    pub to: runtime_types::account::AccountId20,
                    pub conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
                    pub balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Delegate {
                    const PALLET: &'static str = "ConvictionVoting";
                    const CALL: &'static str = "delegate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Undelegate {
                    pub class: ::core::primitive::u16,
                }
                impl ::subxt::blocks::StaticExtrinsic for Undelegate {
                    const PALLET: &'static str = "ConvictionVoting";
                    const CALL: &'static str = "undelegate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Unlock {
                    pub class: ::core::primitive::u16,
                    pub target: runtime_types::account::AccountId20,
                }
                impl ::subxt::blocks::StaticExtrinsic for Unlock {
                    const PALLET: &'static str = "ConvictionVoting";
                    const CALL: &'static str = "unlock";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveVote {
                    pub class: ::core::option::Option<::core::primitive::u16>,
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveVote {
                    const PALLET: &'static str = "ConvictionVoting";
                    const CALL: &'static str = "remove_vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveOtherVote {
                    pub target: runtime_types::account::AccountId20,
                    pub class: ::core::primitive::u16,
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveOtherVote {
                    const PALLET: &'static str = "ConvictionVoting";
                    const CALL: &'static str = "remove_other_vote";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;"]
                #[doc = "otherwise it is a vote to keep the status quo."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `poll_index`: The index of the poll to vote for."]
                #[doc = "- `vote`: The vote configuration."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of polls the voter has voted on."]
                pub fn vote(
                    &self,
                    poll_index: ::core::primitive::u32,
                    vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
                        ::core::primitive::u128,
                    >,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "ConvictionVoting",
                        "vote",
                        types::Vote { poll_index, vote },
                        [
                            57u8, 170u8, 177u8, 168u8, 158u8, 43u8, 87u8, 242u8, 176u8, 85u8,
                            230u8, 64u8, 103u8, 239u8, 190u8, 6u8, 228u8, 165u8, 248u8, 77u8,
                            231u8, 221u8, 186u8, 107u8, 249u8, 201u8, 226u8, 52u8, 129u8, 90u8,
                            142u8, 159u8,
                        ],
                    )
                }
                #[doc = "Delegate the voting power (with some given conviction) of the sending account for a"]
                #[doc = "particular class of polls."]
                #[doc = ""]
                #[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
                #[doc = "time appropriate for the conviction's lock period."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
                #[doc = "  - be delegating already; or"]
                #[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
                #[doc = "    through `reap_vote` or `unvote`)."]
                #[doc = ""]
                #[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
                #[doc = "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls"]
                #[doc = "  to this function are required."]
                #[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
                #[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
                #[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
                #[doc = "  be more than the account's current balance."]
                #[doc = ""]
                #[doc = "Emits `Delegated`."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of polls the voter delegating to has"]
                #[doc = "  voted on. Weight is initially charged as if maximum votes, but is refunded later."]
                pub fn delegate(
                    &self,
                    class: ::core::primitive::u16,
                    to: runtime_types::account::AccountId20,
                    conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
                    balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Delegate> {
                    ::subxt::tx::Payload::new_static(
                        "ConvictionVoting",
                        "delegate",
                        types::Delegate {
                            class,
                            to,
                            conviction,
                            balance,
                        },
                        [
                            132u8, 148u8, 99u8, 1u8, 156u8, 82u8, 88u8, 246u8, 187u8, 242u8, 15u8,
                            10u8, 114u8, 81u8, 34u8, 198u8, 133u8, 30u8, 200u8, 228u8, 173u8, 53u8,
                            39u8, 114u8, 4u8, 87u8, 207u8, 142u8, 172u8, 16u8, 255u8, 24u8,
                        ],
                    )
                }
                #[doc = "Undelegate the voting power of the sending account for a particular class of polls."]
                #[doc = ""]
                #[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
                #[doc = "of the conviction with which the delegation was issued has passed."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
                #[doc = "currently delegating."]
                #[doc = ""]
                #[doc = "- `class`: The class of polls to remove the delegation from."]
                #[doc = ""]
                #[doc = "Emits `Undelegated`."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of polls the voter delegating to has"]
                #[doc = "  voted on. Weight is initially charged as if maximum votes, but is refunded later."]
                pub fn undelegate(
                    &self,
                    class: ::core::primitive::u16,
                ) -> ::subxt::tx::Payload<types::Undelegate> {
                    ::subxt::tx::Payload::new_static(
                        "ConvictionVoting",
                        "undelegate",
                        types::Undelegate { class },
                        [
                            140u8, 232u8, 6u8, 53u8, 228u8, 8u8, 131u8, 144u8, 65u8, 66u8, 245u8,
                            247u8, 147u8, 135u8, 198u8, 57u8, 82u8, 212u8, 89u8, 46u8, 236u8,
                            168u8, 200u8, 220u8, 93u8, 168u8, 101u8, 29u8, 110u8, 76u8, 67u8,
                            181u8,
                        ],
                    )
                }
                #[doc = "Remove the lock caused by prior voting/delegating which has expired within a particular"]
                #[doc = "class."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `class`: The class of polls to unlock."]
                #[doc = "- `target`: The account to remove the lock on."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` with R number of vote of target."]
                pub fn unlock(
                    &self,
                    class: ::core::primitive::u16,
                    target: runtime_types::account::AccountId20,
                ) -> ::subxt::tx::Payload<types::Unlock> {
                    ::subxt::tx::Payload::new_static(
                        "ConvictionVoting",
                        "unlock",
                        types::Unlock { class, target },
                        [
                            27u8, 72u8, 47u8, 231u8, 25u8, 83u8, 103u8, 161u8, 31u8, 124u8, 171u8,
                            70u8, 174u8, 48u8, 51u8, 63u8, 102u8, 240u8, 250u8, 213u8, 94u8, 27u8,
                            121u8, 36u8, 184u8, 56u8, 37u8, 1u8, 175u8, 214u8, 48u8, 220u8,
                        ],
                    )
                }
                #[doc = "Remove a vote for a poll."]
                #[doc = ""]
                #[doc = "If:"]
                #[doc = "- the poll was cancelled, or"]
                #[doc = "- the poll is ongoing, or"]
                #[doc = "- the poll has ended such that"]
                #[doc = "  - the vote of the account was in opposition to the result; or"]
                #[doc = "  - there was no conviction to the account's vote; or"]
                #[doc = "  - the account made a split vote"]
                #[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
                #[doc = "funds being available."]
                #[doc = ""]
                #[doc = "If, however, the poll has ended and:"]
                #[doc = "- it finished corresponding to the vote of the account, and"]
                #[doc = "- the account made a standard vote with conviction, and"]
                #[doc = "- the lock period of the conviction is not over"]
                #[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
                #[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
                #[doc = "of both the amount locked and the time is it locked for)."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
                #[doc = "registered for poll `index`."]
                #[doc = ""]
                #[doc = "- `index`: The index of poll of the vote to be removed."]
                #[doc = "- `class`: Optional parameter, if given it indicates the class of the poll. For polls"]
                #[doc = "  which have finished or are cancelled, this must be `Some`."]
                #[doc = ""]
                #[doc = "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on."]
                #[doc = "  Weight is calculated for the maximum number of vote."]
                pub fn remove_vote(
                    &self,
                    class: ::core::option::Option<::core::primitive::u16>,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveVote> {
                    ::subxt::tx::Payload::new_static(
                        "ConvictionVoting",
                        "remove_vote",
                        types::RemoveVote { class, index },
                        [
                            255u8, 108u8, 211u8, 146u8, 168u8, 231u8, 207u8, 44u8, 76u8, 24u8,
                            235u8, 60u8, 23u8, 79u8, 192u8, 192u8, 46u8, 40u8, 134u8, 27u8, 125u8,
                            114u8, 125u8, 247u8, 85u8, 102u8, 76u8, 159u8, 34u8, 167u8, 152u8,
                            148u8,
                        ],
                    )
                }
                #[doc = "Remove a vote for a poll."]
                #[doc = ""]
                #[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
                #[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
                #[doc = "either because the poll was cancelled, because the voter lost the poll or"]
                #[doc = "because the conviction period is over."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account of the vote to be removed; this account must have voted for poll"]
                #[doc = "  `index`."]
                #[doc = "- `index`: The index of poll of the vote to be removed."]
                #[doc = "- `class`: The class of the poll."]
                #[doc = ""]
                #[doc = "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on."]
                #[doc = "  Weight is calculated for the maximum number of vote."]
                pub fn remove_other_vote(
                    &self,
                    target: runtime_types::account::AccountId20,
                    class: ::core::primitive::u16,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveOtherVote> {
                    ::subxt::tx::Payload::new_static(
                        "ConvictionVoting",
                        "remove_other_vote",
                        types::RemoveOtherVote {
                            target,
                            class,
                            index,
                        },
                        [
                            221u8, 211u8, 237u8, 217u8, 202u8, 91u8, 8u8, 50u8, 99u8, 112u8, 200u8,
                            157u8, 120u8, 49u8, 243u8, 7u8, 23u8, 20u8, 16u8, 87u8, 169u8, 65u8,
                            32u8, 226u8, 124u8, 218u8, 56u8, 15u8, 22u8, 21u8, 208u8, 83u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_conviction_voting::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has delegated their vote to another account. \\[who, target\\]"]
            pub struct Delegated(
                pub runtime_types::account::AccountId20,
                pub runtime_types::account::AccountId20,
            );
            impl ::subxt::events::StaticEvent for Delegated {
                const PALLET: &'static str = "ConvictionVoting";
                const EVENT: &'static str = "Delegated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An \\[account\\] has cancelled a previous delegation operation."]
            pub struct Undelegated(pub runtime_types::account::AccountId20);
            impl ::subxt::events::StaticEvent for Undelegated {
                const PALLET: &'static str = "ConvictionVoting";
                const EVENT: &'static str = "Undelegated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " All voting for a particular voter in a particular voting class. We store the balance for the"]
                #[doc = " number of votes that we have recorded."]
                pub fn voting_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u16>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_conviction_voting::vote::Voting<
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ConvictionVoting",
                        "VotingFor",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            70u8, 233u8, 29u8, 148u8, 73u8, 90u8, 158u8, 97u8, 127u8, 73u8, 73u8,
                            94u8, 11u8, 18u8, 191u8, 134u8, 229u8, 37u8, 42u8, 19u8, 41u8, 51u8,
                            130u8, 146u8, 32u8, 71u8, 5u8, 214u8, 83u8, 31u8, 89u8, 211u8,
                        ],
                    )
                }
                #[doc = " All voting for a particular voter in a particular voting class. We store the balance for the"]
                #[doc = " number of votes that we have recorded."]
                pub fn voting_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_conviction_voting::vote::Voting<
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ConvictionVoting",
                        "VotingFor",
                        Vec::new(),
                        [
                            70u8, 233u8, 29u8, 148u8, 73u8, 90u8, 158u8, 97u8, 127u8, 73u8, 73u8,
                            94u8, 11u8, 18u8, 191u8, 134u8, 229u8, 37u8, 42u8, 19u8, 41u8, 51u8,
                            130u8, 146u8, 32u8, 71u8, 5u8, 214u8, 83u8, 31u8, 89u8, 211u8,
                        ],
                    )
                }
                #[doc = " The voting classes which have a non-zero lock requirement and the lock amounts which they"]
                #[doc = " require. The actual amount locked on behalf of this pallet should always be the maximum of"]
                #[doc = " this list."]
                pub fn class_locks_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u16,
                        ::core::primitive::u128,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ConvictionVoting",
                        "ClassLocksFor",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            99u8, 255u8, 62u8, 208u8, 216u8, 30u8, 220u8, 33u8, 225u8, 159u8,
                            150u8, 66u8, 9u8, 174u8, 236u8, 84u8, 77u8, 253u8, 249u8, 63u8, 135u8,
                            151u8, 91u8, 163u8, 15u8, 55u8, 34u8, 6u8, 22u8, 27u8, 205u8, 241u8,
                        ],
                    )
                }
                #[doc = " The voting classes which have a non-zero lock requirement and the lock amounts which they"]
                #[doc = " require. The actual amount locked on behalf of this pallet should always be the maximum of"]
                #[doc = " this list."]
                pub fn class_locks_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u16,
                        ::core::primitive::u128,
                    )>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ConvictionVoting",
                        "ClassLocksFor",
                        Vec::new(),
                        [
                            99u8, 255u8, 62u8, 208u8, 216u8, 30u8, 220u8, 33u8, 225u8, 159u8,
                            150u8, 66u8, 9u8, 174u8, 236u8, 84u8, 77u8, 253u8, 249u8, 63u8, 135u8,
                            151u8, 91u8, 163u8, 15u8, 55u8, 34u8, 6u8, 22u8, 27u8, 205u8, 241u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum number of concurrent votes an account may have."]
                #[doc = ""]
                #[doc = " Also used to compute weight, an overly large value can lead to extrinsics with large"]
                #[doc = " weight estimation: see `delegate` for instance."]
                pub fn max_votes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ConvictionVoting",
                        "MaxVotes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The minimum period of vote locking."]
                #[doc = ""]
                #[doc = " It should be no shorter than enactment period to ensure that in the case of an approval,"]
                #[doc = " those successful voters are locked into the consequences that their votes entail."]
                pub fn vote_locking_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ConvictionVoting",
                        "VoteLockingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod referenda {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_referenda::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_referenda::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Submit {
                    pub proposal_origin:
                        ::std::boxed::Box<runtime_types::moonbase_runtime::OriginCaller>,
                    pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::moonbase_runtime::RuntimeCall,
                    >,
                    pub enactment_moment:
                        runtime_types::frame_support::traits::schedule::DispatchTime<
                            ::core::primitive::u32,
                        >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Submit {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "submit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PlaceDecisionDeposit {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for PlaceDecisionDeposit {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "place_decision_deposit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RefundDecisionDeposit {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RefundDecisionDeposit {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "refund_decision_deposit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Cancel {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Cancel {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "cancel";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Kill {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Kill {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "kill";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct NudgeReferendum {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for NudgeReferendum {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "nudge_referendum";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OneFewerDeciding {
                    pub track: ::core::primitive::u16,
                }
                impl ::subxt::blocks::StaticExtrinsic for OneFewerDeciding {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "one_fewer_deciding";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RefundSubmissionDeposit {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RefundSubmissionDeposit {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "refund_submission_deposit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMetadata {
                    pub index: ::core::primitive::u32,
                    pub maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "set_metadata";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Propose a referendum on a privileged action."]
                #[doc = ""]
                #[doc = "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds"]
                #[doc = "  available."]
                #[doc = "- `proposal_origin`: The origin from which the proposal should be executed."]
                #[doc = "- `proposal`: The proposal."]
                #[doc = "- `enactment_moment`: The moment that the proposal should be enacted."]
                #[doc = ""]
                #[doc = "Emits `Submitted`."]
                pub fn submit(
                    &self,
                    proposal_origin: runtime_types::moonbase_runtime::OriginCaller,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::moonbase_runtime::RuntimeCall,
                    >,
                    enactment_moment: runtime_types::frame_support::traits::schedule::DispatchTime<
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Submit> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "submit",
                        types::Submit {
                            proposal_origin: ::std::boxed::Box::new(proposal_origin),
                            proposal,
                            enactment_moment,
                        },
                        [
                            91u8, 205u8, 21u8, 176u8, 3u8, 163u8, 216u8, 44u8, 7u8, 195u8, 214u8,
                            143u8, 156u8, 73u8, 10u8, 70u8, 173u8, 239u8, 253u8, 191u8, 199u8,
                            54u8, 187u8, 188u8, 46u8, 161u8, 134u8, 249u8, 94u8, 174u8, 172u8,
                            77u8,
                        ],
                    )
                }
                #[doc = "Post the Decision Deposit for a referendum."]
                #[doc = ""]
                #[doc = "- `origin`: must be `Signed` and the account must have funds available for the"]
                #[doc = "  referendum's track's Decision Deposit."]
                #[doc = "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be"]
                #[doc = "  posted."]
                #[doc = ""]
                #[doc = "Emits `DecisionDepositPlaced`."]
                pub fn place_decision_deposit(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::PlaceDecisionDeposit> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "place_decision_deposit",
                        types::PlaceDecisionDeposit { index },
                        [
                            247u8, 158u8, 55u8, 191u8, 188u8, 200u8, 3u8, 47u8, 20u8, 175u8, 86u8,
                            203u8, 52u8, 253u8, 91u8, 131u8, 21u8, 213u8, 56u8, 68u8, 40u8, 84u8,
                            184u8, 30u8, 9u8, 193u8, 63u8, 182u8, 178u8, 241u8, 247u8, 220u8,
                        ],
                    )
                }
                #[doc = "Refund the Decision Deposit for a closed referendum back to the depositor."]
                #[doc = ""]
                #[doc = "- `origin`: must be `Signed` or `Root`."]
                #[doc = "- `index`: The index of a closed referendum whose Decision Deposit has not yet been"]
                #[doc = "  refunded."]
                #[doc = ""]
                #[doc = "Emits `DecisionDepositRefunded`."]
                pub fn refund_decision_deposit(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RefundDecisionDeposit> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "refund_decision_deposit",
                        types::RefundDecisionDeposit { index },
                        [
                            159u8, 19u8, 35u8, 216u8, 114u8, 105u8, 18u8, 42u8, 148u8, 151u8,
                            136u8, 92u8, 117u8, 30u8, 29u8, 41u8, 238u8, 58u8, 195u8, 91u8, 115u8,
                            135u8, 96u8, 99u8, 154u8, 233u8, 8u8, 249u8, 145u8, 165u8, 77u8, 164u8,
                        ],
                    )
                }
                #[doc = "Cancel an ongoing referendum."]
                #[doc = ""]
                #[doc = "- `origin`: must be the `CancelOrigin`."]
                #[doc = "- `index`: The index of the referendum to be cancelled."]
                #[doc = ""]
                #[doc = "Emits `Cancelled`."]
                pub fn cancel(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Cancel> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "cancel",
                        types::Cancel { index },
                        [
                            55u8, 206u8, 119u8, 156u8, 238u8, 165u8, 193u8, 73u8, 242u8, 13u8,
                            212u8, 75u8, 136u8, 156u8, 151u8, 14u8, 35u8, 41u8, 156u8, 107u8, 60u8,
                            190u8, 39u8, 216u8, 8u8, 74u8, 213u8, 130u8, 160u8, 131u8, 237u8,
                            122u8,
                        ],
                    )
                }
                #[doc = "Cancel an ongoing referendum and slash the deposits."]
                #[doc = ""]
                #[doc = "- `origin`: must be the `KillOrigin`."]
                #[doc = "- `index`: The index of the referendum to be cancelled."]
                #[doc = ""]
                #[doc = "Emits `Killed` and `DepositSlashed`."]
                pub fn kill(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Kill> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "kill",
                        types::Kill { index },
                        [
                            50u8, 89u8, 57u8, 0u8, 87u8, 129u8, 113u8, 140u8, 179u8, 178u8, 126u8,
                            198u8, 92u8, 92u8, 189u8, 64u8, 123u8, 232u8, 57u8, 227u8, 223u8,
                            219u8, 73u8, 217u8, 179u8, 44u8, 210u8, 125u8, 180u8, 10u8, 143u8,
                            48u8,
                        ],
                    )
                }
                #[doc = "Advance a referendum onto its next logical state. Only used internally."]
                #[doc = ""]
                #[doc = "- `origin`: must be `Root`."]
                #[doc = "- `index`: the referendum to be advanced."]
                pub fn nudge_referendum(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::NudgeReferendum> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "nudge_referendum",
                        types::NudgeReferendum { index },
                        [
                            75u8, 99u8, 172u8, 30u8, 170u8, 150u8, 211u8, 229u8, 249u8, 128u8,
                            194u8, 246u8, 100u8, 142u8, 193u8, 184u8, 232u8, 81u8, 29u8, 17u8,
                            99u8, 91u8, 236u8, 85u8, 230u8, 226u8, 57u8, 115u8, 45u8, 170u8, 54u8,
                            213u8,
                        ],
                    )
                }
                #[doc = "Advance a track onto its next logical state. Only used internally."]
                #[doc = ""]
                #[doc = "- `origin`: must be `Root`."]
                #[doc = "- `track`: the track to be advanced."]
                #[doc = ""]
                #[doc = "Action item for when there is now one fewer referendum in the deciding phase and the"]
                #[doc = "`DecidingCount` is not yet updated. This means that we should either:"]
                #[doc = "- begin deciding another referendum (and leave `DecidingCount` alone); or"]
                #[doc = "- decrement `DecidingCount`."]
                pub fn one_fewer_deciding(
                    &self,
                    track: ::core::primitive::u16,
                ) -> ::subxt::tx::Payload<types::OneFewerDeciding> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "one_fewer_deciding",
                        types::OneFewerDeciding { track },
                        [
                            15u8, 84u8, 79u8, 231u8, 21u8, 239u8, 244u8, 143u8, 183u8, 215u8,
                            181u8, 25u8, 225u8, 195u8, 95u8, 171u8, 17u8, 156u8, 182u8, 128u8,
                            111u8, 40u8, 151u8, 102u8, 196u8, 55u8, 36u8, 212u8, 89u8, 190u8,
                            131u8, 167u8,
                        ],
                    )
                }
                #[doc = "Refund the Submission Deposit for a closed referendum back to the depositor."]
                #[doc = ""]
                #[doc = "- `origin`: must be `Signed` or `Root`."]
                #[doc = "- `index`: The index of a closed referendum whose Submission Deposit has not yet been"]
                #[doc = "  refunded."]
                #[doc = ""]
                #[doc = "Emits `SubmissionDepositRefunded`."]
                pub fn refund_submission_deposit(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RefundSubmissionDeposit> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "refund_submission_deposit",
                        types::RefundSubmissionDeposit { index },
                        [
                            20u8, 217u8, 115u8, 6u8, 1u8, 60u8, 54u8, 136u8, 35u8, 41u8, 38u8,
                            23u8, 85u8, 100u8, 141u8, 126u8, 30u8, 160u8, 61u8, 46u8, 134u8, 98u8,
                            82u8, 38u8, 211u8, 124u8, 208u8, 222u8, 210u8, 10u8, 155u8, 122u8,
                        ],
                    )
                }
                #[doc = "Set or clear metadata of a referendum."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a"]
                #[doc = "  metadata of a finished referendum."]
                #[doc = "- `index`:  The index of a referendum to set or clear metadata for."]
                #[doc = "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."]
                pub fn set_metadata(
                    &self,
                    index: ::core::primitive::u32,
                    maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                ) -> ::subxt::tx::Payload<types::SetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "set_metadata",
                        types::SetMetadata { index, maybe_hash },
                        [
                            207u8, 29u8, 146u8, 233u8, 219u8, 205u8, 88u8, 118u8, 106u8, 61u8,
                            124u8, 101u8, 2u8, 41u8, 169u8, 70u8, 114u8, 189u8, 162u8, 118u8, 1u8,
                            108u8, 234u8, 98u8, 245u8, 245u8, 183u8, 126u8, 89u8, 13u8, 112u8,
                            88u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_referenda::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been submitted."]
            pub struct Submitted {
                pub index: ::core::primitive::u32,
                pub track: ::core::primitive::u16,
                pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                    runtime_types::moonbase_runtime::RuntimeCall,
                >,
            }
            impl ::subxt::events::StaticEvent for Submitted {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "Submitted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The decision deposit has been placed."]
            pub struct DecisionDepositPlaced {
                pub index: ::core::primitive::u32,
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DecisionDepositPlaced {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "DecisionDepositPlaced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The decision deposit has been refunded."]
            pub struct DecisionDepositRefunded {
                pub index: ::core::primitive::u32,
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DecisionDepositRefunded {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "DecisionDepositRefunded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A deposit has been slashaed."]
            pub struct DepositSlashed {
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DepositSlashed {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "DepositSlashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has moved into the deciding phase."]
            pub struct DecisionStarted {
                pub index: ::core::primitive::u32,
                pub track: ::core::primitive::u16,
                pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                    runtime_types::moonbase_runtime::RuntimeCall,
                >,
                pub tally:
                    runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for DecisionStarted {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "DecisionStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ConfirmStarted {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ConfirmStarted {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "ConfirmStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ConfirmAborted {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ConfirmAborted {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "ConfirmAborted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has ended its confirmation phase and is ready for approval."]
            pub struct Confirmed {
                pub index: ::core::primitive::u32,
                pub tally:
                    runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for Confirmed {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "Confirmed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been approved and its proposal has been scheduled."]
            pub struct Approved {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal has been rejected by referendum."]
            pub struct Rejected {
                pub index: ::core::primitive::u32,
                pub tally:
                    runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for Rejected {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "Rejected";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been timed out without being decided."]
            pub struct TimedOut {
                pub index: ::core::primitive::u32,
                pub tally:
                    runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for TimedOut {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "TimedOut";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been cancelled."]
            pub struct Cancelled {
                pub index: ::core::primitive::u32,
                pub tally:
                    runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for Cancelled {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "Cancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been killed."]
            pub struct Killed {
                pub index: ::core::primitive::u32,
                pub tally:
                    runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for Killed {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "Killed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The submission deposit has been refunded."]
            pub struct SubmissionDepositRefunded {
                pub index: ::core::primitive::u32,
                pub who: runtime_types::account::AccountId20,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SubmissionDepositRefunded {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "SubmissionDepositRefunded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata for a referendum has been set."]
            pub struct MetadataSet {
                pub index: ::core::primitive::u32,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata for a referendum has been cleared."]
            pub struct MetadataCleared {
                pub index: ::core::primitive::u32,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataCleared {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "MetadataCleared";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The next free referendum index, aka the number of referenda started so far."]
                pub fn referendum_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "ReferendumCount",
                        vec![],
                        [
                            64u8, 145u8, 232u8, 153u8, 121u8, 87u8, 128u8, 253u8, 170u8, 192u8,
                            139u8, 18u8, 0u8, 33u8, 243u8, 11u8, 238u8, 222u8, 244u8, 5u8, 247u8,
                            198u8, 149u8, 31u8, 122u8, 208u8, 86u8, 179u8, 166u8, 167u8, 93u8,
                            67u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                pub fn referendum_info_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_referenda::types::ReferendumInfo<
                        ::core::primitive::u16,
                        runtime_types::moonbase_runtime::OriginCaller,
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::moonbase_runtime::RuntimeCall,
                        >,
                        ::core::primitive::u128,
                        runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                        runtime_types::account::AccountId20,
                        (::core::primitive::u32, ::core::primitive::u32),
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "ReferendumInfoFor",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            154u8, 192u8, 0u8, 28u8, 87u8, 100u8, 111u8, 231u8, 171u8, 13u8, 236u8,
                            35u8, 40u8, 216u8, 109u8, 21u8, 145u8, 39u8, 72u8, 106u8, 54u8, 74u8,
                            214u8, 219u8, 14u8, 90u8, 8u8, 152u8, 219u8, 11u8, 125u8, 240u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                pub fn referendum_info_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_referenda::types::ReferendumInfo<
                        ::core::primitive::u16,
                        runtime_types::moonbase_runtime::OriginCaller,
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::moonbase_runtime::RuntimeCall,
                        >,
                        ::core::primitive::u128,
                        runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                        runtime_types::account::AccountId20,
                        (::core::primitive::u32, ::core::primitive::u32),
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "ReferendumInfoFor",
                        Vec::new(),
                        [
                            154u8, 192u8, 0u8, 28u8, 87u8, 100u8, 111u8, 231u8, 171u8, 13u8, 236u8,
                            35u8, 40u8, 216u8, 109u8, 21u8, 145u8, 39u8, 72u8, 106u8, 54u8, 74u8,
                            214u8, 219u8, 14u8, 90u8, 8u8, 152u8, 219u8, 11u8, 125u8, 240u8,
                        ],
                    )
                }
                #[doc = " The sorted list of referenda ready to be decided but not yet being decided, ordered by"]
                #[doc = " conviction-weighted approvals."]
                #[doc = ""]
                #[doc = " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."]
                pub fn track_queue(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u16>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "TrackQueue",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            125u8, 59u8, 111u8, 68u8, 27u8, 236u8, 82u8, 55u8, 83u8, 159u8, 105u8,
                            20u8, 241u8, 118u8, 58u8, 141u8, 103u8, 60u8, 246u8, 49u8, 121u8,
                            183u8, 7u8, 203u8, 225u8, 67u8, 132u8, 79u8, 150u8, 107u8, 71u8, 89u8,
                        ],
                    )
                }
                #[doc = " The sorted list of referenda ready to be decided but not yet being decided, ordered by"]
                #[doc = " conviction-weighted approvals."]
                #[doc = ""]
                #[doc = " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."]
                pub fn track_queue_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    )>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "TrackQueue",
                        Vec::new(),
                        [
                            125u8, 59u8, 111u8, 68u8, 27u8, 236u8, 82u8, 55u8, 83u8, 159u8, 105u8,
                            20u8, 241u8, 118u8, 58u8, 141u8, 103u8, 60u8, 246u8, 49u8, 121u8,
                            183u8, 7u8, 203u8, 225u8, 67u8, 132u8, 79u8, 150u8, 107u8, 71u8, 89u8,
                        ],
                    )
                }
                #[doc = " The number of referenda being decided currently."]
                pub fn deciding_count(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u16>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "DecidingCount",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            203u8, 89u8, 158u8, 179u8, 194u8, 82u8, 248u8, 162u8, 93u8, 140u8,
                            146u8, 51u8, 110u8, 232u8, 51u8, 1u8, 128u8, 212u8, 199u8, 14u8, 182u8,
                            103u8, 47u8, 252u8, 126u8, 108u8, 166u8, 69u8, 252u8, 179u8, 126u8,
                            245u8,
                        ],
                    )
                }
                #[doc = " The number of referenda being decided currently."]
                pub fn deciding_count_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "DecidingCount",
                        Vec::new(),
                        [
                            203u8, 89u8, 158u8, 179u8, 194u8, 82u8, 248u8, 162u8, 93u8, 140u8,
                            146u8, 51u8, 110u8, 232u8, 51u8, 1u8, 128u8, 212u8, 199u8, 14u8, 182u8,
                            103u8, 47u8, 252u8, 126u8, 108u8, 166u8, 69u8, 252u8, 179u8, 126u8,
                            245u8,
                        ],
                    )
                }
                #[doc = " The metadata is a general information concerning the referendum."]
                #[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
                #[doc = " dump or IPFS hash of a JSON file."]
                #[doc = ""]
                #[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
                #[doc = " large preimages."]
                pub fn metadata_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "MetadataOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            159u8, 250u8, 56u8, 189u8, 247u8, 165u8, 206u8, 166u8, 91u8, 139u8,
                            124u8, 164u8, 25u8, 246u8, 199u8, 36u8, 159u8, 56u8, 227u8, 136u8, 4u8,
                            45u8, 193u8, 72u8, 200u8, 164u8, 39u8, 207u8, 224u8, 124u8, 191u8,
                            110u8,
                        ],
                    )
                }
                #[doc = " The metadata is a general information concerning the referendum."]
                #[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
                #[doc = " dump or IPFS hash of a JSON file."]
                #[doc = ""]
                #[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
                #[doc = " large preimages."]
                pub fn metadata_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "MetadataOf",
                        Vec::new(),
                        [
                            159u8, 250u8, 56u8, 189u8, 247u8, 165u8, 206u8, 166u8, 91u8, 139u8,
                            124u8, 164u8, 25u8, 246u8, 199u8, 36u8, 159u8, 56u8, 227u8, 136u8, 4u8,
                            45u8, 193u8, 72u8, 200u8, 164u8, 39u8, 207u8, 224u8, 124u8, 191u8,
                            110u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
                pub fn submission_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Referenda",
                        "SubmissionDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Maximum size of the referendum queue for a single track."]
                pub fn max_queued(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Referenda",
                        "MaxQueued",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The number of blocks after submission that a referendum must begin being decided by."]
                #[doc = " Once this passes, then anyone may cancel the referendum."]
                pub fn undeciding_timeout(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Referenda",
                        "UndecidingTimeout",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Quantization level for the referendum wakeup scheduler. A higher number will result in"]
                #[doc = " fewer storage reads/writes needed for smaller voters, but also result in delays to the"]
                #[doc = " automatic referendum status changes. Explicit servicing instructions are unaffected."]
                pub fn alarm_interval(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Referenda",
                        "AlarmInterval",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Information concerning the different referendum tracks."]
                pub fn tracks(
                    &self,
                ) -> ::subxt::constants::Address<
                    ::std::vec::Vec<(
                        ::core::primitive::u16,
                        runtime_types::pallet_referenda::types::TrackInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    )>,
                > {
                    ::subxt::constants::Address::new_static(
                        "Referenda",
                        "Tracks",
                        [
                            35u8, 226u8, 207u8, 234u8, 184u8, 139u8, 187u8, 184u8, 128u8, 199u8,
                            227u8, 15u8, 31u8, 196u8, 5u8, 207u8, 138u8, 174u8, 130u8, 201u8,
                            200u8, 113u8, 86u8, 93u8, 221u8, 243u8, 229u8, 24u8, 18u8, 150u8, 56u8,
                            159u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod preimage {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_preimage::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_preimage::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct NotePreimage {
                    pub bytes: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for NotePreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "note_preimage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UnnotePreimage {
                    pub hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for UnnotePreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "unnote_preimage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RequestPreimage {
                    pub hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for RequestPreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "request_preimage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UnrequestPreimage {
                    pub hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for UnrequestPreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "unrequest_preimage";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Register a preimage on-chain."]
                #[doc = ""]
                #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
                #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
                pub fn note_preimage(
                    &self,
                    bytes: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::NotePreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "note_preimage",
                        types::NotePreimage { bytes },
                        [
                            121u8, 88u8, 18u8, 92u8, 176u8, 15u8, 192u8, 198u8, 146u8, 198u8, 38u8,
                            242u8, 213u8, 83u8, 7u8, 230u8, 14u8, 110u8, 235u8, 32u8, 215u8, 26u8,
                            192u8, 217u8, 113u8, 224u8, 206u8, 96u8, 177u8, 198u8, 246u8, 33u8,
                        ],
                    )
                }
                #[doc = "Clear an unrequested preimage from the runtime storage."]
                #[doc = ""]
                #[doc = "If `len` is provided, then it will be a much cheaper operation."]
                #[doc = ""]
                #[doc = "- `hash`: The hash of the preimage to be removed from the store."]
                #[doc = "- `len`: The length of the preimage of `hash`."]
                pub fn unnote_preimage(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::UnnotePreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "unnote_preimage",
                        types::UnnotePreimage { hash },
                        [
                            188u8, 116u8, 222u8, 22u8, 127u8, 215u8, 2u8, 133u8, 96u8, 202u8,
                            190u8, 123u8, 203u8, 43u8, 200u8, 161u8, 226u8, 24u8, 49u8, 36u8,
                            221u8, 160u8, 130u8, 119u8, 30u8, 138u8, 144u8, 85u8, 5u8, 164u8,
                            252u8, 222u8,
                        ],
                    )
                }
                #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
                #[doc = ""]
                #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
                #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
                pub fn request_preimage(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::RequestPreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "request_preimage",
                        types::RequestPreimage { hash },
                        [
                            87u8, 0u8, 204u8, 111u8, 43u8, 115u8, 64u8, 209u8, 133u8, 13u8, 83u8,
                            45u8, 164u8, 166u8, 233u8, 105u8, 242u8, 238u8, 235u8, 208u8, 113u8,
                            134u8, 93u8, 242u8, 86u8, 32u8, 7u8, 152u8, 107u8, 208u8, 79u8, 59u8,
                        ],
                    )
                }
                #[doc = "Clear a previously made request for a preimage."]
                #[doc = ""]
                #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
                pub fn unrequest_preimage(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::UnrequestPreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "unrequest_preimage",
                        types::UnrequestPreimage { hash },
                        [
                            55u8, 37u8, 224u8, 149u8, 142u8, 120u8, 8u8, 68u8, 183u8, 225u8, 255u8,
                            240u8, 254u8, 111u8, 58u8, 200u8, 113u8, 217u8, 177u8, 203u8, 107u8,
                            104u8, 233u8, 87u8, 252u8, 53u8, 33u8, 112u8, 116u8, 254u8, 117u8,
                            134u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_preimage::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A preimage has been noted."]
            pub struct Noted {
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Noted {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Noted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A preimage has been requested."]
            pub struct Requested {
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Requested {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Requested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A preimage has ben cleared."]
            pub struct Cleared {
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Cleared {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Cleared";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The request status of a given hash."]
                pub fn status_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_preimage::RequestStatus<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "StatusFor",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            74u8, 55u8, 179u8, 182u8, 220u8, 123u8, 206u8, 149u8, 35u8, 228u8,
                            196u8, 187u8, 54u8, 64u8, 164u8, 239u8, 234u8, 32u8, 45u8, 161u8, 42u8,
                            17u8, 130u8, 209u8, 79u8, 100u8, 100u8, 99u8, 71u8, 76u8, 138u8, 195u8,
                        ],
                    )
                }
                #[doc = " The request status of a given hash."]
                pub fn status_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_preimage::RequestStatus<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "StatusFor",
                        Vec::new(),
                        [
                            74u8, 55u8, 179u8, 182u8, 220u8, 123u8, 206u8, 149u8, 35u8, 228u8,
                            196u8, 187u8, 54u8, 64u8, 164u8, 239u8, 234u8, 32u8, 45u8, 161u8, 42u8,
                            17u8, 130u8, 209u8, 79u8, 100u8, 100u8, 99u8, 71u8, 76u8, 138u8, 195u8,
                        ],
                    )
                }
                pub fn preimage_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "PreimageFor",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
                            141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
                            208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
                            139u8,
                        ],
                    )
                }
                pub fn preimage_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "PreimageFor",
                        Vec::new(),
                        [
                            106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
                            141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
                            208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
                            139u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod whitelist {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_whitelist::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_whitelist::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WhitelistCall {
                    pub call_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for WhitelistCall {
                    const PALLET: &'static str = "Whitelist";
                    const CALL: &'static str = "whitelist_call";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveWhitelistedCall {
                    pub call_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveWhitelistedCall {
                    const PALLET: &'static str = "Whitelist";
                    const CALL: &'static str = "remove_whitelisted_call";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DispatchWhitelistedCall {
                    pub call_hash: ::subxt::utils::H256,
                    pub call_encoded_len: ::core::primitive::u32,
                    pub call_weight_witness: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for DispatchWhitelistedCall {
                    const PALLET: &'static str = "Whitelist";
                    const CALL: &'static str = "dispatch_whitelisted_call";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DispatchWhitelistedCallWithPreimage {
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for DispatchWhitelistedCallWithPreimage {
                    const PALLET: &'static str = "Whitelist";
                    const CALL: &'static str = "dispatch_whitelisted_call_with_preimage";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn whitelist_call(
                    &self,
                    call_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::WhitelistCall> {
                    ::subxt::tx::Payload::new_static(
                        "Whitelist",
                        "whitelist_call",
                        types::WhitelistCall { call_hash },
                        [
                            121u8, 165u8, 49u8, 37u8, 127u8, 38u8, 126u8, 213u8, 115u8, 148u8,
                            122u8, 211u8, 24u8, 91u8, 147u8, 27u8, 87u8, 210u8, 84u8, 104u8, 229u8,
                            155u8, 133u8, 30u8, 34u8, 249u8, 107u8, 110u8, 31u8, 191u8, 128u8,
                            28u8,
                        ],
                    )
                }
                pub fn remove_whitelisted_call(
                    &self,
                    call_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::RemoveWhitelistedCall> {
                    ::subxt::tx::Payload::new_static(
                        "Whitelist",
                        "remove_whitelisted_call",
                        types::RemoveWhitelistedCall { call_hash },
                        [
                            30u8, 47u8, 13u8, 231u8, 165u8, 219u8, 246u8, 210u8, 11u8, 38u8, 219u8,
                            218u8, 151u8, 226u8, 101u8, 175u8, 0u8, 239u8, 35u8, 46u8, 156u8,
                            104u8, 145u8, 173u8, 105u8, 100u8, 21u8, 189u8, 123u8, 227u8, 196u8,
                            40u8,
                        ],
                    )
                }
                pub fn dispatch_whitelisted_call(
                    &self,
                    call_hash: ::subxt::utils::H256,
                    call_encoded_len: ::core::primitive::u32,
                    call_weight_witness: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::DispatchWhitelistedCall> {
                    ::subxt::tx::Payload::new_static(
                        "Whitelist",
                        "dispatch_whitelisted_call",
                        types::DispatchWhitelistedCall {
                            call_hash,
                            call_encoded_len,
                            call_weight_witness,
                        },
                        [
                            112u8, 67u8, 72u8, 26u8, 3u8, 214u8, 86u8, 102u8, 29u8, 96u8, 222u8,
                            24u8, 115u8, 15u8, 124u8, 160u8, 148u8, 184u8, 56u8, 162u8, 188u8,
                            123u8, 213u8, 234u8, 208u8, 123u8, 133u8, 253u8, 43u8, 226u8, 66u8,
                            116u8,
                        ],
                    )
                }
                pub fn dispatch_whitelisted_call_with_preimage(
                    &self,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::DispatchWhitelistedCallWithPreimage>
                {
                    ::subxt::tx::Payload::new_static(
                        "Whitelist",
                        "dispatch_whitelisted_call_with_preimage",
                        types::DispatchWhitelistedCallWithPreimage {
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            59u8, 65u8, 71u8, 38u8, 154u8, 141u8, 242u8, 197u8, 114u8, 177u8, 40u8,
                            231u8, 69u8, 123u8, 87u8, 148u8, 70u8, 65u8, 197u8, 67u8, 94u8, 18u8,
                            92u8, 82u8, 230u8, 39u8, 168u8, 232u8, 132u8, 55u8, 152u8, 35u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_whitelist::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CallWhitelisted {
                pub call_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for CallWhitelisted {
                const PALLET: &'static str = "Whitelist";
                const EVENT: &'static str = "CallWhitelisted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct WhitelistedCallRemoved {
                pub call_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for WhitelistedCallRemoved {
                const PALLET: &'static str = "Whitelist";
                const EVENT: &'static str = "WhitelistedCallRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct WhitelistedCallDispatched {
                pub call_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<
                    runtime_types::frame_support::dispatch::PostDispatchInfo,
                    runtime_types::sp_runtime::DispatchErrorWithPostInfo<
                        runtime_types::frame_support::dispatch::PostDispatchInfo,
                    >,
                >,
            }
            impl ::subxt::events::StaticEvent for WhitelistedCallDispatched {
                const PALLET: &'static str = "Whitelist";
                const EVENT: &'static str = "WhitelistedCallDispatched";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn whitelisted_call(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Whitelist",
                        "WhitelistedCall",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            82u8, 208u8, 214u8, 72u8, 225u8, 35u8, 51u8, 212u8, 25u8, 138u8, 30u8,
                            87u8, 54u8, 232u8, 72u8, 132u8, 4u8, 9u8, 28u8, 143u8, 251u8, 106u8,
                            167u8, 218u8, 130u8, 185u8, 253u8, 185u8, 113u8, 154u8, 202u8, 66u8,
                        ],
                    )
                }
                pub fn whitelisted_call_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Whitelist",
                        "WhitelistedCall",
                        Vec::new(),
                        [
                            82u8, 208u8, 214u8, 72u8, 225u8, 35u8, 51u8, 212u8, 25u8, 138u8, 30u8,
                            87u8, 54u8, 232u8, 72u8, 132u8, 4u8, 9u8, 28u8, 143u8, 251u8, 106u8,
                            167u8, 218u8, 130u8, 185u8, 253u8, 185u8, 113u8, 154u8, 202u8, 66u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod open_tech_committee_collective {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_collective::pallet::Error4;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_collective::pallet::Call4;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMembers {
                    pub new_members: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    pub prime: ::core::option::Option<runtime_types::account::AccountId20>,
                    pub old_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMembers {
                    const PALLET: &'static str = "OpenTechCommitteeCollective";
                    const CALL: &'static str = "set_members";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Execute {
                    pub proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "OpenTechCommitteeCollective";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Propose {
                    #[codec(compact)]
                    pub threshold: ::core::primitive::u32,
                    pub proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "OpenTechCommitteeCollective";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    pub proposal: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub approve: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "OpenTechCommitteeCollective";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisapproveProposal {
                    pub proposal_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for DisapproveProposal {
                    const PALLET: &'static str = "OpenTechCommitteeCollective";
                    const CALL: &'static str = "disapprove_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Close {
                    pub proposal_hash: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Close {
                    const PALLET: &'static str = "OpenTechCommitteeCollective";
                    const CALL: &'static str = "close";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the collective's membership."]
                #[doc = ""]
                #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                #[doc = "- `prime`: The prime member whose vote sets the default."]
                #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                #[doc = "  weight estimation."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                #[doc = ""]
                #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                #[doc = ""]
                #[doc = "# WARNING:"]
                #[doc = ""]
                #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                #[doc = "implementation of the trait [`ChangeMembers`]."]
                #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                #[doc = "with other logic managing the member set."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(MP + N)` where:"]
                #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                #[doc = "  - `P` proposals-count (code-bounded)"]
                pub fn set_members(
                    &self,
                    new_members: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    prime: ::core::option::Option<runtime_types::account::AccountId20>,
                    old_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "OpenTechCommitteeCollective",
                        "set_members",
                        types::SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            57u8, 48u8, 193u8, 19u8, 33u8, 214u8, 209u8, 67u8, 27u8, 228u8, 99u8,
                            142u8, 118u8, 147u8, 228u8, 12u8, 25u8, 250u8, 141u8, 100u8, 98u8,
                            206u8, 128u8, 17u8, 226u8, 68u8, 96u8, 177u8, 196u8, 192u8, 4u8, 67u8,
                        ],
                    )
                }
                #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                #[doc = ""]
                #[doc = "Origin must be a member of the collective."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(B + M + P)` where:"]
                #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "- `M` members-count (code-bounded)"]
                #[doc = "- `P` complexity of dispatching `proposal`"]
                pub fn execute(
                    &self,
                    proposal: runtime_types::moonbase_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Execute> {
                    ::subxt::tx::Payload::new_static(
                        "OpenTechCommitteeCollective",
                        "execute",
                        types::Execute {
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            46u8, 232u8, 151u8, 1u8, 147u8, 192u8, 62u8, 63u8, 0u8, 254u8, 157u8,
                            44u8, 94u8, 5u8, 31u8, 15u8, 16u8, 208u8, 38u8, 142u8, 71u8, 169u8,
                            139u8, 158u8, 162u8, 102u8, 100u8, 49u8, 66u8, 255u8, 123u8, 163u8,
                        ],
                    )
                }
                #[doc = "Add a new proposal to either be voted on or executed directly."]
                #[doc = ""]
                #[doc = "Requires the sender to be member."]
                #[doc = ""]
                #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                #[doc = "or put up for voting."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - branching is influenced by `threshold` where:"]
                #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                pub fn propose(
                    &self,
                    threshold: ::core::primitive::u32,
                    proposal: runtime_types::moonbase_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Propose> {
                    ::subxt::tx::Payload::new_static(
                        "OpenTechCommitteeCollective",
                        "propose",
                        types::Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            114u8, 103u8, 23u8, 11u8, 199u8, 241u8, 42u8, 57u8, 215u8, 223u8,
                            152u8, 236u8, 32u8, 240u8, 165u8, 65u8, 246u8, 222u8, 195u8, 252u8,
                            93u8, 163u8, 43u8, 85u8, 150u8, 127u8, 146u8, 135u8, 215u8, 213u8,
                            152u8, 99u8,
                        ],
                    )
                }
                #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                #[doc = ""]
                #[doc = "Requires the sender to be a member."]
                #[doc = ""]
                #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                #[doc = "fee."]
                #[doc = "## Complexity"]
                #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                pub fn vote(
                    &self,
                    proposal: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "OpenTechCommitteeCollective",
                        "vote",
                        types::Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
                            129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
                            176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
                            120u8,
                        ],
                    )
                }
                #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                #[doc = "state."]
                #[doc = ""]
                #[doc = "Must be called by the Root origin."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(P) where P is the number of max proposals"]
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::DisapproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "OpenTechCommitteeCollective",
                        "disapprove_proposal",
                        types::DisapproveProposal { proposal_hash },
                        [
                            26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
                            155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
                            156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
                        ],
                    )
                }
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                pub fn close(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Close> {
                    ::subxt::tx::Payload::new_static(
                        "OpenTechCommitteeCollective",
                        "close",
                        types::Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            136u8, 48u8, 243u8, 34u8, 60u8, 109u8, 186u8, 158u8, 72u8, 48u8, 62u8,
                            34u8, 167u8, 46u8, 33u8, 142u8, 239u8, 43u8, 238u8, 125u8, 94u8, 80u8,
                            157u8, 245u8, 220u8, 126u8, 58u8, 244u8, 186u8, 195u8, 30u8, 127u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_collective::pallet::Event4;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
            #[doc = "`MemberCount`)."]
            pub struct Proposed {
                pub account: runtime_types::account::AccountId20,
                pub proposal_index: ::core::primitive::u32,
                pub proposal_hash: ::subxt::utils::H256,
                pub threshold: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "OpenTechCommitteeCollective";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been voted on by given account, leaving"]
            #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
            pub struct Voted {
                pub account: runtime_types::account::AccountId20,
                pub proposal_hash: ::subxt::utils::H256,
                pub voted: ::core::primitive::bool,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "OpenTechCommitteeCollective";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was approved by the required threshold."]
            pub struct Approved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "OpenTechCommitteeCollective";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was not approved by the required threshold."]
            pub struct Disapproved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "OpenTechCommitteeCollective";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
            pub struct Executed {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "OpenTechCommitteeCollective";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
            pub struct MemberExecuted {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "OpenTechCommitteeCollective";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
            pub struct Closed {
                pub proposal_hash: ::subxt::utils::H256,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "OpenTechCommitteeCollective";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The hashes of the active proposals."]
                pub fn proposals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::H256,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "OpenTechCommitteeCollective",
                        "Proposals",
                        vec![],
                        [
                            210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
                            147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
                            198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::moonbase_runtime::RuntimeCall,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "OpenTechCommitteeCollective",
                        "ProposalOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            72u8, 150u8, 102u8, 62u8, 13u8, 225u8, 203u8, 109u8, 26u8, 138u8,
                            181u8, 159u8, 164u8, 57u8, 83u8, 90u8, 177u8, 162u8, 250u8, 224u8,
                            176u8, 206u8, 28u8, 214u8, 219u8, 235u8, 31u8, 65u8, 1u8, 143u8, 246u8,
                            171u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::moonbase_runtime::RuntimeCall,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "OpenTechCommitteeCollective",
                        "ProposalOf",
                        Vec::new(),
                        [
                            72u8, 150u8, 102u8, 62u8, 13u8, 225u8, 203u8, 109u8, 26u8, 138u8,
                            181u8, 159u8, 164u8, 57u8, 83u8, 90u8, 177u8, 162u8, 250u8, 224u8,
                            176u8, 206u8, 28u8, 214u8, 219u8, 235u8, 31u8, 65u8, 1u8, 143u8, 246u8,
                            171u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "OpenTechCommitteeCollective",
                        "Voting",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            98u8, 196u8, 41u8, 133u8, 250u8, 43u8, 117u8, 234u8, 220u8, 251u8,
                            209u8, 250u8, 141u8, 167u8, 161u8, 75u8, 192u8, 37u8, 144u8, 123u8,
                            18u8, 140u8, 173u8, 98u8, 87u8, 143u8, 145u8, 58u8, 37u8, 80u8, 173u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "OpenTechCommitteeCollective",
                        "Voting",
                        Vec::new(),
                        [
                            98u8, 196u8, 41u8, 133u8, 250u8, 43u8, 117u8, 234u8, 220u8, 251u8,
                            209u8, 250u8, 141u8, 167u8, 161u8, 75u8, 192u8, 37u8, 144u8, 123u8,
                            18u8, 140u8, 173u8, 98u8, 87u8, 143u8, 145u8, 58u8, 37u8, 80u8, 173u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " Proposals so far."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "OpenTechCommitteeCollective",
                        "ProposalCount",
                        vec![],
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective. This is stored sorted (just by value)."]
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<runtime_types::account::AccountId20>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "OpenTechCommitteeCollective",
                        "Members",
                        vec![],
                        [
                            239u8, 177u8, 211u8, 65u8, 244u8, 88u8, 99u8, 62u8, 211u8, 52u8, 40u8,
                            10u8, 99u8, 162u8, 212u8, 203u8, 225u8, 253u8, 182u8, 133u8, 107u8,
                            103u8, 77u8, 238u8, 148u8, 255u8, 65u8, 106u8, 9u8, 230u8, 236u8,
                            224u8,
                        ],
                    )
                }
                #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::account::AccountId20,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "OpenTechCommitteeCollective",
                        "Prime",
                        vec![],
                        [
                            37u8, 41u8, 188u8, 54u8, 33u8, 64u8, 159u8, 123u8, 190u8, 96u8, 187u8,
                            46u8, 35u8, 217u8, 157u8, 189u8, 243u8, 40u8, 118u8, 144u8, 104u8,
                            27u8, 188u8, 54u8, 55u8, 241u8, 78u8, 33u8, 116u8, 44u8, 88u8, 62u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
                pub fn max_proposal_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "OpenTechCommitteeCollective",
                        "MaxProposalWeight",
                        [
                            149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
                            56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
                            128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
                            112u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod root_testing {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_root_testing::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FillBlock {
                    pub ratio: runtime_types::sp_arithmetic::per_things::Perbill,
                }
                impl ::subxt::blocks::StaticExtrinsic for FillBlock {
                    const PALLET: &'static str = "RootTesting";
                    const CALL: &'static str = "fill_block";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "A dispatch that will fill the block weight up to the given ratio."]
                pub fn fill_block(
                    &self,
                    ratio: runtime_types::sp_arithmetic::per_things::Perbill,
                ) -> ::subxt::tx::Payload<types::FillBlock> {
                    ::subxt::tx::Payload::new_static(
                        "RootTesting",
                        "fill_block",
                        types::FillBlock { ratio },
                        [
                            164u8, 37u8, 43u8, 91u8, 125u8, 34u8, 208u8, 126u8, 67u8, 94u8, 184u8,
                            240u8, 68u8, 208u8, 41u8, 206u8, 172u8, 95u8, 111u8, 115u8, 9u8, 250u8,
                            163u8, 66u8, 240u8, 0u8, 237u8, 140u8, 87u8, 57u8, 162u8, 117u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {}
        }
    }
    pub mod erc20_xcm_bridge {
        use super::root_mod;
        use super::runtime_types;
    }
    pub mod multisig {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_multisig::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_multisig::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AsMultiThreshold1 {
                    pub other_signatories: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for AsMultiThreshold1 {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "as_multi_threshold_1";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AsMulti {
                    pub threshold: ::core::primitive::u16,
                    pub other_signatories: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    pub maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    pub call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for AsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "as_multi";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveAsMulti {
                    pub threshold: ::core::primitive::u16,
                    pub other_signatories: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    pub maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    pub call_hash: [::core::primitive::u8; 32usize],
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveAsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "approve_as_multi";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelAsMulti {
                    pub threshold: ::core::primitive::u16,
                    pub other_signatories: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    pub timepoint:
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    pub call_hash: [::core::primitive::u8; 32usize],
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelAsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "cancel_as_multi";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
                #[doc = "multi-signature, but do not participate in the approval process."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
                pub fn as_multi_threshold_1(
                    &self,
                    other_signatories: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::AsMultiThreshold1> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "as_multi_threshold_1",
                        types::AsMultiThreshold1 {
                            other_signatories,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            90u8, 114u8, 76u8, 190u8, 178u8, 141u8, 134u8, 133u8, 154u8, 93u8,
                            120u8, 41u8, 163u8, 163u8, 252u8, 255u8, 25u8, 137u8, 216u8, 193u8,
                            51u8, 130u8, 247u8, 219u8, 230u8, 142u8, 242u8, 76u8, 88u8, 110u8,
                            170u8, 184u8,
                        ],
                    )
                }
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "If there are enough, then dispatch the call."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
                #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
                #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
                #[doc = "may be found in the deposited `MultisigExecuted` event."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S + Z + Call)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- The weight of the `call`."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                pub fn as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    call: runtime_types::moonbase_runtime::RuntimeCall,
                    max_weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::AsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "as_multi",
                        types::AsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call: ::std::boxed::Box::new(call),
                            max_weight,
                        },
                        [
                            120u8, 28u8, 25u8, 253u8, 249u8, 210u8, 155u8, 86u8, 234u8, 242u8,
                            218u8, 87u8, 23u8, 141u8, 197u8, 200u8, 63u8, 44u8, 242u8, 205u8,
                            134u8, 241u8, 82u8, 2u8, 87u8, 22u8, 104u8, 87u8, 237u8, 244u8, 75u8,
                            106u8,
                        ],
                    )
                }
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                pub fn approve_as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    call_hash: [::core::primitive::u8; 32usize],
                    max_weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::ApproveAsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "approve_as_multi",
                        types::ApproveAsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call_hash,
                            max_weight,
                        },
                        [
                            46u8, 145u8, 69u8, 114u8, 81u8, 52u8, 81u8, 29u8, 128u8, 113u8, 68u8,
                            155u8, 236u8, 103u8, 18u8, 115u8, 170u8, 165u8, 81u8, 40u8, 21u8,
                            130u8, 39u8, 165u8, 70u8, 205u8, 39u8, 109u8, 255u8, 8u8, 84u8, 146u8,
                        ],
                    )
                }
                #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
                #[doc = "for this operation will be unreserved on success."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
                #[doc = "transaction for this dispatch."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- One event."]
                #[doc = "- I/O: 1 read `O(S)`, one remove."]
                #[doc = "- Storage: removes one item."]
                pub fn cancel_as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    call_hash: [::core::primitive::u8; 32usize],
                ) -> ::subxt::tx::Payload<types::CancelAsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "cancel_as_multi",
                        types::CancelAsMulti {
                            threshold,
                            other_signatories,
                            timepoint,
                            call_hash,
                        },
                        [
                            167u8, 10u8, 185u8, 123u8, 77u8, 135u8, 185u8, 224u8, 42u8, 3u8, 13u8,
                            194u8, 242u8, 152u8, 42u8, 3u8, 202u8, 174u8, 164u8, 149u8, 35u8, 87u8,
                            63u8, 24u8, 183u8, 199u8, 189u8, 159u8, 138u8, 160u8, 116u8, 37u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_multisig::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new multisig operation has begun."]
            pub struct NewMultisig {
                pub approving: runtime_types::account::AccountId20,
                pub multisig: runtime_types::account::AccountId20,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for NewMultisig {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "NewMultisig";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A multisig operation has been approved by someone."]
            pub struct MultisigApproval {
                pub approving: runtime_types::account::AccountId20,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: runtime_types::account::AccountId20,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for MultisigApproval {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigApproval";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A multisig operation has been executed."]
            pub struct MultisigExecuted {
                pub approving: runtime_types::account::AccountId20,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: runtime_types::account::AccountId20,
                pub call_hash: [::core::primitive::u8; 32usize],
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for MultisigExecuted {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A multisig operation has been cancelled."]
            pub struct MultisigCancelled {
                pub cancelling: runtime_types::account::AccountId20,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: runtime_types::account::AccountId20,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for MultisigCancelled {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigCancelled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of open multisig operations."]
                pub fn multisigs(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::account::AccountId20>,
                    _1: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_multisig::Multisig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            87u8, 7u8, 24u8, 224u8, 143u8, 13u8, 224u8, 6u8, 224u8, 55u8, 113u8,
                            8u8, 89u8, 121u8, 103u8, 37u8, 246u8, 242u8, 54u8, 236u8, 168u8, 32u8,
                            12u8, 7u8, 170u8, 105u8, 209u8, 46u8, 44u8, 140u8, 221u8, 131u8,
                        ],
                    )
                }
                #[doc = " The set of open multisig operations."]
                pub fn multisigs_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_multisig::Multisig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        Vec::new(),
                        [
                            87u8, 7u8, 24u8, 224u8, 143u8, 13u8, 224u8, 6u8, 224u8, 55u8, 113u8,
                            8u8, 89u8, 121u8, 103u8, 37u8, 246u8, 242u8, 54u8, 236u8, 168u8, 32u8,
                            12u8, 7u8, 170u8, 105u8, 209u8, 46u8, 44u8, 140u8, 221u8, 131u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a multisig execution or to"]
                #[doc = " store a dispatch call for later."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"]
                #[doc = " `32 + sizeof(AccountId)` bytes."]
                pub fn deposit_base(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "DepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per unit threshold when creating a multisig execution."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes more into a pre-existing storage value."]
                pub fn deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "DepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of signatories allowed in the multisig."]
                pub fn max_signatories(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "MaxSignatories",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod runtime_types {
        use super::runtime_types;
        pub mod account {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
                Clone,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AccountId20(pub [::core::primitive::u8; 20usize]);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EthereumSignature(pub runtime_types::sp_core::ecdsa::Signature);
        }
        pub mod bounded_collections {
            use super::runtime_types;
            pub mod bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
            }
            pub mod weak_bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
            }
        }
        pub mod cumulus_pallet_dmp_queue {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Service a single overweight message."]
                    service_overweight {
                        index: ::core::primitive::u64,
                        weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The message index given is unknown."]
                    Unknown,
                    #[codec(index = 1)]
                    #[doc = "The amount of weight given is possibly not enough for executing the message."]
                    OverLimit,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Downward message is invalid XCM."]
                    InvalidFormat {
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    #[doc = "Downward message is unsupported version of XCM."]
                    UnsupportedVersion {
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    #[doc = "Downward message executed with the given outcome."]
                    ExecutedDownward {
                        message_id: [::core::primitive::u8; 32usize],
                        outcome: runtime_types::xcm::v3::traits::Outcome,
                    },
                    #[codec(index = 3)]
                    #[doc = "The weight limit for handling downward messages was reached."]
                    WeightExhausted {
                        message_id: [::core::primitive::u8; 32usize],
                        remaining_weight: runtime_types::sp_weights::weight_v2::Weight,
                        required_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 4)]
                    #[doc = "Downward message is overweight and was placed in the overweight queue."]
                    OverweightEnqueued {
                        message_id: [::core::primitive::u8; 32usize],
                        overweight_index: ::core::primitive::u64,
                        required_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 5)]
                    #[doc = "Downward message from the overweight queue was executed."]
                    OverweightServiced {
                        overweight_index: ::core::primitive::u64,
                        weight_used: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 6)]
                    #[doc = "The maximum number of downward messages was."]
                    MaxMessagesExhausted {
                        message_id: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ConfigData {
                pub max_individual: runtime_types::sp_weights::weight_v2::Weight,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PageIndexData {
                pub begin_used: ::core::primitive::u32,
                pub end_used: ::core::primitive::u32,
                pub overweight_count: ::core::primitive::u64,
            }
        }
        pub mod cumulus_pallet_parachain_system {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Set the current validation data."] # [doc = ""] # [doc = "This should be invoked exactly once per block. It will panic at the finalization"] # [doc = "phase if the call was not invoked."] # [doc = ""] # [doc = "The dispatch origin for this call must be `Inherent`"] # [doc = ""] # [doc = "As a side effect, this function upgrades the current validation function"] # [doc = "if the appropriate time has come."] set_validation_data { data : runtime_types :: cumulus_primitives_parachain_inherent :: ParachainInherentData , } , # [codec (index = 1)] sudo_send_upward_message { message : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 2)] # [doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"] # [doc = "later."] # [doc = ""] # [doc = "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec"] # [doc = "version and name should be verified on upgrade. Since the authorization only has a hash,"] # [doc = "it cannot actually perform the verification."] # [doc = ""] # [doc = "This call requires Root origin."] authorize_upgrade { code_hash : :: subxt :: utils :: H256 , check_version : :: core :: primitive :: bool , } , # [codec (index = 3)] # [doc = "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized."] # [doc = ""] # [doc = "If the authorization required a version check, this call will ensure the spec name"] # [doc = "remains unchanged and that the spec version has increased."] # [doc = ""] # [doc = "Note that this function will not apply the new `code`, but only attempt to schedule the"] # [doc = "upgrade with the Relay Chain."] # [doc = ""] # [doc = "All origins are allowed."] enact_authorized_upgrade { code : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Attempt to upgrade validation function while existing upgrade pending."]
                    OverlappingUpgrades,
                    #[codec(index = 1)]
                    #[doc = "Polkadot currently prohibits this parachain from upgrading its validation function."]
                    ProhibitedByPolkadot,
                    #[codec(index = 2)]
                    #[doc = "The supplied validation function has compiled into a blob larger than Polkadot is"]
                    #[doc = "willing to run."]
                    TooBig,
                    #[codec(index = 3)]
                    #[doc = "The inherent which supplies the validation data did not run this block."]
                    ValidationDataNotAvailable,
                    #[codec(index = 4)]
                    #[doc = "The inherent which supplies the host configuration did not run this block."]
                    HostConfigurationNotAvailable,
                    #[codec(index = 5)]
                    #[doc = "No validation function upgrade is currently scheduled."]
                    NotScheduled,
                    #[codec(index = 6)]
                    #[doc = "No code upgrade has been authorized."]
                    NothingAuthorized,
                    #[codec(index = 7)]
                    #[doc = "The given code upgrade has not been authorized."]
                    Unauthorized,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The validation function has been scheduled to apply."]
                    ValidationFunctionStored,
                    #[codec(index = 1)]
                    #[doc = "The validation function was applied as of the contained relay chain block number."]
                    ValidationFunctionApplied {
                        relay_chain_block_num: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "The relay-chain aborted the upgrade process."]
                    ValidationFunctionDiscarded,
                    #[codec(index = 3)]
                    #[doc = "An upgrade has been authorized."]
                    UpgradeAuthorized { code_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    #[doc = "Some downward messages have been received and will be processed."]
                    DownwardMessagesReceived { count: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "Downward messages were processed using the given weight."]
                    DownwardMessagesProcessed {
                        weight_used: runtime_types::sp_weights::weight_v2::Weight,
                        dmq_head: ::subxt::utils::H256,
                    },
                    #[codec(index = 6)]
                    #[doc = "An upward message was sent to the relay chain."]
                    UpwardMessageSent {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                }
            }
            pub mod relay_state_snapshot {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MessagingStateSnapshot { pub dmq_mqc_head : :: subxt :: utils :: H256 , pub relay_dispatch_queue_size : runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: RelayDispachQueueSize , pub ingress_channels : :: std :: vec :: Vec < (runtime_types :: polkadot_parachain :: primitives :: Id , runtime_types :: polkadot_primitives :: v4 :: AbridgedHrmpChannel ,) > , pub egress_channels : :: std :: vec :: Vec < (runtime_types :: polkadot_parachain :: primitives :: Id , runtime_types :: polkadot_primitives :: v4 :: AbridgedHrmpChannel ,) > , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RelayDispachQueueSize {
                    pub remaining_count: ::core::primitive::u32,
                    pub remaining_size: ::core::primitive::u32,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CodeUpgradeAuthorization {
                pub code_hash: ::subxt::utils::H256,
                pub check_version: ::core::primitive::bool,
            }
        }
        pub mod cumulus_pallet_xcm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Downward message is invalid XCM."]
                    #[doc = "\\[ id \\]"]
                    InvalidFormat([::core::primitive::u8; 32usize]),
                    #[codec(index = 1)]
                    #[doc = "Downward message is unsupported version of XCM."]
                    #[doc = "\\[ id \\]"]
                    UnsupportedVersion([::core::primitive::u8; 32usize]),
                    #[codec(index = 2)]
                    #[doc = "Downward message executed with the given outcome."]
                    #[doc = "\\[ id, outcome \\]"]
                    ExecutedDownward(
                        [::core::primitive::u8; 32usize],
                        runtime_types::xcm::v3::traits::Outcome,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Origin {
                    #[codec(index = 0)]
                    Relay,
                    #[codec(index = 1)]
                    SiblingParachain(runtime_types::polkadot_parachain::primitives::Id),
                }
            }
        }
        pub mod cumulus_pallet_xcmp_queue {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Services a single overweight XCM."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `ExecuteOverweightOrigin`."]
                    #[doc = "- `index`: The index of the overweight XCM to service"]
                    #[doc = "- `weight_limit`: The amount of weight that XCM execution may take."]
                    #[doc = ""]
                    #[doc = "Errors:"]
                    #[doc = "- `BadOverweightIndex`: XCM under `index` is not found in the `Overweight` storage map."]
                    #[doc = "- `BadXcm`: XCM under `index` cannot be properly decoded into a valid XCM format."]
                    #[doc = "- `WeightOverLimit`: XCM execution may use greater `weight_limit`."]
                    #[doc = ""]
                    #[doc = "Events:"]
                    #[doc = "- `OverweightServiced`: On success."]
                    service_overweight {
                        index: ::core::primitive::u64,
                        weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 1)]
                    #[doc = "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                    suspend_xcm_execution,
                    #[codec(index = 2)]
                    #[doc = "Resumes all XCM executions for the XCMP queue."]
                    #[doc = ""]
                    #[doc = "Note that this function doesn't change the status of the in/out bound channels."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                    resume_xcm_execution,
                    #[codec(index = 3)]
                    #[doc = "Overwrites the number of pages of messages which must be in the queue for the other side to be told to"]
                    #[doc = "suspend their sending."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.suspend_value`"]
                    update_suspend_threshold { new: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "Overwrites the number of pages of messages which must be in the queue after which we drop any further"]
                    #[doc = "messages from the channel."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.drop_threshold`"]
                    update_drop_threshold { new: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "Overwrites the number of pages of messages which the queue must be reduced to before it signals that"]
                    #[doc = "message sending may recommence after it has been suspended."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.resume_threshold`"]
                    update_resume_threshold { new: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "Overwrites the amount of remaining weight under which we stop processing messages."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.threshold_weight`"]
                    update_threshold_weight {
                        new: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 7)]
                    #[doc = "Overwrites the speed to which the available weight approaches the maximum weight."]
                    #[doc = "A lower number results in a faster progression. A value of 1 makes the entire weight available initially."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.weight_restrict_decay`."]
                    update_weight_restrict_decay {
                        new: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 8)]
                    #[doc = "Overwrite the maximum amount of weight any individual message may consume."]
                    #[doc = "Messages above this weight go into the overweight queue and may only be serviced explicitly."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.xcmp_max_individual_weight`."]
                    update_xcmp_max_individual_weight {
                        new: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Failed to send XCM message."]
                    FailedToSend,
                    #[codec(index = 1)]
                    #[doc = "Bad XCM origin."]
                    BadXcmOrigin,
                    #[codec(index = 2)]
                    #[doc = "Bad XCM data."]
                    BadXcm,
                    #[codec(index = 3)]
                    #[doc = "Bad overweight index."]
                    BadOverweightIndex,
                    #[codec(index = 4)]
                    #[doc = "Provided weight is possibly not enough to execute the message."]
                    WeightOverLimit,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Some XCM was executed ok."]
                    Success {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 1)]
                    #[doc = "Some XCM failed."]
                    Fail {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                        error: runtime_types::xcm::v3::traits::Error,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    #[doc = "Bad XCM version used."]
                    BadVersion {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Bad XCM format used."]
                    BadFormat {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 4)]
                    #[doc = "An HRMP message was sent to a sibling parachain."]
                    XcmpMessageSent {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 5)]
                    #[doc = "An XCM exceeded the individual message weight budget."]
                    OverweightEnqueued {
                        sender: runtime_types::polkadot_parachain::primitives::Id,
                        sent_at: ::core::primitive::u32,
                        index: ::core::primitive::u64,
                        required: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 6)]
                    #[doc = "An XCM from the overweight queue was executed with the given actual weight used."]
                    OverweightServiced {
                        index: ::core::primitive::u64,
                        used: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InboundChannelDetails {
                pub sender: runtime_types::polkadot_parachain::primitives::Id,
                pub state: runtime_types::cumulus_pallet_xcmp_queue::InboundState,
                pub message_metadata: ::std::vec::Vec<(
                    ::core::primitive::u32,
                    runtime_types::polkadot_parachain::primitives::XcmpMessageFormat,
                )>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum InboundState {
                #[codec(index = 0)]
                Ok,
                #[codec(index = 1)]
                Suspended,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OutboundChannelDetails {
                pub recipient: runtime_types::polkadot_parachain::primitives::Id,
                pub state: runtime_types::cumulus_pallet_xcmp_queue::OutboundState,
                pub signals_exist: ::core::primitive::bool,
                pub first_index: ::core::primitive::u16,
                pub last_index: ::core::primitive::u16,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum OutboundState {
                #[codec(index = 0)]
                Ok,
                #[codec(index = 1)]
                Suspended,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct QueueConfigData {
                pub suspend_threshold: ::core::primitive::u32,
                pub drop_threshold: ::core::primitive::u32,
                pub resume_threshold: ::core::primitive::u32,
                pub threshold_weight: runtime_types::sp_weights::weight_v2::Weight,
                pub weight_restrict_decay: runtime_types::sp_weights::weight_v2::Weight,
                pub xcmp_max_individual_weight: runtime_types::sp_weights::weight_v2::Weight,
            }
        }
        pub mod cumulus_primitives_parachain_inherent {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MessageQueueChain(pub ::subxt::utils::H256);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ParachainInherentData {
                pub validation_data:
                    runtime_types::polkadot_primitives::v4::PersistedValidationData<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                pub relay_chain_state: runtime_types::sp_trie::storage_proof::StorageProof,
                pub downward_messages: ::std::vec::Vec<
                    runtime_types::polkadot_core_primitives::InboundDownwardMessage<
                        ::core::primitive::u32,
                    >,
                >,
                pub horizontal_messages: ::subxt::utils::KeyedVec<
                    runtime_types::polkadot_parachain::primitives::Id,
                    ::std::vec::Vec<
                        runtime_types::polkadot_core_primitives::InboundHrmpMessage<
                            ::core::primitive::u32,
                        >,
                    >,
                >,
            }
        }
        pub mod ethbloom {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Bloom(pub [::core::primitive::u8; 256usize]);
        }
        pub mod ethereum {
            use super::runtime_types;
            pub mod block {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Block<_0> {
                    pub header: runtime_types::ethereum::header::Header,
                    pub transactions: ::std::vec::Vec<_0>,
                    pub ommers: ::std::vec::Vec<runtime_types::ethereum::header::Header>,
                }
            }
            pub mod header {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Header {
                    pub parent_hash: ::subxt::utils::H256,
                    pub ommers_hash: ::subxt::utils::H256,
                    pub beneficiary: ::subxt::utils::H160,
                    pub state_root: ::subxt::utils::H256,
                    pub transactions_root: ::subxt::utils::H256,
                    pub receipts_root: ::subxt::utils::H256,
                    pub logs_bloom: runtime_types::ethbloom::Bloom,
                    pub difficulty: runtime_types::primitive_types::U256,
                    pub number: runtime_types::primitive_types::U256,
                    pub gas_limit: runtime_types::primitive_types::U256,
                    pub gas_used: runtime_types::primitive_types::U256,
                    pub timestamp: ::core::primitive::u64,
                    pub extra_data: ::std::vec::Vec<::core::primitive::u8>,
                    pub mix_hash: ::subxt::utils::H256,
                    pub nonce: runtime_types::ethereum_types::hash::H64,
                }
            }
            pub mod log {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Log {
                    pub address: ::subxt::utils::H160,
                    pub topics: ::std::vec::Vec<::subxt::utils::H256>,
                    pub data: ::std::vec::Vec<::core::primitive::u8>,
                }
            }
            pub mod receipt {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EIP658ReceiptData {
                    pub status_code: ::core::primitive::u8,
                    pub used_gas: runtime_types::primitive_types::U256,
                    pub logs_bloom: runtime_types::ethbloom::Bloom,
                    pub logs: ::std::vec::Vec<runtime_types::ethereum::log::Log>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ReceiptV3 {
                    #[codec(index = 0)]
                    Legacy(runtime_types::ethereum::receipt::EIP658ReceiptData),
                    #[codec(index = 1)]
                    EIP2930(runtime_types::ethereum::receipt::EIP658ReceiptData),
                    #[codec(index = 2)]
                    EIP1559(runtime_types::ethereum::receipt::EIP658ReceiptData),
                }
            }
            pub mod transaction {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AccessListItem {
                    pub address: ::subxt::utils::H160,
                    pub storage_keys: ::std::vec::Vec<::subxt::utils::H256>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EIP1559Transaction {
                    pub chain_id: ::core::primitive::u64,
                    pub nonce: runtime_types::primitive_types::U256,
                    pub max_priority_fee_per_gas: runtime_types::primitive_types::U256,
                    pub max_fee_per_gas: runtime_types::primitive_types::U256,
                    pub gas_limit: runtime_types::primitive_types::U256,
                    pub action: runtime_types::ethereum::transaction::TransactionAction,
                    pub value: runtime_types::primitive_types::U256,
                    pub input: ::std::vec::Vec<::core::primitive::u8>,
                    pub access_list:
                        ::std::vec::Vec<runtime_types::ethereum::transaction::AccessListItem>,
                    pub odd_y_parity: ::core::primitive::bool,
                    pub r: ::subxt::utils::H256,
                    pub s: ::subxt::utils::H256,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EIP2930Transaction {
                    pub chain_id: ::core::primitive::u64,
                    pub nonce: runtime_types::primitive_types::U256,
                    pub gas_price: runtime_types::primitive_types::U256,
                    pub gas_limit: runtime_types::primitive_types::U256,
                    pub action: runtime_types::ethereum::transaction::TransactionAction,
                    pub value: runtime_types::primitive_types::U256,
                    pub input: ::std::vec::Vec<::core::primitive::u8>,
                    pub access_list:
                        ::std::vec::Vec<runtime_types::ethereum::transaction::AccessListItem>,
                    pub odd_y_parity: ::core::primitive::bool,
                    pub r: ::subxt::utils::H256,
                    pub s: ::subxt::utils::H256,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct LegacyTransaction {
                    pub nonce: runtime_types::primitive_types::U256,
                    pub gas_price: runtime_types::primitive_types::U256,
                    pub gas_limit: runtime_types::primitive_types::U256,
                    pub action: runtime_types::ethereum::transaction::TransactionAction,
                    pub value: runtime_types::primitive_types::U256,
                    pub input: ::std::vec::Vec<::core::primitive::u8>,
                    pub signature: runtime_types::ethereum::transaction::TransactionSignature,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum TransactionAction {
                    #[codec(index = 0)]
                    Call(::subxt::utils::H160),
                    #[codec(index = 1)]
                    Create,
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransactionRecoveryId(pub ::core::primitive::u64);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransactionSignature {
                    pub v: runtime_types::ethereum::transaction::TransactionRecoveryId,
                    pub r: ::subxt::utils::H256,
                    pub s: ::subxt::utils::H256,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum TransactionV2 {
                    #[codec(index = 0)]
                    Legacy(runtime_types::ethereum::transaction::LegacyTransaction),
                    #[codec(index = 1)]
                    EIP2930(runtime_types::ethereum::transaction::EIP2930Transaction),
                    #[codec(index = 2)]
                    EIP1559(runtime_types::ethereum::transaction::EIP1559Transaction),
                }
            }
        }
        pub mod ethereum_types {
            use super::runtime_types;
            pub mod hash {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct H64(pub [::core::primitive::u8; 8usize]);
            }
        }
        pub mod evm_core {
            use super::runtime_types;
            pub mod error {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ExitError {
                    #[codec(index = 0)]
                    StackUnderflow,
                    #[codec(index = 1)]
                    StackOverflow,
                    #[codec(index = 2)]
                    InvalidJump,
                    #[codec(index = 3)]
                    InvalidRange,
                    #[codec(index = 4)]
                    DesignatedInvalid,
                    #[codec(index = 5)]
                    CallTooDeep,
                    #[codec(index = 6)]
                    CreateCollision,
                    #[codec(index = 7)]
                    CreateContractLimit,
                    #[codec(index = 15)]
                    InvalidCode(runtime_types::evm_core::opcode::Opcode),
                    #[codec(index = 8)]
                    OutOfOffset,
                    #[codec(index = 9)]
                    OutOfGas,
                    #[codec(index = 10)]
                    OutOfFund,
                    #[codec(index = 11)]
                    PCUnderflow,
                    #[codec(index = 12)]
                    CreateEmpty,
                    #[codec(index = 13)]
                    Other(::std::string::String),
                    #[codec(index = 14)]
                    MaxNonce,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ExitFatal {
                    #[codec(index = 0)]
                    NotSupported,
                    #[codec(index = 1)]
                    UnhandledInterrupt,
                    #[codec(index = 2)]
                    CallErrorAsFatal(runtime_types::evm_core::error::ExitError),
                    #[codec(index = 3)]
                    Other(::std::string::String),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ExitReason {
                    #[codec(index = 0)]
                    Succeed(runtime_types::evm_core::error::ExitSucceed),
                    #[codec(index = 1)]
                    Error(runtime_types::evm_core::error::ExitError),
                    #[codec(index = 2)]
                    Revert(runtime_types::evm_core::error::ExitRevert),
                    #[codec(index = 3)]
                    Fatal(runtime_types::evm_core::error::ExitFatal),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ExitRevert {
                    #[codec(index = 0)]
                    Reverted,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ExitSucceed {
                    #[codec(index = 0)]
                    Stopped,
                    #[codec(index = 1)]
                    Returned,
                    #[codec(index = 2)]
                    Suicided,
                }
            }
            pub mod opcode {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Opcode(pub ::core::primitive::u8);
            }
        }
        pub mod fp_rpc {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TransactionStatus {
                pub transaction_hash: ::subxt::utils::H256,
                pub transaction_index: ::core::primitive::u32,
                pub from: ::subxt::utils::H160,
                pub to: ::core::option::Option<::subxt::utils::H160>,
                pub contract_address: ::core::option::Option<::subxt::utils::H160>,
                pub logs: ::std::vec::Vec<runtime_types::ethereum::log::Log>,
                pub logs_bloom: runtime_types::ethbloom::Bloom,
            }
        }
        pub mod fp_self_contained {
            use super::runtime_types;
            pub mod unchecked_extrinsic {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UncheckedExtrinsic<_0, _1, _2, _3>(
                    pub ::subxt::utils::UncheckedExtrinsic<_0, _1, _2, _3>,
                );
            }
        }
        pub mod frame_support {
            use super::runtime_types;
            pub mod dispatch {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum DispatchClass {
                    #[codec(index = 0)]
                    Normal,
                    #[codec(index = 1)]
                    Operational,
                    #[codec(index = 2)]
                    Mandatory,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DispatchInfo {
                    pub weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub class: runtime_types::frame_support::dispatch::DispatchClass,
                    pub pays_fee: runtime_types::frame_support::dispatch::Pays,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Pays {
                    #[codec(index = 0)]
                    Yes,
                    #[codec(index = 1)]
                    No,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PerDispatchClass<_0> {
                    pub normal: _0,
                    pub operational: _0,
                    pub mandatory: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PostDispatchInfo {
                    pub actual_weight:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub pays_fee: runtime_types::frame_support::dispatch::Pays,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum RawOrigin<_0> {
                    #[codec(index = 0)]
                    Root,
                    #[codec(index = 1)]
                    Signed(_0),
                    #[codec(index = 2)]
                    None,
                }
            }
            pub mod traits {
                use super::runtime_types;
                pub mod preimages {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Bounded<_0> {
                        #[codec(index = 0)]
                        Legacy {
                            hash: ::subxt::utils::H256,
                        },
                        #[codec(index = 1)]
                        Inline(
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        ),
                        #[codec(index = 2)]
                        Lookup {
                            hash: ::subxt::utils::H256,
                            len: ::core::primitive::u32,
                        },
                        __Ignore(::core::marker::PhantomData<_0>),
                    }
                }
                pub mod schedule {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum DispatchTime<_0> {
                        #[codec(index = 0)]
                        At(_0),
                        #[codec(index = 1)]
                        After(_0),
                    }
                }
                pub mod tokens {
                    use super::runtime_types;
                    pub mod misc {
                        use super::runtime_types;
                        #[derive(
                            :: subxt :: ext :: codec :: Decode,
                            :: subxt :: ext :: codec :: Encode,
                            :: subxt :: ext :: scale_decode :: DecodeAsType,
                            :: subxt :: ext :: scale_encode :: EncodeAsType,
                            Debug,
                        )]
                        # [codec (crate = :: subxt :: ext :: codec)]
                        #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                        #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                        pub enum BalanceStatus {
                            #[codec(index = 0)]
                            Free,
                            #[codec(index = 1)]
                            Reserved,
                        }
                    }
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PalletId(pub [::core::primitive::u8; 8usize]);
        }
        pub mod frame_system {
            use super::runtime_types;
            pub mod extensions {
                use super::runtime_types;
                pub mod check_genesis {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckGenesis;
                }
                pub mod check_mortality {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
                }
                pub mod check_non_zero_sender {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckNonZeroSender;
                }
                pub mod check_nonce {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
                }
                pub mod check_spec_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckSpecVersion;
                }
                pub mod check_tx_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckTxVersion;
                }
                pub mod check_weight {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckWeight;
                }
            }
            pub mod limits {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlockLength {
                    pub max: runtime_types::frame_support::dispatch::PerDispatchClass<
                        ::core::primitive::u32,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlockWeights {
                    pub base_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub per_class: runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::frame_system::limits::WeightsPerClass,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WeightsPerClass {
                    pub base_extrinsic: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_extrinsic:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub max_total:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub reserved:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Make some on-chain remark."]
                    #[doc = ""]
                    #[doc = "- `O(1)`"]
                    remark {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                    set_heap_pages { pages: ::core::primitive::u64 },
                    #[codec(index = 2)]
                    #[doc = "Set the new runtime code."]
                    set_code {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                    set_code_without_checks {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Set some items of storage."]
                    set_storage {
                        items: ::std::vec::Vec<(
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Kill some items from storage."]
                    kill_storage {
                        keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Kill all storage items with a key that starts with the given prefix."]
                    #[doc = ""]
                    #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                    #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                    kill_prefix {
                        prefix: ::std::vec::Vec<::core::primitive::u8>,
                        subkeys: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Make some on-chain remark and emit event."]
                    remark_with_event {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Error for the System pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The name of specification does not match between the current runtime"]
                    #[doc = "and the new runtime."]
                    InvalidSpecName,
                    #[codec(index = 1)]
                    #[doc = "The specification version is not allowed to decrease between the current runtime"]
                    #[doc = "and the new runtime."]
                    SpecVersionNeedsToIncrease,
                    #[codec(index = 2)]
                    #[doc = "Failed to extract the runtime version from the new runtime."]
                    #[doc = ""]
                    #[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
                    FailedToExtractRuntimeVersion,
                    #[codec(index = 3)]
                    #[doc = "Suicide called when the account has non-default composite data."]
                    NonDefaultComposite,
                    #[codec(index = 4)]
                    #[doc = "There is a non-zero reference count preventing the account from being purged."]
                    NonZeroRefCount,
                    #[codec(index = 5)]
                    #[doc = "The origin filter prevent the call to be dispatched."]
                    CallFiltered,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Event for the System pallet."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An extrinsic completed successfully."]
                    ExtrinsicSuccess {
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 1)]
                    #[doc = "An extrinsic failed."]
                    ExtrinsicFailed {
                        dispatch_error: runtime_types::sp_runtime::DispatchError,
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 2)]
                    #[doc = "`:code` was updated."]
                    CodeUpdated,
                    #[codec(index = 3)]
                    #[doc = "A new account was created."]
                    NewAccount {
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 4)]
                    #[doc = "An account was reaped."]
                    KilledAccount {
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 5)]
                    #[doc = "On on-chain remark happened."]
                    Remarked {
                        sender: runtime_types::account::AccountId20,
                        hash: ::subxt::utils::H256,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AccountInfo<_0, _1> {
                pub nonce: _0,
                pub consumers: ::core::primitive::u32,
                pub providers: ::core::primitive::u32,
                pub sufficients: ::core::primitive::u32,
                pub data: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EventRecord<_0, _1> {
                pub phase: runtime_types::frame_system::Phase,
                pub event: _0,
                pub topics: ::std::vec::Vec<_1>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LastRuntimeUpgradeInfo {
                #[codec(compact)]
                pub spec_version: ::core::primitive::u32,
                pub spec_name: ::std::string::String,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Phase {
                #[codec(index = 0)]
                ApplyExtrinsic(::core::primitive::u32),
                #[codec(index = 1)]
                Finalization,
                #[codec(index = 2)]
                Initialization,
            }
        }
        pub mod moonbase_runtime {
            use super::runtime_types;
            pub mod asset_config {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssetRegistrarMetadata {
                    pub name: ::std::vec::Vec<::core::primitive::u8>,
                    pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                    pub decimals: ::core::primitive::u8,
                    pub is_frozen: ::core::primitive::bool,
                }
            }
            pub mod governance {
                use super::runtime_types;
                pub mod origins {
                    use super::runtime_types;
                    pub mod custom_origins {
                        use super::runtime_types;
                        #[derive(
                            :: subxt :: ext :: codec :: Decode,
                            :: subxt :: ext :: codec :: Encode,
                            :: subxt :: ext :: scale_decode :: DecodeAsType,
                            :: subxt :: ext :: scale_encode :: EncodeAsType,
                            Debug,
                        )]
                        # [codec (crate = :: subxt :: ext :: codec)]
                        #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                        #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                        pub enum Origin {
                            #[codec(index = 0)]
                            WhitelistedCaller,
                            #[codec(index = 1)]
                            GeneralAdmin,
                            #[codec(index = 2)]
                            ReferendumCanceller,
                            #[codec(index = 3)]
                            ReferendumKiller,
                        }
                    }
                }
            }
            pub mod xcm_config {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AssetType {
                    #[codec(index = 0)]
                    Xcm(runtime_types::xcm::v3::multilocation::MultiLocation),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum CurrencyId {
                    #[codec(index = 0)]
                    SelfReserve,
                    #[codec(index = 1)]
                    ForeignAsset(::core::primitive::u128),
                    #[codec(index = 2)]
                    LocalAssetReserve(::core::primitive::u128),
                    #[codec(index = 3)]
                    Erc20 {
                        contract_address: ::subxt::utils::H160,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Transactors {
                    #[codec(index = 0)]
                    Relay,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum OriginCaller {
                #[codec(index = 0)]
                system(
                    runtime_types::frame_support::dispatch::RawOrigin<
                        runtime_types::account::AccountId20,
                    >,
                ),
                #[codec(index = 11)]
                Ethereum(runtime_types::pallet_ethereum::RawOrigin),
                #[codec(index = 15)]
                CouncilCollective(
                    runtime_types::pallet_collective::RawOrigin<
                        runtime_types::account::AccountId20,
                    >,
                ),
                #[codec(index = 16)]
                TechCommitteeCollective(
                    runtime_types::pallet_collective::RawOrigin<
                        runtime_types::account::AccountId20,
                    >,
                ),
                #[codec(index = 26)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Origin),
                #[codec(index = 28)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Origin),
                #[codec(index = 38)]
                EthereumXcm(runtime_types::pallet_ethereum_xcm::RawOrigin),
                #[codec(index = 40)]
                TreasuryCouncilCollective(
                    runtime_types::pallet_collective::RawOrigin<
                        runtime_types::account::AccountId20,
                    >,
                ),
                #[codec(index = 43)]
                Origins(
                    runtime_types::moonbase_runtime::governance::origins::custom_origins::Origin,
                ),
                #[codec(index = 46)]
                OpenTechCommitteeCollective(
                    runtime_types::pallet_collective::RawOrigin<
                        runtime_types::account::AccountId20,
                    >,
                ),
                #[codec(index = 10)]
                Void(runtime_types::sp_core::Void),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ProxyType {
                #[codec(index = 0)]
                Any,
                #[codec(index = 1)]
                NonTransfer,
                #[codec(index = 2)]
                Governance,
                #[codec(index = 3)]
                Staking,
                #[codec(index = 4)]
                CancelProxy,
                #[codec(index = 5)]
                Balances,
                #[codec(index = 6)]
                AuthorMapping,
                #[codec(index = 7)]
                IdentityJudgement,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Runtime;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeCall {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Call),
                #[codec(index = 1)]
                Utility(runtime_types::pallet_utility::pallet::Call),
                #[codec(index = 2)]
                Timestamp(runtime_types::pallet_timestamp::pallet::Call),
                #[codec(index = 3)]
                Balances(runtime_types::pallet_balances::pallet::Call),
                #[codec(index = 4)]
                Sudo(runtime_types::pallet_sudo::pallet::Call),
                #[codec(index = 6)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Call),
                #[codec(index = 10)]
                EVM(runtime_types::pallet_evm::pallet::Call),
                #[codec(index = 11)]
                Ethereum(runtime_types::pallet_ethereum::pallet::Call),
                #[codec(index = 12)]
                ParachainStaking(runtime_types::pallet_parachain_staking::pallet::Call),
                #[codec(index = 13)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Call),
                #[codec(index = 14)]
                Democracy(runtime_types::pallet_democracy::pallet::Call),
                #[codec(index = 15)]
                CouncilCollective(runtime_types::pallet_collective::pallet::Call),
                #[codec(index = 16)]
                TechCommitteeCollective(runtime_types::pallet_collective::pallet::Call2),
                #[codec(index = 17)]
                Treasury(runtime_types::pallet_treasury::pallet::Call),
                #[codec(index = 18)]
                AuthorInherent(runtime_types::pallet_author_inherent::pallet::Call),
                #[codec(index = 19)]
                AuthorFilter(runtime_types::pallet_author_slot_filter::pallet::Call),
                #[codec(index = 20)]
                CrowdloanRewards(runtime_types::pallet_crowdloan_rewards::pallet::Call),
                #[codec(index = 21)]
                AuthorMapping(runtime_types::pallet_author_mapping::pallet::Call),
                #[codec(index = 22)]
                Proxy(runtime_types::pallet_proxy::pallet::Call),
                #[codec(index = 23)]
                MaintenanceMode(runtime_types::pallet_maintenance_mode::pallet::Call),
                #[codec(index = 24)]
                Identity(runtime_types::pallet_identity::pallet::Call),
                #[codec(index = 25)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Call),
                #[codec(index = 27)]
                DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Call),
                #[codec(index = 28)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Call),
                #[codec(index = 29)]
                Assets(runtime_types::pallet_assets::pallet::Call),
                #[codec(index = 30)]
                XTokens(runtime_types::orml_xtokens::module::Call),
                #[codec(index = 31)]
                AssetManager(runtime_types::pallet_asset_manager::pallet::Call),
                #[codec(index = 33)]
                XcmTransactor(runtime_types::pallet_xcm_transactor::pallet::Call),
                #[codec(index = 36)]
                LocalAssets(runtime_types::pallet_assets::pallet::Call2),
                #[codec(index = 37)]
                MoonbeamOrbiters(runtime_types::pallet_moonbeam_orbiters::pallet::Call),
                #[codec(index = 38)]
                EthereumXcm(runtime_types::pallet_ethereum_xcm::pallet::Call),
                #[codec(index = 39)]
                Randomness(runtime_types::pallet_randomness::pallet::Call),
                #[codec(index = 40)]
                TreasuryCouncilCollective(runtime_types::pallet_collective::pallet::Call3),
                #[codec(index = 41)]
                ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Call),
                #[codec(index = 42)]
                Referenda(runtime_types::pallet_referenda::pallet::Call),
                #[codec(index = 44)]
                Preimage(runtime_types::pallet_preimage::pallet::Call),
                #[codec(index = 45)]
                Whitelist(runtime_types::pallet_whitelist::pallet::Call),
                #[codec(index = 46)]
                OpenTechCommitteeCollective(runtime_types::pallet_collective::pallet::Call4),
                #[codec(index = 47)]
                RootTesting(runtime_types::pallet_root_testing::pallet::Call),
                #[codec(index = 49)]
                Multisig(runtime_types::pallet_multisig::pallet::Call),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeError {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Error),
                #[codec(index = 1)]
                Utility(runtime_types::pallet_utility::pallet::Error),
                #[codec(index = 3)]
                Balances(runtime_types::pallet_balances::pallet::Error),
                #[codec(index = 4)]
                Sudo(runtime_types::pallet_sudo::pallet::Error),
                #[codec(index = 6)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Error),
                #[codec(index = 10)]
                EVM(runtime_types::pallet_evm::pallet::Error),
                #[codec(index = 11)]
                Ethereum(runtime_types::pallet_ethereum::pallet::Error),
                #[codec(index = 12)]
                ParachainStaking(runtime_types::pallet_parachain_staking::pallet::Error),
                #[codec(index = 13)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Error),
                #[codec(index = 14)]
                Democracy(runtime_types::pallet_democracy::pallet::Error),
                #[codec(index = 15)]
                CouncilCollective(runtime_types::pallet_collective::pallet::Error),
                #[codec(index = 16)]
                TechCommitteeCollective(runtime_types::pallet_collective::pallet::Error2),
                #[codec(index = 17)]
                Treasury(runtime_types::pallet_treasury::pallet::Error),
                #[codec(index = 18)]
                AuthorInherent(runtime_types::pallet_author_inherent::pallet::Error),
                #[codec(index = 20)]
                CrowdloanRewards(runtime_types::pallet_crowdloan_rewards::pallet::Error),
                #[codec(index = 21)]
                AuthorMapping(runtime_types::pallet_author_mapping::pallet::Error),
                #[codec(index = 22)]
                Proxy(runtime_types::pallet_proxy::pallet::Error),
                #[codec(index = 23)]
                MaintenanceMode(runtime_types::pallet_maintenance_mode::pallet::Error),
                #[codec(index = 24)]
                Identity(runtime_types::pallet_identity::pallet::Error),
                #[codec(index = 25)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Error),
                #[codec(index = 26)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Error),
                #[codec(index = 27)]
                DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Error),
                #[codec(index = 28)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Error),
                #[codec(index = 29)]
                Assets(runtime_types::pallet_assets::pallet::Error),
                #[codec(index = 30)]
                XTokens(runtime_types::orml_xtokens::module::Error),
                #[codec(index = 31)]
                AssetManager(runtime_types::pallet_asset_manager::pallet::Error),
                #[codec(index = 32)]
                Migrations(runtime_types::pallet_migrations::pallet::Error),
                #[codec(index = 33)]
                XcmTransactor(runtime_types::pallet_xcm_transactor::pallet::Error),
                #[codec(index = 36)]
                LocalAssets(runtime_types::pallet_assets::pallet::Error2),
                #[codec(index = 37)]
                MoonbeamOrbiters(runtime_types::pallet_moonbeam_orbiters::pallet::Error),
                #[codec(index = 38)]
                EthereumXcm(runtime_types::pallet_ethereum_xcm::pallet::Error),
                #[codec(index = 39)]
                Randomness(runtime_types::pallet_randomness::pallet::Error),
                #[codec(index = 40)]
                TreasuryCouncilCollective(runtime_types::pallet_collective::pallet::Error3),
                #[codec(index = 41)]
                ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Error),
                #[codec(index = 42)]
                Referenda(runtime_types::pallet_referenda::pallet::Error),
                #[codec(index = 44)]
                Preimage(runtime_types::pallet_preimage::pallet::Error),
                #[codec(index = 45)]
                Whitelist(runtime_types::pallet_whitelist::pallet::Error),
                #[codec(index = 46)]
                OpenTechCommitteeCollective(runtime_types::pallet_collective::pallet::Error4),
                #[codec(index = 49)]
                Multisig(runtime_types::pallet_multisig::pallet::Error),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeEvent {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Event),
                #[codec(index = 1)]
                Utility(runtime_types::pallet_utility::pallet::Event),
                #[codec(index = 3)]
                Balances(runtime_types::pallet_balances::pallet::Event),
                #[codec(index = 4)]
                Sudo(runtime_types::pallet_sudo::pallet::Event),
                #[codec(index = 6)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Event),
                #[codec(index = 7)]
                TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
                #[codec(index = 10)]
                EVM(runtime_types::pallet_evm::pallet::Event),
                #[codec(index = 11)]
                Ethereum(runtime_types::pallet_ethereum::pallet::Event),
                #[codec(index = 12)]
                ParachainStaking(runtime_types::pallet_parachain_staking::pallet::Event),
                #[codec(index = 13)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Event),
                #[codec(index = 14)]
                Democracy(runtime_types::pallet_democracy::pallet::Event),
                #[codec(index = 15)]
                CouncilCollective(runtime_types::pallet_collective::pallet::Event),
                #[codec(index = 16)]
                TechCommitteeCollective(runtime_types::pallet_collective::pallet::Event2),
                #[codec(index = 17)]
                Treasury(runtime_types::pallet_treasury::pallet::Event),
                #[codec(index = 19)]
                AuthorFilter(runtime_types::pallet_author_slot_filter::pallet::Event),
                #[codec(index = 20)]
                CrowdloanRewards(runtime_types::pallet_crowdloan_rewards::pallet::Event),
                #[codec(index = 21)]
                AuthorMapping(runtime_types::pallet_author_mapping::pallet::Event),
                #[codec(index = 22)]
                Proxy(runtime_types::pallet_proxy::pallet::Event),
                #[codec(index = 23)]
                MaintenanceMode(runtime_types::pallet_maintenance_mode::pallet::Event),
                #[codec(index = 24)]
                Identity(runtime_types::pallet_identity::pallet::Event),
                #[codec(index = 25)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Event),
                #[codec(index = 26)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Event),
                #[codec(index = 27)]
                DmpQueue(runtime_types::cumulus_pallet_dmp_queue::pallet::Event),
                #[codec(index = 28)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Event),
                #[codec(index = 29)]
                Assets(runtime_types::pallet_assets::pallet::Event),
                #[codec(index = 30)]
                XTokens(runtime_types::orml_xtokens::module::Event),
                #[codec(index = 31)]
                AssetManager(runtime_types::pallet_asset_manager::pallet::Event),
                #[codec(index = 32)]
                Migrations(runtime_types::pallet_migrations::pallet::Event),
                #[codec(index = 33)]
                XcmTransactor(runtime_types::pallet_xcm_transactor::pallet::Event),
                #[codec(index = 36)]
                LocalAssets(runtime_types::pallet_assets::pallet::Event2),
                #[codec(index = 37)]
                MoonbeamOrbiters(runtime_types::pallet_moonbeam_orbiters::pallet::Event),
                #[codec(index = 39)]
                Randomness(runtime_types::pallet_randomness::pallet::Event),
                #[codec(index = 40)]
                TreasuryCouncilCollective(runtime_types::pallet_collective::pallet::Event3),
                #[codec(index = 41)]
                ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Event),
                #[codec(index = 42)]
                Referenda(runtime_types::pallet_referenda::pallet::Event),
                #[codec(index = 44)]
                Preimage(runtime_types::pallet_preimage::pallet::Event),
                #[codec(index = 45)]
                Whitelist(runtime_types::pallet_whitelist::pallet::Event),
                #[codec(index = 46)]
                OpenTechCommitteeCollective(runtime_types::pallet_collective::pallet::Event4),
                #[codec(index = 49)]
                Multisig(runtime_types::pallet_multisig::pallet::Event),
            }
        }
        pub mod nimbus_primitives {
            use super::runtime_types;
            pub mod nimbus_crypto {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub runtime_types::sp_core::sr25519::Public);
            }
        }
        pub mod orml_xtokens {
            use super::runtime_types;
            pub mod module {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transfer native currencies."]
                    #[doc = ""]
                    #[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
                    #[doc = "chain, and it would be charged from the transferred assets. If set"]
                    #[doc = "below requirements, the execution may fail and assets wouldn't be"]
                    #[doc = "received."]
                    #[doc = ""]
                    #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                    #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                    #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                    #[doc = "by the network, and if the receiving chain would handle"]
                    #[doc = "messages correctly."]
                    transfer {
                        currency_id: runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                        amount: ::core::primitive::u128,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 1)]
                    #[doc = "Transfer `MultiAsset`."]
                    #[doc = ""]
                    #[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
                    #[doc = "chain, and it would be charged from the transferred assets. If set"]
                    #[doc = "below requirements, the execution may fail and assets wouldn't be"]
                    #[doc = "received."]
                    #[doc = ""]
                    #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                    #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                    #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                    #[doc = "by the network, and if the receiving chain would handle"]
                    #[doc = "messages correctly."]
                    transfer_multiasset {
                        asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer native currencies specifying the fee and amount as"]
                    #[doc = "separate."]
                    #[doc = ""]
                    #[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
                    #[doc = "chain, and it would be charged from the transferred assets. If set"]
                    #[doc = "below requirements, the execution may fail and assets wouldn't be"]
                    #[doc = "received."]
                    #[doc = ""]
                    #[doc = "`fee` is the amount to be spent to pay for execution in destination"]
                    #[doc = "chain. Both fee and amount will be subtracted form the callers"]
                    #[doc = "balance."]
                    #[doc = ""]
                    #[doc = "If `fee` is not high enough to cover for the execution costs in the"]
                    #[doc = "destination chain, then the assets will be trapped in the"]
                    #[doc = "destination chain"]
                    #[doc = ""]
                    #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                    #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                    #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                    #[doc = "by the network, and if the receiving chain would handle"]
                    #[doc = "messages correctly."]
                    transfer_with_fee {
                        currency_id: runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                        amount: ::core::primitive::u128,
                        fee: ::core::primitive::u128,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 3)]
                    #[doc = "Transfer `MultiAsset` specifying the fee and amount as separate."]
                    #[doc = ""]
                    #[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
                    #[doc = "chain, and it would be charged from the transferred assets. If set"]
                    #[doc = "below requirements, the execution may fail and assets wouldn't be"]
                    #[doc = "received."]
                    #[doc = ""]
                    #[doc = "`fee` is the multiasset to be spent to pay for execution in"]
                    #[doc = "destination chain. Both fee and amount will be subtracted form the"]
                    #[doc = "callers balance For now we only accept fee and asset having the same"]
                    #[doc = "`MultiLocation` id."]
                    #[doc = ""]
                    #[doc = "If `fee` is not high enough to cover for the execution costs in the"]
                    #[doc = "destination chain, then the assets will be trapped in the"]
                    #[doc = "destination chain"]
                    #[doc = ""]
                    #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                    #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                    #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                    #[doc = "by the network, and if the receiving chain would handle"]
                    #[doc = "messages correctly."]
                    transfer_multiasset_with_fee {
                        asset: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                        fee: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAsset>,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 4)]
                    #[doc = "Transfer several currencies specifying the item to be used as fee"]
                    #[doc = ""]
                    #[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
                    #[doc = "chain, and it would be charged from the transferred assets. If set"]
                    #[doc = "below requirements, the execution may fail and assets wouldn't be"]
                    #[doc = "received."]
                    #[doc = ""]
                    #[doc = "`fee_item` is index of the currencies tuple that we want to use for"]
                    #[doc = "payment"]
                    #[doc = ""]
                    #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                    #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                    #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                    #[doc = "by the network, and if the receiving chain would handle"]
                    #[doc = "messages correctly."]
                    transfer_multicurrencies {
                        currencies: ::std::vec::Vec<(
                            runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                            ::core::primitive::u128,
                        )>,
                        fee_item: ::core::primitive::u32,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 5)]
                    #[doc = "Transfer several `MultiAsset` specifying the item to be used as fee"]
                    #[doc = ""]
                    #[doc = "`dest_weight_limit` is the weight for XCM execution on the dest"]
                    #[doc = "chain, and it would be charged from the transferred assets. If set"]
                    #[doc = "below requirements, the execution may fail and assets wouldn't be"]
                    #[doc = "received."]
                    #[doc = ""]
                    #[doc = "`fee_item` is index of the MultiAssets that we want to use for"]
                    #[doc = "payment"]
                    #[doc = ""]
                    #[doc = "It's a no-op if any error on local XCM execution or message sending."]
                    #[doc = "Note sending assets out per se doesn't guarantee they would be"]
                    #[doc = "received. Receiving depends on if the XCM message could be delivered"]
                    #[doc = "by the network, and if the receiving chain would handle"]
                    #[doc = "messages correctly."]
                    transfer_multiassets {
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_item: ::core::primitive::u32,
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        dest_weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Asset has no reserve location."]
                    AssetHasNoReserve,
                    #[codec(index = 1)]
                    #[doc = "Not cross-chain transfer."]
                    NotCrossChainTransfer,
                    #[codec(index = 2)]
                    #[doc = "Invalid transfer destination."]
                    InvalidDest,
                    #[codec(index = 3)]
                    #[doc = "Currency is not cross-chain transferable."]
                    NotCrossChainTransferableCurrency,
                    #[codec(index = 4)]
                    #[doc = "The message's weight could not be determined."]
                    UnweighableMessage,
                    #[codec(index = 5)]
                    #[doc = "XCM execution failed."]
                    XcmExecutionFailed,
                    #[codec(index = 6)]
                    #[doc = "Could not re-anchor the assets to declare the fees for the"]
                    #[doc = "destination chain."]
                    CannotReanchor,
                    #[codec(index = 7)]
                    #[doc = "Could not get ancestry of asset reserve location."]
                    InvalidAncestry,
                    #[codec(index = 8)]
                    #[doc = "The MultiAsset is invalid."]
                    InvalidAsset,
                    #[codec(index = 9)]
                    #[doc = "The destination `MultiLocation` provided cannot be inverted."]
                    DestinationNotInvertible,
                    #[codec(index = 10)]
                    #[doc = "The version of the `Versioned` value used is not able to be"]
                    #[doc = "interpreted."]
                    BadVersion,
                    #[codec(index = 11)]
                    #[doc = "We tried sending distinct asset and fee but they have different"]
                    #[doc = "reserve chains."]
                    DistinctReserveForAssetAndFee,
                    #[codec(index = 12)]
                    #[doc = "The fee is zero."]
                    ZeroFee,
                    #[codec(index = 13)]
                    #[doc = "The transfering asset amount is zero."]
                    ZeroAmount,
                    #[codec(index = 14)]
                    #[doc = "The number of assets to be sent is over the maximum."]
                    TooManyAssetsBeingSent,
                    #[codec(index = 15)]
                    #[doc = "The specified index does not exist in a MultiAssets struct."]
                    AssetIndexNonExistent,
                    #[codec(index = 16)]
                    #[doc = "Fee is not enough."]
                    FeeNotEnough,
                    #[codec(index = 17)]
                    #[doc = "Not supported MultiLocation"]
                    NotSupportedMultiLocation,
                    #[codec(index = 18)]
                    #[doc = "MinXcmFee not registered for certain reserve location"]
                    MinXcmFeeNotDefined,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Transferred `MultiAsset` with fee."]
                    TransferredMultiAssets {
                        sender: runtime_types::account::AccountId20,
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        fee: runtime_types::xcm::v3::multiasset::MultiAsset,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                }
            }
        }
        pub mod pallet_asset_manager {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssetInfo {
                    pub creator: runtime_types::account::AccountId20,
                    pub deposit: ::core::primitive::u128,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Register new asset with the asset manager"]
                    register_foreign_asset {
                        asset: runtime_types::moonbase_runtime::xcm_config::AssetType,
                        metadata:
                            runtime_types::moonbase_runtime::asset_config::AssetRegistrarMetadata,
                        min_amount: ::core::primitive::u128,
                        is_sufficient: ::core::primitive::bool,
                    },
                    #[codec(index = 1)]
                    #[doc = "Change the amount of units we are charging per execution second"]
                    #[doc = "for a given ForeignAssetType"]
                    set_asset_units_per_second {
                        asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                        units_per_second: ::core::primitive::u128,
                        num_assets_weight_hint: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Change the xcm type mapping for a given assetId"]
                    #[doc = "We also change this if the previous units per second where pointing at the old"]
                    #[doc = "assetType"]
                    change_existing_asset_type {
                        asset_id: ::core::primitive::u128,
                        new_asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                        num_assets_weight_hint: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    remove_supported_asset {
                        asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                        num_assets_weight_hint: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "Remove a given assetId -> assetType association"]
                    remove_existing_asset_type {
                        asset_id: ::core::primitive::u128,
                        num_assets_weight_hint: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Register a new local asset"]
                    #[doc = "No information is stored in this pallet about the local asset"]
                    #[doc = "The reason is that we dont need to hold a mapping between the multilocation"]
                    #[doc = "and the local asset, as this conversion is deterministic"]
                    #[doc = "Further, we dont allow xcm fee payment in local assets"]
                    register_local_asset {
                        creator: runtime_types::account::AccountId20,
                        owner: runtime_types::account::AccountId20,
                        is_sufficient: ::core::primitive::bool,
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Destroy a given foreign assetId"]
                    #[doc = "The weight in this case is the one returned by the trait"]
                    #[doc = "plus the db writes and reads from removing all the associated"]
                    #[doc = "data"]
                    destroy_foreign_asset {
                        asset_id: ::core::primitive::u128,
                        num_assets_weight_hint: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Destroy a given local assetId"]
                    #[doc = "We do not store anything related to local assets in this pallet other than the counter"]
                    #[doc = "and the counter is not used for destroying the asset, so no additional db reads/writes"]
                    #[doc = "to be counter here"]
                    destroy_local_asset { asset_id: ::core::primitive::u128 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "An error that can occur while executing the mapping pallet's logic."]
                pub enum Error {
                    #[codec(index = 0)]
                    ErrorCreatingAsset,
                    #[codec(index = 1)]
                    AssetAlreadyExists,
                    #[codec(index = 2)]
                    AssetDoesNotExist,
                    #[codec(index = 3)]
                    TooLowNumAssetsWeightHint,
                    #[codec(index = 4)]
                    LocalAssetLimitReached,
                    #[codec(index = 5)]
                    ErrorDestroyingAsset,
                    #[codec(index = 6)]
                    NotSufficientDeposit,
                    #[codec(index = 7)]
                    NonExistentLocalAsset,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New asset with the asset manager is registered"]
                    ForeignAssetRegistered {
                        asset_id: ::core::primitive::u128,
                        asset: runtime_types::moonbase_runtime::xcm_config::AssetType,
                        metadata:
                            runtime_types::moonbase_runtime::asset_config::AssetRegistrarMetadata,
                    },
                    #[codec(index = 1)]
                    #[doc = "Changed the amount of units we are charging per execution second for a given asset"]
                    UnitsPerSecondChanged {
                        asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                        units_per_second: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Changed the xcm type mapping for a given asset id"]
                    ForeignAssetTypeChanged {
                        asset_id: ::core::primitive::u128,
                        new_asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                    },
                    #[codec(index = 3)]
                    #[doc = "Removed all information related to an assetId"]
                    ForeignAssetRemoved {
                        asset_id: ::core::primitive::u128,
                        asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                    },
                    #[codec(index = 4)]
                    #[doc = "Supported asset type for fee payment removed"]
                    SupportedAssetRemoved {
                        asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                    },
                    #[codec(index = 5)]
                    #[doc = "Local asset was created"]
                    LocalAssetRegistered {
                        asset_id: ::core::primitive::u128,
                        creator: runtime_types::account::AccountId20,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 6)]
                    #[doc = "Removed all information related to an assetId and destroyed asset"]
                    ForeignAssetDestroyed {
                        asset_id: ::core::primitive::u128,
                        asset_type: runtime_types::moonbase_runtime::xcm_config::AssetType,
                    },
                    #[codec(index = 7)]
                    #[doc = "Removed all information related to an assetId and destroyed asset"]
                    LocalAssetDestroyed { asset_id: ::core::primitive::u128 },
                }
            }
        }
        pub mod pallet_assets {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Issue a new class of fungible assets from a public origin."]
                    #[doc = ""]
                    #[doc = "This new asset class has no assets initially and its owner is the origin."]
                    #[doc = ""]
                    #[doc = "The origin must conform to the configured `CreateOrigin` and have sufficient funds free."]
                    #[doc = ""]
                    #[doc = "Funds of sender are reserved by `AssetDeposit`."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
                    #[doc = "an existing asset."]
                    #[doc = "- `admin`: The admin of this class of assets. The admin is the initial address of each"]
                    #[doc = "member of the asset class's admin team."]
                    #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                    #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                    #[doc = ""]
                    #[doc = "Emits `Created` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    create {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        admin: runtime_types::account::AccountId20,
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Issue a new class of fungible assets from a privileged origin."]
                    #[doc = ""]
                    #[doc = "This new asset class has no assets initially."]
                    #[doc = ""]
                    #[doc = "The origin must conform to `ForceOrigin`."]
                    #[doc = ""]
                    #[doc = "Unlike `create`, no funds are reserved."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
                    #[doc = "an existing asset."]
                    #[doc = "- `owner`: The owner of this class of assets. The owner has full superuser permissions"]
                    #[doc = "over this asset, but may later change and configure the permissions using"]
                    #[doc = "`transfer_ownership` and `set_team`."]
                    #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                    #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                    #[doc = ""]
                    #[doc = "Emits `ForceCreated` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_create {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        is_sufficient: ::core::primitive::bool,
                        #[codec(compact)]
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Start the process of destroying a fungible asset class."]
                    #[doc = ""]
                    #[doc = "`start_destroy` is the first in a series of extrinsics that should be called, to allow"]
                    #[doc = "destruction of an asset class."]
                    #[doc = ""]
                    #[doc = "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                    #[doc = "  asset."]
                    #[doc = ""]
                    #[doc = "The asset class must be frozen before calling `start_destroy`."]
                    start_destroy {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Destroy all accounts associated with a given asset."]
                    #[doc = ""]
                    #[doc = "`destroy_accounts` should only be called after `start_destroy` has been called, and the"]
                    #[doc = "asset is in a `Destroying` state."]
                    #[doc = ""]
                    #[doc = "Due to weight restrictions, this function may need to be called multiple times to fully"]
                    #[doc = "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                    #[doc = "  asset."]
                    #[doc = ""]
                    #[doc = "Each call emits the `Event::DestroyedAccounts` event."]
                    destroy_accounts {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit)."]
                    #[doc = ""]
                    #[doc = "`destroy_approvals` should only be called after `start_destroy` has been called, and the"]
                    #[doc = "asset is in a `Destroying` state."]
                    #[doc = ""]
                    #[doc = "Due to weight restrictions, this function may need to be called multiple times to fully"]
                    #[doc = "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                    #[doc = "  asset."]
                    #[doc = ""]
                    #[doc = "Each call emits the `Event::DestroyedApprovals` event."]
                    destroy_approvals {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Complete destroying asset and unreserve currency."]
                    #[doc = ""]
                    #[doc = "`finish_destroy` should only be called after `start_destroy` has been called, and the"]
                    #[doc = "asset is in a `Destroying` state. All accounts or approvals should be destroyed before"]
                    #[doc = "hand."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                    #[doc = "  asset."]
                    #[doc = ""]
                    #[doc = "Each successful call emits the `Event::Destroyed` event."]
                    finish_destroy {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Mint assets of a particular class."]
                    #[doc = ""]
                    #[doc = "The origin must be Signed and the sender must be the Issuer of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount minted."]
                    #[doc = "- `beneficiary`: The account to be credited with the minted assets."]
                    #[doc = "- `amount`: The amount of the asset to be minted."]
                    #[doc = ""]
                    #[doc = "Emits `Issued` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."]
                    mint {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        beneficiary: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Manager of the asset `id`."]
                    #[doc = ""]
                    #[doc = "Bails with `NoAccount` if the `who` is already dead."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount burned."]
                    #[doc = "- `who`: The account to be debited from."]
                    #[doc = "- `amount`: The maximum amount by which `who`'s balance should be reduced."]
                    #[doc = ""]
                    #[doc = "Emits `Burned` with the actual amount burned. If this takes the balance to below the"]
                    #[doc = "minimum for the asset, then the amount burned is increased to take it to zero."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."]
                    burn {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Move some assets from the sender account to another."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                    #[doc = "- `target`: The account to be credited."]
                    #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
                    #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
                    #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
                    #[doc = "the minimum balance. Must be greater than zero."]
                    #[doc = ""]
                    #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                    #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                    #[doc = "to zero."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
                    #[doc = "`target`."]
                    transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        target: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Move some assets from the sender account to another, keeping the sender account alive."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                    #[doc = "- `target`: The account to be credited."]
                    #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
                    #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
                    #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
                    #[doc = "the minimum balance. Must be greater than zero."]
                    #[doc = ""]
                    #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                    #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                    #[doc = "to zero."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
                    #[doc = "`target`."]
                    transfer_keep_alive {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        target: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "Move some assets from one account to another."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                    #[doc = "- `source`: The account to be debited."]
                    #[doc = "- `dest`: The account to be credited."]
                    #[doc = "- `amount`: The amount by which the `source`'s balance of assets should be reduced and"]
                    #[doc = "`dest`'s balance increased. The amount actually transferred may be slightly greater in"]
                    #[doc = "the case that the transfer would otherwise take the `source` balance above zero but"]
                    #[doc = "below the minimum balance. Must be greater than zero."]
                    #[doc = ""]
                    #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                    #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                    #[doc = "to zero."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of"]
                    #[doc = "`dest`."]
                    force_transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        source: runtime_types::account::AccountId20,
                        dest: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`"]
                    #[doc = "must already exist as an entry in `Account`s of the asset. If you want to freeze an"]
                    #[doc = "account that does not have an entry, use `touch_other` first."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be frozen."]
                    #[doc = "- `who`: The account to be frozen."]
                    #[doc = ""]
                    #[doc = "Emits `Frozen`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    freeze {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 12)]
                    #[doc = "Allow unprivileged transfers to and from an account again."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be frozen."]
                    #[doc = "- `who`: The account to be unfrozen."]
                    #[doc = ""]
                    #[doc = "Emits `Thawed`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    thaw {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 13)]
                    #[doc = "Disallow further unprivileged transfers for the asset class."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be frozen."]
                    #[doc = ""]
                    #[doc = "Emits `Frozen`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    freeze_asset {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 14)]
                    #[doc = "Allow unprivileged transfers for the asset again."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be thawed."]
                    #[doc = ""]
                    #[doc = "Emits `Thawed`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    thaw_asset {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 15)]
                    #[doc = "Change the Owner of an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `owner`: The new Owner of this asset."]
                    #[doc = ""]
                    #[doc = "Emits `OwnerChanged`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    transfer_ownership {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 16)]
                    #[doc = "Change the Issuer, Admin and Freezer of an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be frozen."]
                    #[doc = "- `issuer`: The new Issuer of this asset."]
                    #[doc = "- `admin`: The new Admin of this asset."]
                    #[doc = "- `freezer`: The new Freezer of this asset."]
                    #[doc = ""]
                    #[doc = "Emits `TeamChanged`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    set_team {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        issuer: runtime_types::account::AccountId20,
                        admin: runtime_types::account::AccountId20,
                        freezer: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 17)]
                    #[doc = "Set the metadata for an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                    #[doc = ""]
                    #[doc = "Funds of sender are reserved according to the formula:"]
                    #[doc = "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into"]
                    #[doc = "account any already reserved funds."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to update."]
                    #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
                    #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
                    #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
                    #[doc = ""]
                    #[doc = "Emits `MetadataSet`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    set_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                    },
                    #[codec(index = 18)]
                    #[doc = "Clear the metadata for an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                    #[doc = ""]
                    #[doc = "Any deposit is freed for the asset owner."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to clear."]
                    #[doc = ""]
                    #[doc = "Emits `MetadataCleared`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    clear_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 19)]
                    #[doc = "Force the metadata for an asset to some value."]
                    #[doc = ""]
                    #[doc = "Origin must be ForceOrigin."]
                    #[doc = ""]
                    #[doc = "Any deposit is left alone."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to update."]
                    #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
                    #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
                    #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
                    #[doc = ""]
                    #[doc = "Emits `MetadataSet`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."]
                    force_set_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 20)]
                    #[doc = "Clear the metadata for an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be ForceOrigin."]
                    #[doc = ""]
                    #[doc = "Any deposit is returned."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to clear."]
                    #[doc = ""]
                    #[doc = "Emits `MetadataCleared`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_clear_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 21)]
                    #[doc = "Alter the attributes of a given asset."]
                    #[doc = ""]
                    #[doc = "Origin must be `ForceOrigin`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `owner`: The new Owner of this asset."]
                    #[doc = "- `issuer`: The new Issuer of this asset."]
                    #[doc = "- `admin`: The new Admin of this asset."]
                    #[doc = "- `freezer`: The new Freezer of this asset."]
                    #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                    #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                    #[doc = "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient"]
                    #[doc = "value to account for the state bloat associated with its balance storage. If set to"]
                    #[doc = "`true`, then non-zero balances may be stored without a `consumer` reference (and thus"]
                    #[doc = "an ED in the Balances pallet or whatever else is used to control user-account state"]
                    #[doc = "growth)."]
                    #[doc = "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin"]
                    #[doc = "instructions."]
                    #[doc = ""]
                    #[doc = "Emits `AssetStatusChanged` with the identity of the asset."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_asset_status {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        issuer: runtime_types::account::AccountId20,
                        admin: runtime_types::account::AccountId20,
                        freezer: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        min_balance: ::core::primitive::u128,
                        is_sufficient: ::core::primitive::bool,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 22)]
                    #[doc = "Approve an amount of asset for transfer by a delegated third-party account."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed."]
                    #[doc = ""]
                    #[doc = "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account"]
                    #[doc = "for the purpose of holding the approval. If some non-zero amount of assets is already"]
                    #[doc = "approved from signing account to `delegate`, then it is topped up or unreserved to"]
                    #[doc = "meet the right value."]
                    #[doc = ""]
                    #[doc = "NOTE: The signing account does not need to own `amount` of assets at the point of"]
                    #[doc = "making this call."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `delegate`: The account to delegate permission to transfer asset."]
                    #[doc = "- `amount`: The amount of asset that may be transferred by `delegate`. If there is"]
                    #[doc = "already an approval in place, then this acts additively."]
                    #[doc = ""]
                    #[doc = "Emits `ApprovedTransfer` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    approve_transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        delegate: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 23)]
                    #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and there must be an approval in place between signer and"]
                    #[doc = "`delegate`."]
                    #[doc = ""]
                    #[doc = "Unreserves any deposit previously reserved by `approve_transfer` for the approval."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `delegate`: The account delegated permission to transfer asset."]
                    #[doc = ""]
                    #[doc = "Emits `ApprovalCancelled` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    cancel_approval {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        delegate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 24)]
                    #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
                    #[doc = ""]
                    #[doc = "Origin must be either ForceOrigin or Signed origin with the signer being the Admin"]
                    #[doc = "account of the asset `id`."]
                    #[doc = ""]
                    #[doc = "Unreserves any deposit previously reserved by `approve_transfer` for the approval."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `delegate`: The account delegated permission to transfer asset."]
                    #[doc = ""]
                    #[doc = "Emits `ApprovalCancelled` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_cancel_approval {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 25)]
                    #[doc = "Transfer some asset balance from a previously delegated account to some third-party"]
                    #[doc = "account."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and there must be an approval in place by the `owner` to the"]
                    #[doc = "signer."]
                    #[doc = ""]
                    #[doc = "If the entire amount approved for transfer is transferred, then any deposit previously"]
                    #[doc = "reserved by `approve_transfer` is unreserved."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `owner`: The account which previously approved for a transfer of at least `amount` and"]
                    #[doc = "from which the asset balance will be withdrawn."]
                    #[doc = "- `destination`: The account to which the asset balance of `amount` will be transferred."]
                    #[doc = "- `amount`: The amount of assets to transfer."]
                    #[doc = ""]
                    #[doc = "Emits `TransferredApproved` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    transfer_approved {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        destination: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 26)]
                    #[doc = "Create an asset account for non-provider assets."]
                    #[doc = ""]
                    #[doc = "A deposit will be taken from the signer account."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit"]
                    #[doc = "  to be taken."]
                    #[doc = "- `id`: The identifier of the asset for the account to be created."]
                    #[doc = ""]
                    #[doc = "Emits `Touched` event when successful."]
                    touch {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 27)]
                    #[doc = "Return the deposit (if any) of an asset account or a consumer reference (if any) of an"]
                    #[doc = "account."]
                    #[doc = ""]
                    #[doc = "The origin must be Signed."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset for which the caller would like the deposit"]
                    #[doc = "  refunded."]
                    #[doc = "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund."]
                    #[doc = ""]
                    #[doc = "Emits `Refunded` event when successful."]
                    refund {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        allow_burn: ::core::primitive::bool,
                    },
                    #[codec(index = 28)]
                    #[doc = "Sets the minimum balance of an asset."]
                    #[doc = ""]
                    #[doc = "Only works if there aren't any accounts that are holding the asset or if"]
                    #[doc = "the new value of `min_balance` is less than the old one."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender has to be the Owner of the"]
                    #[doc = "asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `min_balance`: The new value of `min_balance`."]
                    #[doc = ""]
                    #[doc = "Emits `AssetMinBalanceChanged` event when successful."]
                    set_min_balance {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 29)]
                    #[doc = "Create an asset account for `who`."]
                    #[doc = ""]
                    #[doc = "A deposit will be taken from the signer account."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account"]
                    #[doc = "  must have sufficient funds for a deposit to be taken."]
                    #[doc = "- `id`: The identifier of the asset for the account to be created."]
                    #[doc = "- `who`: The account to be created."]
                    #[doc = ""]
                    #[doc = "Emits `Touched` event when successful."]
                    touch_other {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 30)]
                    #[doc = "Return the deposit (if any) of a target asset account. Useful if you are the depositor."]
                    #[doc = ""]
                    #[doc = "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In"]
                    #[doc = "order to burn a non-zero balance of the asset, the caller must be the account and should"]
                    #[doc = "use `refund`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset for the account holding a deposit."]
                    #[doc = "- `who`: The account to refund."]
                    #[doc = ""]
                    #[doc = "Emits `Refunded` event when successful."]
                    refund_other {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 31)]
                    #[doc = "Disallow further unprivileged transfers of an asset `id` to and from an account `who`."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the account's asset."]
                    #[doc = "- `who`: The account to be unblocked."]
                    #[doc = ""]
                    #[doc = "Emits `Blocked`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    block {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call2 {
                    #[codec(index = 0)]
                    #[doc = "Issue a new class of fungible assets from a public origin."]
                    #[doc = ""]
                    #[doc = "This new asset class has no assets initially and its owner is the origin."]
                    #[doc = ""]
                    #[doc = "The origin must conform to the configured `CreateOrigin` and have sufficient funds free."]
                    #[doc = ""]
                    #[doc = "Funds of sender are reserved by `AssetDeposit`."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
                    #[doc = "an existing asset."]
                    #[doc = "- `admin`: The admin of this class of assets. The admin is the initial address of each"]
                    #[doc = "member of the asset class's admin team."]
                    #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                    #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                    #[doc = ""]
                    #[doc = "Emits `Created` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    create {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        admin: runtime_types::account::AccountId20,
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Issue a new class of fungible assets from a privileged origin."]
                    #[doc = ""]
                    #[doc = "This new asset class has no assets initially."]
                    #[doc = ""]
                    #[doc = "The origin must conform to `ForceOrigin`."]
                    #[doc = ""]
                    #[doc = "Unlike `create`, no funds are reserved."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the new asset. This must not be currently in use to identify"]
                    #[doc = "an existing asset."]
                    #[doc = "- `owner`: The owner of this class of assets. The owner has full superuser permissions"]
                    #[doc = "over this asset, but may later change and configure the permissions using"]
                    #[doc = "`transfer_ownership` and `set_team`."]
                    #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                    #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                    #[doc = ""]
                    #[doc = "Emits `ForceCreated` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_create {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        is_sufficient: ::core::primitive::bool,
                        #[codec(compact)]
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Start the process of destroying a fungible asset class."]
                    #[doc = ""]
                    #[doc = "`start_destroy` is the first in a series of extrinsics that should be called, to allow"]
                    #[doc = "destruction of an asset class."]
                    #[doc = ""]
                    #[doc = "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                    #[doc = "  asset."]
                    #[doc = ""]
                    #[doc = "The asset class must be frozen before calling `start_destroy`."]
                    start_destroy {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Destroy all accounts associated with a given asset."]
                    #[doc = ""]
                    #[doc = "`destroy_accounts` should only be called after `start_destroy` has been called, and the"]
                    #[doc = "asset is in a `Destroying` state."]
                    #[doc = ""]
                    #[doc = "Due to weight restrictions, this function may need to be called multiple times to fully"]
                    #[doc = "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                    #[doc = "  asset."]
                    #[doc = ""]
                    #[doc = "Each call emits the `Event::DestroyedAccounts` event."]
                    destroy_accounts {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit)."]
                    #[doc = ""]
                    #[doc = "`destroy_approvals` should only be called after `start_destroy` has been called, and the"]
                    #[doc = "asset is in a `Destroying` state."]
                    #[doc = ""]
                    #[doc = "Due to weight restrictions, this function may need to be called multiple times to fully"]
                    #[doc = "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                    #[doc = "  asset."]
                    #[doc = ""]
                    #[doc = "Each call emits the `Event::DestroyedApprovals` event."]
                    destroy_approvals {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Complete destroying asset and unreserve currency."]
                    #[doc = ""]
                    #[doc = "`finish_destroy` should only be called after `start_destroy` has been called, and the"]
                    #[doc = "asset is in a `Destroying` state. All accounts or approvals should be destroyed before"]
                    #[doc = "hand."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be destroyed. This must identify an existing"]
                    #[doc = "  asset."]
                    #[doc = ""]
                    #[doc = "Each successful call emits the `Event::Destroyed` event."]
                    finish_destroy {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Mint assets of a particular class."]
                    #[doc = ""]
                    #[doc = "The origin must be Signed and the sender must be the Issuer of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount minted."]
                    #[doc = "- `beneficiary`: The account to be credited with the minted assets."]
                    #[doc = "- `amount`: The amount of the asset to be minted."]
                    #[doc = ""]
                    #[doc = "Emits `Issued` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."]
                    mint {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        beneficiary: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Manager of the asset `id`."]
                    #[doc = ""]
                    #[doc = "Bails with `NoAccount` if the `who` is already dead."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount burned."]
                    #[doc = "- `who`: The account to be debited from."]
                    #[doc = "- `amount`: The maximum amount by which `who`'s balance should be reduced."]
                    #[doc = ""]
                    #[doc = "Emits `Burned` with the actual amount burned. If this takes the balance to below the"]
                    #[doc = "minimum for the asset, then the amount burned is increased to take it to zero."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."]
                    burn {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Move some assets from the sender account to another."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                    #[doc = "- `target`: The account to be credited."]
                    #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
                    #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
                    #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
                    #[doc = "the minimum balance. Must be greater than zero."]
                    #[doc = ""]
                    #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                    #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                    #[doc = "to zero."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
                    #[doc = "`target`."]
                    transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        target: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Move some assets from the sender account to another, keeping the sender account alive."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                    #[doc = "- `target`: The account to be credited."]
                    #[doc = "- `amount`: The amount by which the sender's balance of assets should be reduced and"]
                    #[doc = "`target`'s balance increased. The amount actually transferred may be slightly greater in"]
                    #[doc = "the case that the transfer would otherwise take the sender balance above zero but below"]
                    #[doc = "the minimum balance. Must be greater than zero."]
                    #[doc = ""]
                    #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                    #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                    #[doc = "to zero."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of"]
                    #[doc = "`target`."]
                    transfer_keep_alive {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        target: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "Move some assets from one account to another."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to have some amount transferred."]
                    #[doc = "- `source`: The account to be debited."]
                    #[doc = "- `dest`: The account to be credited."]
                    #[doc = "- `amount`: The amount by which the `source`'s balance of assets should be reduced and"]
                    #[doc = "`dest`'s balance increased. The amount actually transferred may be slightly greater in"]
                    #[doc = "the case that the transfer would otherwise take the `source` balance above zero but"]
                    #[doc = "below the minimum balance. Must be greater than zero."]
                    #[doc = ""]
                    #[doc = "Emits `Transferred` with the actual amount transferred. If this takes the source balance"]
                    #[doc = "to below the minimum for the asset, then the amount transferred is increased to take it"]
                    #[doc = "to zero."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    #[doc = "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of"]
                    #[doc = "`dest`."]
                    force_transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        source: runtime_types::account::AccountId20,
                        dest: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`"]
                    #[doc = "must already exist as an entry in `Account`s of the asset. If you want to freeze an"]
                    #[doc = "account that does not have an entry, use `touch_other` first."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be frozen."]
                    #[doc = "- `who`: The account to be frozen."]
                    #[doc = ""]
                    #[doc = "Emits `Frozen`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    freeze {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 12)]
                    #[doc = "Allow unprivileged transfers to and from an account again."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be frozen."]
                    #[doc = "- `who`: The account to be unfrozen."]
                    #[doc = ""]
                    #[doc = "Emits `Thawed`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    thaw {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 13)]
                    #[doc = "Disallow further unprivileged transfers for the asset class."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be frozen."]
                    #[doc = ""]
                    #[doc = "Emits `Frozen`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    freeze_asset {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 14)]
                    #[doc = "Allow unprivileged transfers for the asset again."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Admin of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be thawed."]
                    #[doc = ""]
                    #[doc = "Emits `Thawed`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    thaw_asset {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 15)]
                    #[doc = "Change the Owner of an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `owner`: The new Owner of this asset."]
                    #[doc = ""]
                    #[doc = "Emits `OwnerChanged`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    transfer_ownership {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 16)]
                    #[doc = "Change the Issuer, Admin and Freezer of an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to be frozen."]
                    #[doc = "- `issuer`: The new Issuer of this asset."]
                    #[doc = "- `admin`: The new Admin of this asset."]
                    #[doc = "- `freezer`: The new Freezer of this asset."]
                    #[doc = ""]
                    #[doc = "Emits `TeamChanged`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    set_team {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        issuer: runtime_types::account::AccountId20,
                        admin: runtime_types::account::AccountId20,
                        freezer: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 17)]
                    #[doc = "Set the metadata for an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                    #[doc = ""]
                    #[doc = "Funds of sender are reserved according to the formula:"]
                    #[doc = "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into"]
                    #[doc = "account any already reserved funds."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to update."]
                    #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
                    #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
                    #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
                    #[doc = ""]
                    #[doc = "Emits `MetadataSet`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    set_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                    },
                    #[codec(index = 18)]
                    #[doc = "Clear the metadata for an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the asset `id`."]
                    #[doc = ""]
                    #[doc = "Any deposit is freed for the asset owner."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to clear."]
                    #[doc = ""]
                    #[doc = "Emits `MetadataCleared`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    clear_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 19)]
                    #[doc = "Force the metadata for an asset to some value."]
                    #[doc = ""]
                    #[doc = "Origin must be ForceOrigin."]
                    #[doc = ""]
                    #[doc = "Any deposit is left alone."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to update."]
                    #[doc = "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`."]
                    #[doc = "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`."]
                    #[doc = "- `decimals`: The number of decimals this asset uses to represent one unit."]
                    #[doc = ""]
                    #[doc = "Emits `MetadataSet`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."]
                    force_set_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 20)]
                    #[doc = "Clear the metadata for an asset."]
                    #[doc = ""]
                    #[doc = "Origin must be ForceOrigin."]
                    #[doc = ""]
                    #[doc = "Any deposit is returned."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset to clear."]
                    #[doc = ""]
                    #[doc = "Emits `MetadataCleared`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_clear_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 21)]
                    #[doc = "Alter the attributes of a given asset."]
                    #[doc = ""]
                    #[doc = "Origin must be `ForceOrigin`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `owner`: The new Owner of this asset."]
                    #[doc = "- `issuer`: The new Issuer of this asset."]
                    #[doc = "- `admin`: The new Admin of this asset."]
                    #[doc = "- `freezer`: The new Freezer of this asset."]
                    #[doc = "- `min_balance`: The minimum balance of this new asset that any single account must"]
                    #[doc = "have. If an account's balance is reduced below this, then it collapses to zero."]
                    #[doc = "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient"]
                    #[doc = "value to account for the state bloat associated with its balance storage. If set to"]
                    #[doc = "`true`, then non-zero balances may be stored without a `consumer` reference (and thus"]
                    #[doc = "an ED in the Balances pallet or whatever else is used to control user-account state"]
                    #[doc = "growth)."]
                    #[doc = "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin"]
                    #[doc = "instructions."]
                    #[doc = ""]
                    #[doc = "Emits `AssetStatusChanged` with the identity of the asset."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_asset_status {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        issuer: runtime_types::account::AccountId20,
                        admin: runtime_types::account::AccountId20,
                        freezer: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        min_balance: ::core::primitive::u128,
                        is_sufficient: ::core::primitive::bool,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 22)]
                    #[doc = "Approve an amount of asset for transfer by a delegated third-party account."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed."]
                    #[doc = ""]
                    #[doc = "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account"]
                    #[doc = "for the purpose of holding the approval. If some non-zero amount of assets is already"]
                    #[doc = "approved from signing account to `delegate`, then it is topped up or unreserved to"]
                    #[doc = "meet the right value."]
                    #[doc = ""]
                    #[doc = "NOTE: The signing account does not need to own `amount` of assets at the point of"]
                    #[doc = "making this call."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `delegate`: The account to delegate permission to transfer asset."]
                    #[doc = "- `amount`: The amount of asset that may be transferred by `delegate`. If there is"]
                    #[doc = "already an approval in place, then this acts additively."]
                    #[doc = ""]
                    #[doc = "Emits `ApprovedTransfer` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    approve_transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        delegate: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 23)]
                    #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and there must be an approval in place between signer and"]
                    #[doc = "`delegate`."]
                    #[doc = ""]
                    #[doc = "Unreserves any deposit previously reserved by `approve_transfer` for the approval."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `delegate`: The account delegated permission to transfer asset."]
                    #[doc = ""]
                    #[doc = "Emits `ApprovalCancelled` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    cancel_approval {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        delegate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 24)]
                    #[doc = "Cancel all of some asset approved for delegated transfer by a third-party account."]
                    #[doc = ""]
                    #[doc = "Origin must be either ForceOrigin or Signed origin with the signer being the Admin"]
                    #[doc = "account of the asset `id`."]
                    #[doc = ""]
                    #[doc = "Unreserves any deposit previously reserved by `approve_transfer` for the approval."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `delegate`: The account delegated permission to transfer asset."]
                    #[doc = ""]
                    #[doc = "Emits `ApprovalCancelled` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_cancel_approval {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 25)]
                    #[doc = "Transfer some asset balance from a previously delegated account to some third-party"]
                    #[doc = "account."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and there must be an approval in place by the `owner` to the"]
                    #[doc = "signer."]
                    #[doc = ""]
                    #[doc = "If the entire amount approved for transfer is transferred, then any deposit previously"]
                    #[doc = "reserved by `approve_transfer` is unreserved."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `owner`: The account which previously approved for a transfer of at least `amount` and"]
                    #[doc = "from which the asset balance will be withdrawn."]
                    #[doc = "- `destination`: The account to which the asset balance of `amount` will be transferred."]
                    #[doc = "- `amount`: The amount of assets to transfer."]
                    #[doc = ""]
                    #[doc = "Emits `TransferredApproved` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    transfer_approved {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        destination: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 26)]
                    #[doc = "Create an asset account for non-provider assets."]
                    #[doc = ""]
                    #[doc = "A deposit will be taken from the signer account."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit"]
                    #[doc = "  to be taken."]
                    #[doc = "- `id`: The identifier of the asset for the account to be created."]
                    #[doc = ""]
                    #[doc = "Emits `Touched` event when successful."]
                    touch {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                    },
                    #[codec(index = 27)]
                    #[doc = "Return the deposit (if any) of an asset account or a consumer reference (if any) of an"]
                    #[doc = "account."]
                    #[doc = ""]
                    #[doc = "The origin must be Signed."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset for which the caller would like the deposit"]
                    #[doc = "  refunded."]
                    #[doc = "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund."]
                    #[doc = ""]
                    #[doc = "Emits `Refunded` event when successful."]
                    refund {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        allow_burn: ::core::primitive::bool,
                    },
                    #[codec(index = 28)]
                    #[doc = "Sets the minimum balance of an asset."]
                    #[doc = ""]
                    #[doc = "Only works if there aren't any accounts that are holding the asset or if"]
                    #[doc = "the new value of `min_balance` is less than the old one."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender has to be the Owner of the"]
                    #[doc = "asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset."]
                    #[doc = "- `min_balance`: The new value of `min_balance`."]
                    #[doc = ""]
                    #[doc = "Emits `AssetMinBalanceChanged` event when successful."]
                    set_min_balance {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 29)]
                    #[doc = "Create an asset account for `who`."]
                    #[doc = ""]
                    #[doc = "A deposit will be taken from the signer account."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account"]
                    #[doc = "  must have sufficient funds for a deposit to be taken."]
                    #[doc = "- `id`: The identifier of the asset for the account to be created."]
                    #[doc = "- `who`: The account to be created."]
                    #[doc = ""]
                    #[doc = "Emits `Touched` event when successful."]
                    touch_other {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 30)]
                    #[doc = "Return the deposit (if any) of a target asset account. Useful if you are the depositor."]
                    #[doc = ""]
                    #[doc = "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In"]
                    #[doc = "order to burn a non-zero balance of the asset, the caller must be the account and should"]
                    #[doc = "use `refund`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the asset for the account holding a deposit."]
                    #[doc = "- `who`: The account to refund."]
                    #[doc = ""]
                    #[doc = "Emits `Refunded` event when successful."]
                    refund_other {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 31)]
                    #[doc = "Disallow further unprivileged transfers of an asset `id` to and from an account `who`."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Freezer of the asset `id`."]
                    #[doc = ""]
                    #[doc = "- `id`: The identifier of the account's asset."]
                    #[doc = "- `who`: The account to be unblocked."]
                    #[doc = ""]
                    #[doc = "Emits `Blocked`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    block {
                        #[codec(compact)]
                        id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account balance must be greater than or equal to the transfer amount."]
                    BalanceLow,
                    #[codec(index = 1)]
                    #[doc = "The account to alter does not exist."]
                    NoAccount,
                    #[codec(index = 2)]
                    #[doc = "The signing account has no permission to do the operation."]
                    NoPermission,
                    #[codec(index = 3)]
                    #[doc = "The given asset ID is unknown."]
                    Unknown,
                    #[codec(index = 4)]
                    #[doc = "The origin account is frozen."]
                    Frozen,
                    #[codec(index = 5)]
                    #[doc = "The asset ID is already taken."]
                    InUse,
                    #[codec(index = 6)]
                    #[doc = "Invalid witness data given."]
                    BadWitness,
                    #[codec(index = 7)]
                    #[doc = "Minimum balance should be non-zero."]
                    MinBalanceZero,
                    #[codec(index = 8)]
                    #[doc = "Unable to increment the consumer reference counters on the account. Either no provider"]
                    #[doc = "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one"]
                    #[doc = "fewer then the maximum number of consumers has been reached."]
                    UnavailableConsumer,
                    #[codec(index = 9)]
                    #[doc = "Invalid metadata given."]
                    BadMetadata,
                    #[codec(index = 10)]
                    #[doc = "No approval exists that would allow the transfer."]
                    Unapproved,
                    #[codec(index = 11)]
                    #[doc = "The source account would not survive the transfer and it needs to stay alive."]
                    WouldDie,
                    #[codec(index = 12)]
                    #[doc = "The asset-account already exists."]
                    AlreadyExists,
                    #[codec(index = 13)]
                    #[doc = "The asset-account doesn't have an associated deposit."]
                    NoDeposit,
                    #[codec(index = 14)]
                    #[doc = "The operation would result in funds being burned."]
                    WouldBurn,
                    #[codec(index = 15)]
                    #[doc = "The asset is a live asset and is actively being used. Usually emit for operations such"]
                    #[doc = "as `start_destroy` which require the asset to be in a destroying state."]
                    LiveAsset,
                    #[codec(index = 16)]
                    #[doc = "The asset is not live, and likely being destroyed."]
                    AssetNotLive,
                    #[codec(index = 17)]
                    #[doc = "The asset status is not the expected status."]
                    IncorrectStatus,
                    #[codec(index = 18)]
                    #[doc = "The asset should be frozen before the given operation."]
                    NotFrozen,
                    #[codec(index = 19)]
                    #[doc = "Callback action resulted in error"]
                    CallbackFailed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error2 {
                    #[codec(index = 0)]
                    #[doc = "Account balance must be greater than or equal to the transfer amount."]
                    BalanceLow,
                    #[codec(index = 1)]
                    #[doc = "The account to alter does not exist."]
                    NoAccount,
                    #[codec(index = 2)]
                    #[doc = "The signing account has no permission to do the operation."]
                    NoPermission,
                    #[codec(index = 3)]
                    #[doc = "The given asset ID is unknown."]
                    Unknown,
                    #[codec(index = 4)]
                    #[doc = "The origin account is frozen."]
                    Frozen,
                    #[codec(index = 5)]
                    #[doc = "The asset ID is already taken."]
                    InUse,
                    #[codec(index = 6)]
                    #[doc = "Invalid witness data given."]
                    BadWitness,
                    #[codec(index = 7)]
                    #[doc = "Minimum balance should be non-zero."]
                    MinBalanceZero,
                    #[codec(index = 8)]
                    #[doc = "Unable to increment the consumer reference counters on the account. Either no provider"]
                    #[doc = "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one"]
                    #[doc = "fewer then the maximum number of consumers has been reached."]
                    UnavailableConsumer,
                    #[codec(index = 9)]
                    #[doc = "Invalid metadata given."]
                    BadMetadata,
                    #[codec(index = 10)]
                    #[doc = "No approval exists that would allow the transfer."]
                    Unapproved,
                    #[codec(index = 11)]
                    #[doc = "The source account would not survive the transfer and it needs to stay alive."]
                    WouldDie,
                    #[codec(index = 12)]
                    #[doc = "The asset-account already exists."]
                    AlreadyExists,
                    #[codec(index = 13)]
                    #[doc = "The asset-account doesn't have an associated deposit."]
                    NoDeposit,
                    #[codec(index = 14)]
                    #[doc = "The operation would result in funds being burned."]
                    WouldBurn,
                    #[codec(index = 15)]
                    #[doc = "The asset is a live asset and is actively being used. Usually emit for operations such"]
                    #[doc = "as `start_destroy` which require the asset to be in a destroying state."]
                    LiveAsset,
                    #[codec(index = 16)]
                    #[doc = "The asset is not live, and likely being destroyed."]
                    AssetNotLive,
                    #[codec(index = 17)]
                    #[doc = "The asset status is not the expected status."]
                    IncorrectStatus,
                    #[codec(index = 18)]
                    #[doc = "The asset should be frozen before the given operation."]
                    NotFrozen,
                    #[codec(index = 19)]
                    #[doc = "Callback action resulted in error"]
                    CallbackFailed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Some asset class was created."]
                    Created {
                        asset_id: ::core::primitive::u128,
                        creator: runtime_types::account::AccountId20,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "Some assets were issued."]
                    Issued {
                        asset_id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Some assets were transferred."]
                    Transferred {
                        asset_id: ::core::primitive::u128,
                        from: runtime_types::account::AccountId20,
                        to: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Some assets were destroyed."]
                    Burned {
                        asset_id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "The management team changed."]
                    TeamChanged {
                        asset_id: ::core::primitive::u128,
                        issuer: runtime_types::account::AccountId20,
                        admin: runtime_types::account::AccountId20,
                        freezer: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 5)]
                    #[doc = "The owner changed."]
                    OwnerChanged {
                        asset_id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some account `who` was frozen."]
                    Frozen {
                        asset_id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some account `who` was thawed."]
                    Thawed {
                        asset_id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some asset `asset_id` was frozen."]
                    AssetFrozen { asset_id: ::core::primitive::u128 },
                    #[codec(index = 9)]
                    #[doc = "Some asset `asset_id` was thawed."]
                    AssetThawed { asset_id: ::core::primitive::u128 },
                    #[codec(index = 10)]
                    #[doc = "Accounts were destroyed for given asset."]
                    AccountsDestroyed {
                        asset_id: ::core::primitive::u128,
                        accounts_destroyed: ::core::primitive::u32,
                        accounts_remaining: ::core::primitive::u32,
                    },
                    #[codec(index = 11)]
                    #[doc = "Approvals were destroyed for given asset."]
                    ApprovalsDestroyed {
                        asset_id: ::core::primitive::u128,
                        approvals_destroyed: ::core::primitive::u32,
                        approvals_remaining: ::core::primitive::u32,
                    },
                    #[codec(index = 12)]
                    #[doc = "An asset class is in the process of being destroyed."]
                    DestructionStarted { asset_id: ::core::primitive::u128 },
                    #[codec(index = 13)]
                    #[doc = "An asset class was destroyed."]
                    Destroyed { asset_id: ::core::primitive::u128 },
                    #[codec(index = 14)]
                    #[doc = "Some asset class was force-created."]
                    ForceCreated {
                        asset_id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 15)]
                    #[doc = "New metadata has been set for an asset."]
                    MetadataSet {
                        asset_id: ::core::primitive::u128,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    #[doc = "Metadata has been cleared for an asset."]
                    MetadataCleared { asset_id: ::core::primitive::u128 },
                    #[codec(index = 17)]
                    #[doc = "(Additional) funds have been approved for transfer to a destination account."]
                    ApprovedTransfer {
                        asset_id: ::core::primitive::u128,
                        source: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 18)]
                    #[doc = "An approval for account `delegate` was cancelled by `owner`."]
                    ApprovalCancelled {
                        asset_id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 19)]
                    #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
                    #[doc = "the approved `delegate`."]
                    TransferredApproved {
                        asset_id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                        destination: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 20)]
                    #[doc = "An asset has had its attributes changed by the `Force` origin."]
                    AssetStatusChanged { asset_id: ::core::primitive::u128 },
                    #[codec(index = 21)]
                    #[doc = "The min_balance of an asset has been updated by the asset owner."]
                    AssetMinBalanceChanged {
                        asset_id: ::core::primitive::u128,
                        new_min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 22)]
                    #[doc = "Some account `who` was created with a deposit from `depositor`."]
                    Touched {
                        asset_id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                        depositor: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 23)]
                    #[doc = "Some account `who` was blocked."]
                    Blocked {
                        asset_id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event2 {
                    #[codec(index = 0)]
                    #[doc = "Some asset class was created."]
                    Created {
                        asset_id: ::core::primitive::u128,
                        creator: runtime_types::account::AccountId20,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "Some assets were issued."]
                    Issued {
                        asset_id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Some assets were transferred."]
                    Transferred {
                        asset_id: ::core::primitive::u128,
                        from: runtime_types::account::AccountId20,
                        to: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Some assets were destroyed."]
                    Burned {
                        asset_id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "The management team changed."]
                    TeamChanged {
                        asset_id: ::core::primitive::u128,
                        issuer: runtime_types::account::AccountId20,
                        admin: runtime_types::account::AccountId20,
                        freezer: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 5)]
                    #[doc = "The owner changed."]
                    OwnerChanged {
                        asset_id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some account `who` was frozen."]
                    Frozen {
                        asset_id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some account `who` was thawed."]
                    Thawed {
                        asset_id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some asset `asset_id` was frozen."]
                    AssetFrozen { asset_id: ::core::primitive::u128 },
                    #[codec(index = 9)]
                    #[doc = "Some asset `asset_id` was thawed."]
                    AssetThawed { asset_id: ::core::primitive::u128 },
                    #[codec(index = 10)]
                    #[doc = "Accounts were destroyed for given asset."]
                    AccountsDestroyed {
                        asset_id: ::core::primitive::u128,
                        accounts_destroyed: ::core::primitive::u32,
                        accounts_remaining: ::core::primitive::u32,
                    },
                    #[codec(index = 11)]
                    #[doc = "Approvals were destroyed for given asset."]
                    ApprovalsDestroyed {
                        asset_id: ::core::primitive::u128,
                        approvals_destroyed: ::core::primitive::u32,
                        approvals_remaining: ::core::primitive::u32,
                    },
                    #[codec(index = 12)]
                    #[doc = "An asset class is in the process of being destroyed."]
                    DestructionStarted { asset_id: ::core::primitive::u128 },
                    #[codec(index = 13)]
                    #[doc = "An asset class was destroyed."]
                    Destroyed { asset_id: ::core::primitive::u128 },
                    #[codec(index = 14)]
                    #[doc = "Some asset class was force-created."]
                    ForceCreated {
                        asset_id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 15)]
                    #[doc = "New metadata has been set for an asset."]
                    MetadataSet {
                        asset_id: ::core::primitive::u128,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    #[doc = "Metadata has been cleared for an asset."]
                    MetadataCleared { asset_id: ::core::primitive::u128 },
                    #[codec(index = 17)]
                    #[doc = "(Additional) funds have been approved for transfer to a destination account."]
                    ApprovedTransfer {
                        asset_id: ::core::primitive::u128,
                        source: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 18)]
                    #[doc = "An approval for account `delegate` was cancelled by `owner`."]
                    ApprovalCancelled {
                        asset_id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 19)]
                    #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
                    #[doc = "the approved `delegate`."]
                    TransferredApproved {
                        asset_id: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                        destination: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 20)]
                    #[doc = "An asset has had its attributes changed by the `Force` origin."]
                    AssetStatusChanged { asset_id: ::core::primitive::u128 },
                    #[codec(index = 21)]
                    #[doc = "The min_balance of an asset has been updated by the asset owner."]
                    AssetMinBalanceChanged {
                        asset_id: ::core::primitive::u128,
                        new_min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 22)]
                    #[doc = "Some account `who` was created with a deposit from `depositor`."]
                    Touched {
                        asset_id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                        depositor: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 23)]
                    #[doc = "Some account `who` was blocked."]
                    Blocked {
                        asset_id: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AccountStatus {
                    #[codec(index = 0)]
                    Liquid,
                    #[codec(index = 1)]
                    Frozen,
                    #[codec(index = 2)]
                    Blocked,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Approval<_0, _1> {
                    pub amount: _0,
                    pub deposit: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssetAccount<_0, _1, _2, _3> {
                    pub balance: _0,
                    pub status: runtime_types::pallet_assets::types::AccountStatus,
                    pub reason: runtime_types::pallet_assets::types::ExistenceReason<_0, _3>,
                    pub extra: _2,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssetDetails<_0, _1, _2> {
                    pub owner: _1,
                    pub issuer: _1,
                    pub admin: _1,
                    pub freezer: _1,
                    pub supply: _0,
                    pub deposit: _2,
                    pub min_balance: _0,
                    pub is_sufficient: ::core::primitive::bool,
                    pub accounts: ::core::primitive::u32,
                    pub sufficients: ::core::primitive::u32,
                    pub approvals: ::core::primitive::u32,
                    pub status: runtime_types::pallet_assets::types::AssetStatus,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssetMetadata<_0, _1> {
                    pub deposit: _0,
                    pub name: _1,
                    pub symbol: _1,
                    pub decimals: ::core::primitive::u8,
                    pub is_frozen: ::core::primitive::bool,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AssetStatus {
                    #[codec(index = 0)]
                    Live,
                    #[codec(index = 1)]
                    Frozen,
                    #[codec(index = 2)]
                    Destroying,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ExistenceReason<_0, _1> {
                    #[codec(index = 0)]
                    Consumer,
                    #[codec(index = 1)]
                    Sufficient,
                    #[codec(index = 2)]
                    DepositHeld(_0),
                    #[codec(index = 3)]
                    DepositRefunded,
                    #[codec(index = 4)]
                    DepositFrom(_1, _0),
                }
            }
        }
        pub mod pallet_author_inherent {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "This inherent is a workaround to run code after the \"real\" inherents have executed,"]
                    #[doc = "but before transactions are executed."]
                    kick_off_authorship_validation,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Author already set in block."]
                    AuthorAlreadySet,
                    #[codec(index = 1)]
                    #[doc = "No AccountId was found to be associated with this author"]
                    NoAccountId,
                    #[codec(index = 2)]
                    #[doc = "The author in the inherent is not an eligible author."]
                    CannotBeAuthor,
                }
            }
        }
        pub mod pallet_author_mapping {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Register your NimbusId onchain so blocks you author are associated with your account."]
                    #[doc = ""]
                    #[doc = "Users who have been (or will soon be) elected active collators in staking,"]
                    #[doc = "should submit this extrinsic to have their blocks accepted and earn rewards."]
                    add_association {
                        nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                    },
                    #[codec(index = 1)]
                    #[doc = "Change your Mapping."]
                    #[doc = ""]
                    #[doc = "This is useful for normal key rotation or for when switching from one physical collator"]
                    #[doc = "machine to another. No new security deposit is required."]
                    #[doc = "This sets keys to new_nimbus_id.into() by default."]
                    update_association {
                        old_nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                        new_nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                    },
                    #[codec(index = 2)]
                    #[doc = "Clear your Mapping."]
                    #[doc = ""]
                    #[doc = "This is useful when you are no longer an author and would like to re-claim your security"]
                    #[doc = "deposit."]
                    clear_association {
                        nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                    },
                    #[codec(index = 3)]
                    #[doc = "Remove your Mapping."]
                    #[doc = ""]
                    #[doc = "This is useful when you are no longer an author and would like to re-claim your security"]
                    #[doc = "deposit."]
                    remove_keys,
                    #[codec(index = 4)]
                    #[doc = "Set association and session keys at once."]
                    #[doc = ""]
                    #[doc = "This is useful for key rotation to update Nimbus and VRF keys in one call."]
                    #[doc = "No new security deposit is required. Will replace `update_association` which is kept"]
                    #[doc = "now for backwards compatibility reasons."]
                    set_keys {
                        keys: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "An error that can occur while executing the mapping pallet's logic."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The association can't be cleared because it is not found."]
                    AssociationNotFound,
                    #[codec(index = 1)]
                    #[doc = "The association can't be cleared because it belongs to another account."]
                    NotYourAssociation,
                    #[codec(index = 2)]
                    #[doc = "This account cannot set an author because it cannon afford the security deposit"]
                    CannotAffordSecurityDeposit,
                    #[codec(index = 3)]
                    #[doc = "The NimbusId in question is already associated and cannot be overwritten"]
                    AlreadyAssociated,
                    #[codec(index = 4)]
                    #[doc = "No existing NimbusId can be found for the account"]
                    OldAuthorIdNotFound,
                    #[codec(index = 5)]
                    #[doc = "Keys have wrong size"]
                    WrongKeySize,
                    #[codec(index = 6)]
                    #[doc = "Failed to decode NimbusId for `set_keys`"]
                    DecodeNimbusFailed,
                    #[codec(index = 7)]
                    #[doc = "Failed to decode T::Keys for `set_keys`"]
                    DecodeKeysFailed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A NimbusId has been registered and mapped to an AccountId."]
                    KeysRegistered {
                        nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                        account_id: runtime_types::account::AccountId20,
                        keys: runtime_types::session_keys_primitives::vrf::vrf_crypto::Public,
                    },
                    #[codec(index = 1)]
                    #[doc = "An NimbusId has been de-registered, and its AccountId mapping removed."]
                    KeysRemoved {
                        nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                        account_id: runtime_types::account::AccountId20,
                        keys: runtime_types::session_keys_primitives::vrf::vrf_crypto::Public,
                    },
                    #[codec(index = 2)]
                    #[doc = "An NimbusId has been registered, replacing a previous registration and its mapping."]
                    KeysRotated {
                        new_nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
                        account_id: runtime_types::account::AccountId20,
                        new_keys: runtime_types::session_keys_primitives::vrf::vrf_crypto::Public,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RegistrationInfo {
                    pub account: runtime_types::account::AccountId20,
                    pub deposit: ::core::primitive::u128,
                    pub keys: runtime_types::session_keys_primitives::vrf::vrf_crypto::Public,
                }
            }
        }
        pub mod pallet_author_slot_filter {
            use super::runtime_types;
            pub mod num {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct NonZeroU32(pub ::core::primitive::u32);
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Update the eligible count. Intended to be called by governance."]
                    set_eligible {
                        new: runtime_types::pallet_author_slot_filter::num::NonZeroU32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The amount of eligible authors for the filter to select has been changed."]
                    EligibleUpdated(runtime_types::pallet_author_slot_filter::num::NonZeroU32),
                }
            }
        }
        pub mod pallet_balances {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transfer some liquid free balance to another account."]
                    #[doc = ""]
                    #[doc = "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver."]
                    #[doc = "If the sender's account is below the existential deposit as a result"]
                    #[doc = "of the transfer, the account will be reaped."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                    transfer_allow_death {
                        dest: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set the regular balance of a given account; it also takes a reserved balance but this"]
                    #[doc = "must be the same as the account's current reserved balance."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call is `root`."]
                    #[doc = ""]
                    #[doc = "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."]
                    set_balance_deprecated {
                        who: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                        #[codec(compact)]
                        old_reserved: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Exactly as `transfer_allow_death`, except the origin must be root and the source account"]
                    #[doc = "may be specified."]
                    force_transfer {
                        source: runtime_types::account::AccountId20,
                        dest: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not"]
                    #[doc = "kill the origin account."]
                    #[doc = ""]
                    #[doc = "99% of the time you want [`transfer_allow_death`] instead."]
                    #[doc = ""]
                    #[doc = "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"]
                    transfer_keep_alive {
                        dest: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Transfer the entire transferable balance from the caller account."]
                    #[doc = ""]
                    #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                    #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                    #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                    #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                    #[doc = "deposits, etc..."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be Signed."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                    #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                    #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                    #[doc = "  keep the sender account alive (true)."]
                    transfer_all {
                        dest: runtime_types::account::AccountId20,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "Unreserve some balance from a user by force."]
                    #[doc = ""]
                    #[doc = "Can only be called by ROOT."]
                    force_unreserve {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Upgrade a specified account."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be `Signed`."]
                    #[doc = "- `who`: The account to be upgraded."]
                    #[doc = ""]
                    #[doc = "This will waive the transaction fee if at least all but 10% of the accounts needed to"]
                    #[doc = "be upgraded. (We let some not have to be upgraded just in order to allow for the"]
                    #[doc = "possibililty of churn)."]
                    upgrade_accounts {
                        who: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    },
                    #[codec(index = 7)]
                    #[doc = "Alias for `transfer_allow_death`, provided only for name-wise compatibility."]
                    #[doc = ""]
                    #[doc = "WARNING: DEPRECATED! Will be released in approximately 3 months."]
                    transfer {
                        dest: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Set the regular balance of a given account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call is `root`."]
                    force_set_balance {
                        who: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Vesting balance too high to send value."]
                    VestingBalance,
                    #[codec(index = 1)]
                    #[doc = "Account liquidity restrictions prevent withdrawal."]
                    LiquidityRestrictions,
                    #[codec(index = 2)]
                    #[doc = "Balance too low to send value."]
                    InsufficientBalance,
                    #[codec(index = 3)]
                    #[doc = "Value too low to create account due to existential deposit."]
                    ExistentialDeposit,
                    #[codec(index = 4)]
                    #[doc = "Transfer/payment would kill account."]
                    Expendability,
                    #[codec(index = 5)]
                    #[doc = "A vesting schedule already exists for this account."]
                    ExistingVestingSchedule,
                    #[codec(index = 6)]
                    #[doc = "Beneficiary account must pre-exist."]
                    DeadAccount,
                    #[codec(index = 7)]
                    #[doc = "Number of named reserves exceed `MaxReserves`."]
                    TooManyReserves,
                    #[codec(index = 8)]
                    #[doc = "Number of holds exceed `MaxHolds`."]
                    TooManyHolds,
                    #[codec(index = 9)]
                    #[doc = "Number of freezes exceed `MaxFreezes`."]
                    TooManyFreezes,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An account was created with some free balance."]
                    Endowed {
                        account: runtime_types::account::AccountId20,
                        free_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
                    #[doc = "resulting in an outright loss."]
                    DustLost {
                        account: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer succeeded."]
                    Transfer {
                        from: runtime_types::account::AccountId20,
                        to: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A balance was set by root."]
                    BalanceSet {
                        who: runtime_types::account::AccountId20,
                        free: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some balance was reserved (moved from free to reserved)."]
                    Reserved {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Some balance was unreserved (moved from reserved to free)."]
                    Unreserved {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some balance was moved from the reserve of the first account to the second account."]
                    #[doc = "Final argument indicates the destination balance type."]
                    ReserveRepatriated {
                        from: runtime_types::account::AccountId20,
                        to: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                        destination_status:
                            runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some amount was deposited (e.g. for transaction fees)."]
                    Deposit {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
                    Withdraw {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
                    Slashed {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "Some amount was minted into an account."]
                    Minted {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "Some amount was burned from an account."]
                    Burned {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    #[doc = "Some amount was suspended from an account (it can be restored later)."]
                    Suspended {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 13)]
                    #[doc = "Some amount was restored into an account."]
                    Restored {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 14)]
                    #[doc = "An account was upgraded."]
                    Upgraded {
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 15)]
                    #[doc = "Total issuance was increased by `amount`, creating a credit to be balanced."]
                    Issued { amount: ::core::primitive::u128 },
                    #[codec(index = 16)]
                    #[doc = "Total issuance was decreased by `amount`, creating a debt to be balanced."]
                    Rescinded { amount: ::core::primitive::u128 },
                    #[codec(index = 17)]
                    #[doc = "Some balance was locked."]
                    Locked {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 18)]
                    #[doc = "Some balance was unlocked."]
                    Unlocked {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 19)]
                    #[doc = "Some balance was frozen."]
                    Frozen {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 20)]
                    #[doc = "Some balance was thawed."]
                    Thawed {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AccountData<_0> {
                    pub free: _0,
                    pub reserved: _0,
                    pub frozen: _0,
                    pub flags: runtime_types::pallet_balances::types::ExtraFlags,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BalanceLock<_0> {
                    pub id: [::core::primitive::u8; 8usize],
                    pub amount: _0,
                    pub reasons: runtime_types::pallet_balances::types::Reasons,
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExtraFlags(pub ::core::primitive::u128);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct IdAmount<_0, _1> {
                    pub id: _0,
                    pub amount: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Reasons {
                    #[codec(index = 0)]
                    Fee,
                    #[codec(index = 1)]
                    Misc,
                    #[codec(index = 2)]
                    All,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReserveData<_0, _1> {
                    pub id: _0,
                    pub amount: _1,
                }
            }
        }
        pub mod pallet_collective {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the collective's membership."]
                    #[doc = ""]
                    #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                    #[doc = "- `prime`: The prime member whose vote sets the default."]
                    #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                    #[doc = "  weight estimation."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                    #[doc = ""]
                    #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                    #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                    #[doc = ""]
                    #[doc = "# WARNING:"]
                    #[doc = ""]
                    #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                    #[doc = "implementation of the trait [`ChangeMembers`]."]
                    #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                    #[doc = "with other logic managing the member set."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(MP + N)` where:"]
                    #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                    #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                    #[doc = "  - `P` proposals-count (code-bounded)"]
                    set_members {
                        new_members: ::std::vec::Vec<runtime_types::account::AccountId20>,
                        prime: ::core::option::Option<runtime_types::account::AccountId20>,
                        old_count: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                    #[doc = ""]
                    #[doc = "Origin must be a member of the collective."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(B + M + P)` where:"]
                    #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "- `M` members-count (code-bounded)"]
                    #[doc = "- `P` complexity of dispatching `proposal`"]
                    execute {
                        proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Add a new proposal to either be voted on or executed directly."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be member."]
                    #[doc = ""]
                    #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                    #[doc = "or put up for voting."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - branching is influenced by `threshold` where:"]
                    #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                    #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                    propose {
                        #[codec(compact)]
                        threshold: ::core::primitive::u32,
                        proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be a member."]
                    #[doc = ""]
                    #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                    #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                    #[doc = "fee."]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                    vote {
                        proposal: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                    #[doc = "state."]
                    #[doc = ""]
                    #[doc = "Must be called by the Root origin."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "O(P) where P is the number of max proposals"]
                    disapprove_proposal { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 6)]
                    #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                    #[doc = ""]
                    #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                    #[doc = ""]
                    #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                    #[doc = "has enough votes to be approved or disapproved."]
                    #[doc = ""]
                    #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                    #[doc = "unless there is a prime member set and the prime member cast an approval."]
                    #[doc = ""]
                    #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                    #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                    #[doc = ""]
                    #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                    #[doc = "proposal."]
                    #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                    #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1 + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                    #[doc = "  - `P2` is proposal-count (code-bounded)"]
                    close {
                        proposal_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call2 {
                    #[codec(index = 0)]
                    #[doc = "Set the collective's membership."]
                    #[doc = ""]
                    #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                    #[doc = "- `prime`: The prime member whose vote sets the default."]
                    #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                    #[doc = "  weight estimation."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                    #[doc = ""]
                    #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                    #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                    #[doc = ""]
                    #[doc = "# WARNING:"]
                    #[doc = ""]
                    #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                    #[doc = "implementation of the trait [`ChangeMembers`]."]
                    #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                    #[doc = "with other logic managing the member set."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(MP + N)` where:"]
                    #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                    #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                    #[doc = "  - `P` proposals-count (code-bounded)"]
                    set_members {
                        new_members: ::std::vec::Vec<runtime_types::account::AccountId20>,
                        prime: ::core::option::Option<runtime_types::account::AccountId20>,
                        old_count: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                    #[doc = ""]
                    #[doc = "Origin must be a member of the collective."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(B + M + P)` where:"]
                    #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "- `M` members-count (code-bounded)"]
                    #[doc = "- `P` complexity of dispatching `proposal`"]
                    execute {
                        proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Add a new proposal to either be voted on or executed directly."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be member."]
                    #[doc = ""]
                    #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                    #[doc = "or put up for voting."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - branching is influenced by `threshold` where:"]
                    #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                    #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                    propose {
                        #[codec(compact)]
                        threshold: ::core::primitive::u32,
                        proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be a member."]
                    #[doc = ""]
                    #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                    #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                    #[doc = "fee."]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                    vote {
                        proposal: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                    #[doc = "state."]
                    #[doc = ""]
                    #[doc = "Must be called by the Root origin."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "O(P) where P is the number of max proposals"]
                    disapprove_proposal { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 6)]
                    #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                    #[doc = ""]
                    #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                    #[doc = ""]
                    #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                    #[doc = "has enough votes to be approved or disapproved."]
                    #[doc = ""]
                    #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                    #[doc = "unless there is a prime member set and the prime member cast an approval."]
                    #[doc = ""]
                    #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                    #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                    #[doc = ""]
                    #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                    #[doc = "proposal."]
                    #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                    #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1 + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                    #[doc = "  - `P2` is proposal-count (code-bounded)"]
                    close {
                        proposal_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call3 {
                    #[codec(index = 0)]
                    #[doc = "Set the collective's membership."]
                    #[doc = ""]
                    #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                    #[doc = "- `prime`: The prime member whose vote sets the default."]
                    #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                    #[doc = "  weight estimation."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                    #[doc = ""]
                    #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                    #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                    #[doc = ""]
                    #[doc = "# WARNING:"]
                    #[doc = ""]
                    #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                    #[doc = "implementation of the trait [`ChangeMembers`]."]
                    #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                    #[doc = "with other logic managing the member set."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(MP + N)` where:"]
                    #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                    #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                    #[doc = "  - `P` proposals-count (code-bounded)"]
                    set_members {
                        new_members: ::std::vec::Vec<runtime_types::account::AccountId20>,
                        prime: ::core::option::Option<runtime_types::account::AccountId20>,
                        old_count: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                    #[doc = ""]
                    #[doc = "Origin must be a member of the collective."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(B + M + P)` where:"]
                    #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "- `M` members-count (code-bounded)"]
                    #[doc = "- `P` complexity of dispatching `proposal`"]
                    execute {
                        proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Add a new proposal to either be voted on or executed directly."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be member."]
                    #[doc = ""]
                    #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                    #[doc = "or put up for voting."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - branching is influenced by `threshold` where:"]
                    #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                    #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                    propose {
                        #[codec(compact)]
                        threshold: ::core::primitive::u32,
                        proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be a member."]
                    #[doc = ""]
                    #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                    #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                    #[doc = "fee."]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                    vote {
                        proposal: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                    #[doc = "state."]
                    #[doc = ""]
                    #[doc = "Must be called by the Root origin."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "O(P) where P is the number of max proposals"]
                    disapprove_proposal { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 6)]
                    #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                    #[doc = ""]
                    #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                    #[doc = ""]
                    #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                    #[doc = "has enough votes to be approved or disapproved."]
                    #[doc = ""]
                    #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                    #[doc = "unless there is a prime member set and the prime member cast an approval."]
                    #[doc = ""]
                    #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                    #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                    #[doc = ""]
                    #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                    #[doc = "proposal."]
                    #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                    #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1 + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                    #[doc = "  - `P2` is proposal-count (code-bounded)"]
                    close {
                        proposal_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call4 {
                    #[codec(index = 0)]
                    #[doc = "Set the collective's membership."]
                    #[doc = ""]
                    #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                    #[doc = "- `prime`: The prime member whose vote sets the default."]
                    #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                    #[doc = "  weight estimation."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                    #[doc = ""]
                    #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                    #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                    #[doc = ""]
                    #[doc = "# WARNING:"]
                    #[doc = ""]
                    #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                    #[doc = "implementation of the trait [`ChangeMembers`]."]
                    #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                    #[doc = "with other logic managing the member set."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(MP + N)` where:"]
                    #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                    #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                    #[doc = "  - `P` proposals-count (code-bounded)"]
                    set_members {
                        new_members: ::std::vec::Vec<runtime_types::account::AccountId20>,
                        prime: ::core::option::Option<runtime_types::account::AccountId20>,
                        old_count: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                    #[doc = ""]
                    #[doc = "Origin must be a member of the collective."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(B + M + P)` where:"]
                    #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "- `M` members-count (code-bounded)"]
                    #[doc = "- `P` complexity of dispatching `proposal`"]
                    execute {
                        proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Add a new proposal to either be voted on or executed directly."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be member."]
                    #[doc = ""]
                    #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                    #[doc = "or put up for voting."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - branching is influenced by `threshold` where:"]
                    #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                    #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                    propose {
                        #[codec(compact)]
                        threshold: ::core::primitive::u32,
                        proposal: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be a member."]
                    #[doc = ""]
                    #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                    #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                    #[doc = "fee."]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                    vote {
                        proposal: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                    #[doc = "state."]
                    #[doc = ""]
                    #[doc = "Must be called by the Root origin."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "O(P) where P is the number of max proposals"]
                    disapprove_proposal { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 6)]
                    #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                    #[doc = ""]
                    #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                    #[doc = ""]
                    #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                    #[doc = "has enough votes to be approved or disapproved."]
                    #[doc = ""]
                    #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                    #[doc = "unless there is a prime member set and the prime member cast an approval."]
                    #[doc = ""]
                    #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                    #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                    #[doc = ""]
                    #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                    #[doc = "proposal."]
                    #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                    #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1 + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                    #[doc = "  - `P2` is proposal-count (code-bounded)"]
                    close {
                        proposal_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account is not a member"]
                    NotMember,
                    #[codec(index = 1)]
                    #[doc = "Duplicate proposals not allowed"]
                    DuplicateProposal,
                    #[codec(index = 2)]
                    #[doc = "Proposal must exist"]
                    ProposalMissing,
                    #[codec(index = 3)]
                    #[doc = "Mismatched index"]
                    WrongIndex,
                    #[codec(index = 4)]
                    #[doc = "Duplicate vote ignored"]
                    DuplicateVote,
                    #[codec(index = 5)]
                    #[doc = "Members are already initialized!"]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "The close call was made too early, before the end of the voting."]
                    TooEarly,
                    #[codec(index = 7)]
                    #[doc = "There can only be a maximum of `MaxProposals` active proposals."]
                    TooManyProposals,
                    #[codec(index = 8)]
                    #[doc = "The given weight bound for the proposal was too low."]
                    WrongProposalWeight,
                    #[codec(index = 9)]
                    #[doc = "The given length bound for the proposal was too low."]
                    WrongProposalLength,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error2 {
                    #[codec(index = 0)]
                    #[doc = "Account is not a member"]
                    NotMember,
                    #[codec(index = 1)]
                    #[doc = "Duplicate proposals not allowed"]
                    DuplicateProposal,
                    #[codec(index = 2)]
                    #[doc = "Proposal must exist"]
                    ProposalMissing,
                    #[codec(index = 3)]
                    #[doc = "Mismatched index"]
                    WrongIndex,
                    #[codec(index = 4)]
                    #[doc = "Duplicate vote ignored"]
                    DuplicateVote,
                    #[codec(index = 5)]
                    #[doc = "Members are already initialized!"]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "The close call was made too early, before the end of the voting."]
                    TooEarly,
                    #[codec(index = 7)]
                    #[doc = "There can only be a maximum of `MaxProposals` active proposals."]
                    TooManyProposals,
                    #[codec(index = 8)]
                    #[doc = "The given weight bound for the proposal was too low."]
                    WrongProposalWeight,
                    #[codec(index = 9)]
                    #[doc = "The given length bound for the proposal was too low."]
                    WrongProposalLength,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error3 {
                    #[codec(index = 0)]
                    #[doc = "Account is not a member"]
                    NotMember,
                    #[codec(index = 1)]
                    #[doc = "Duplicate proposals not allowed"]
                    DuplicateProposal,
                    #[codec(index = 2)]
                    #[doc = "Proposal must exist"]
                    ProposalMissing,
                    #[codec(index = 3)]
                    #[doc = "Mismatched index"]
                    WrongIndex,
                    #[codec(index = 4)]
                    #[doc = "Duplicate vote ignored"]
                    DuplicateVote,
                    #[codec(index = 5)]
                    #[doc = "Members are already initialized!"]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "The close call was made too early, before the end of the voting."]
                    TooEarly,
                    #[codec(index = 7)]
                    #[doc = "There can only be a maximum of `MaxProposals` active proposals."]
                    TooManyProposals,
                    #[codec(index = 8)]
                    #[doc = "The given weight bound for the proposal was too low."]
                    WrongProposalWeight,
                    #[codec(index = 9)]
                    #[doc = "The given length bound for the proposal was too low."]
                    WrongProposalLength,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error4 {
                    #[codec(index = 0)]
                    #[doc = "Account is not a member"]
                    NotMember,
                    #[codec(index = 1)]
                    #[doc = "Duplicate proposals not allowed"]
                    DuplicateProposal,
                    #[codec(index = 2)]
                    #[doc = "Proposal must exist"]
                    ProposalMissing,
                    #[codec(index = 3)]
                    #[doc = "Mismatched index"]
                    WrongIndex,
                    #[codec(index = 4)]
                    #[doc = "Duplicate vote ignored"]
                    DuplicateVote,
                    #[codec(index = 5)]
                    #[doc = "Members are already initialized!"]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "The close call was made too early, before the end of the voting."]
                    TooEarly,
                    #[codec(index = 7)]
                    #[doc = "There can only be a maximum of `MaxProposals` active proposals."]
                    TooManyProposals,
                    #[codec(index = 8)]
                    #[doc = "The given weight bound for the proposal was too low."]
                    WrongProposalWeight,
                    #[codec(index = 9)]
                    #[doc = "The given length bound for the proposal was too low."]
                    WrongProposalLength,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
                    #[doc = "`MemberCount`)."]
                    Proposed {
                        account: runtime_types::account::AccountId20,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: ::subxt::utils::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A motion (given hash) has been voted on by given account, leaving"]
                    #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
                    Voted {
                        account: runtime_types::account::AccountId20,
                        proposal_hash: ::subxt::utils::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A motion was approved by the required threshold."]
                    Approved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    #[doc = "A motion was not approved by the required threshold."]
                    Disapproved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
                    Executed {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 5)]
                    #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
                    MemberExecuted {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 6)]
                    #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
                    Closed {
                        proposal_hash: ::subxt::utils::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event2 {
                    #[codec(index = 0)]
                    #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
                    #[doc = "`MemberCount`)."]
                    Proposed {
                        account: runtime_types::account::AccountId20,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: ::subxt::utils::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A motion (given hash) has been voted on by given account, leaving"]
                    #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
                    Voted {
                        account: runtime_types::account::AccountId20,
                        proposal_hash: ::subxt::utils::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A motion was approved by the required threshold."]
                    Approved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    #[doc = "A motion was not approved by the required threshold."]
                    Disapproved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
                    Executed {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 5)]
                    #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
                    MemberExecuted {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 6)]
                    #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
                    Closed {
                        proposal_hash: ::subxt::utils::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event3 {
                    #[codec(index = 0)]
                    #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
                    #[doc = "`MemberCount`)."]
                    Proposed {
                        account: runtime_types::account::AccountId20,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: ::subxt::utils::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A motion (given hash) has been voted on by given account, leaving"]
                    #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
                    Voted {
                        account: runtime_types::account::AccountId20,
                        proposal_hash: ::subxt::utils::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A motion was approved by the required threshold."]
                    Approved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    #[doc = "A motion was not approved by the required threshold."]
                    Disapproved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
                    Executed {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 5)]
                    #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
                    MemberExecuted {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 6)]
                    #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
                    Closed {
                        proposal_hash: ::subxt::utils::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event4 {
                    #[codec(index = 0)]
                    #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
                    #[doc = "`MemberCount`)."]
                    Proposed {
                        account: runtime_types::account::AccountId20,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: ::subxt::utils::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A motion (given hash) has been voted on by given account, leaving"]
                    #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
                    Voted {
                        account: runtime_types::account::AccountId20,
                        proposal_hash: ::subxt::utils::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A motion was approved by the required threshold."]
                    Approved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    #[doc = "A motion was not approved by the required threshold."]
                    Disapproved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
                    Executed {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 5)]
                    #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
                    MemberExecuted {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 6)]
                    #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
                    Closed {
                        proposal_hash: ::subxt::utils::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RawOrigin<_0> {
                #[codec(index = 0)]
                Members(::core::primitive::u32, ::core::primitive::u32),
                #[codec(index = 1)]
                Member(_0),
                #[codec(index = 2)]
                _Phantom,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Votes<_0, _1> {
                pub index: ::core::primitive::u32,
                pub threshold: ::core::primitive::u32,
                pub ayes: ::std::vec::Vec<_0>,
                pub nays: ::std::vec::Vec<_0>,
                pub end: _1,
            }
        }
        pub mod pallet_conviction_voting {
            use super::runtime_types;
            pub mod conviction {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Conviction {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Locked1x,
                    #[codec(index = 2)]
                    Locked2x,
                    #[codec(index = 3)]
                    Locked3x,
                    #[codec(index = 4)]
                    Locked4x,
                    #[codec(index = 5)]
                    Locked5x,
                    #[codec(index = 6)]
                    Locked6x,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;"]
                    #[doc = "otherwise it is a vote to keep the status quo."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `poll_index`: The index of the poll to vote for."]
                    #[doc = "- `vote`: The vote configuration."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` where R is the number of polls the voter has voted on."]
                    vote {
                        #[codec(compact)]
                        poll_index: ::core::primitive::u32,
                        vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Delegate the voting power (with some given conviction) of the sending account for a"]
                    #[doc = "particular class of polls."]
                    #[doc = ""]
                    #[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
                    #[doc = "time appropriate for the conviction's lock period."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
                    #[doc = "  - be delegating already; or"]
                    #[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
                    #[doc = "    through `reap_vote` or `unvote`)."]
                    #[doc = ""]
                    #[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
                    #[doc = "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls"]
                    #[doc = "  to this function are required."]
                    #[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
                    #[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
                    #[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
                    #[doc = "  be more than the account's current balance."]
                    #[doc = ""]
                    #[doc = "Emits `Delegated`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` where R is the number of polls the voter delegating to has"]
                    #[doc = "  voted on. Weight is initially charged as if maximum votes, but is refunded later."]
                    delegate {
                        class: ::core::primitive::u16,
                        to: runtime_types::account::AccountId20,
                        conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Undelegate the voting power of the sending account for a particular class of polls."]
                    #[doc = ""]
                    #[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
                    #[doc = "of the conviction with which the delegation was issued has passed."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
                    #[doc = "currently delegating."]
                    #[doc = ""]
                    #[doc = "- `class`: The class of polls to remove the delegation from."]
                    #[doc = ""]
                    #[doc = "Emits `Undelegated`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` where R is the number of polls the voter delegating to has"]
                    #[doc = "  voted on. Weight is initially charged as if maximum votes, but is refunded later."]
                    undelegate { class: ::core::primitive::u16 },
                    #[codec(index = 3)]
                    #[doc = "Remove the lock caused by prior voting/delegating which has expired within a particular"]
                    #[doc = "class."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `class`: The class of polls to unlock."]
                    #[doc = "- `target`: The account to remove the lock on."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` with R number of vote of target."]
                    unlock {
                        class: ::core::primitive::u16,
                        target: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 4)]
                    #[doc = "Remove a vote for a poll."]
                    #[doc = ""]
                    #[doc = "If:"]
                    #[doc = "- the poll was cancelled, or"]
                    #[doc = "- the poll is ongoing, or"]
                    #[doc = "- the poll has ended such that"]
                    #[doc = "  - the vote of the account was in opposition to the result; or"]
                    #[doc = "  - there was no conviction to the account's vote; or"]
                    #[doc = "  - the account made a split vote"]
                    #[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
                    #[doc = "funds being available."]
                    #[doc = ""]
                    #[doc = "If, however, the poll has ended and:"]
                    #[doc = "- it finished corresponding to the vote of the account, and"]
                    #[doc = "- the account made a standard vote with conviction, and"]
                    #[doc = "- the lock period of the conviction is not over"]
                    #[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
                    #[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
                    #[doc = "of both the amount locked and the time is it locked for)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
                    #[doc = "registered for poll `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: The index of poll of the vote to be removed."]
                    #[doc = "- `class`: Optional parameter, if given it indicates the class of the poll. For polls"]
                    #[doc = "  which have finished or are cancelled, this must be `Some`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on."]
                    #[doc = "  Weight is calculated for the maximum number of vote."]
                    remove_vote {
                        class: ::core::option::Option<::core::primitive::u16>,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Remove a vote for a poll."]
                    #[doc = ""]
                    #[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
                    #[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
                    #[doc = "either because the poll was cancelled, because the voter lost the poll or"]
                    #[doc = "because the conviction period is over."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `target`: The account of the vote to be removed; this account must have voted for poll"]
                    #[doc = "  `index`."]
                    #[doc = "- `index`: The index of poll of the vote to be removed."]
                    #[doc = "- `class`: The class of the poll."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on."]
                    #[doc = "  Weight is calculated for the maximum number of vote."]
                    remove_other_vote {
                        target: runtime_types::account::AccountId20,
                        class: ::core::primitive::u16,
                        index: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Poll is not ongoing."]
                    NotOngoing,
                    #[codec(index = 1)]
                    #[doc = "The given account did not vote on the poll."]
                    NotVoter,
                    #[codec(index = 2)]
                    #[doc = "The actor has no permission to conduct the action."]
                    NoPermission,
                    #[codec(index = 3)]
                    #[doc = "The actor has no permission to conduct the action right now but will do in the future."]
                    NoPermissionYet,
                    #[codec(index = 4)]
                    #[doc = "The account is already delegating."]
                    AlreadyDelegating,
                    #[codec(index = 5)]
                    #[doc = "The account currently has votes attached to it and the operation cannot succeed until"]
                    #[doc = "these are removed, either through `unvote` or `reap_vote`."]
                    AlreadyVoting,
                    #[codec(index = 6)]
                    #[doc = "Too high a balance was provided that the account cannot afford."]
                    InsufficientFunds,
                    #[codec(index = 7)]
                    #[doc = "The account is not currently delegating."]
                    NotDelegating,
                    #[codec(index = 8)]
                    #[doc = "Delegation to oneself makes no sense."]
                    Nonsense,
                    #[codec(index = 9)]
                    #[doc = "Maximum number of votes reached."]
                    MaxVotesReached,
                    #[codec(index = 10)]
                    #[doc = "The class must be supplied since it is not easily determinable from the state."]
                    ClassNeeded,
                    #[codec(index = 11)]
                    #[doc = "The class ID supplied is invalid."]
                    BadClass,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An account has delegated their vote to another account. \\[who, target\\]"]
                    Delegated(
                        runtime_types::account::AccountId20,
                        runtime_types::account::AccountId20,
                    ),
                    #[codec(index = 1)]
                    #[doc = "An \\[account\\] has cancelled a previous delegation operation."]
                    Undelegated(runtime_types::account::AccountId20),
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegations<_0> {
                    pub votes: _0,
                    pub capital: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Tally<_0> {
                    pub ayes: _0,
                    pub nays: _0,
                    pub support: _0,
                }
            }
            pub mod vote {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AccountVote<_0> {
                    #[codec(index = 0)]
                    Standard {
                        vote: runtime_types::pallet_conviction_voting::vote::Vote,
                        balance: _0,
                    },
                    #[codec(index = 1)]
                    Split { aye: _0, nay: _0 },
                    #[codec(index = 2)]
                    SplitAbstain { aye: _0, nay: _0, abstain: _0 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Casting<_0, _1, _2> {
                    pub votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        _1,
                        runtime_types::pallet_conviction_voting::vote::AccountVote<_0>,
                    )>,
                    pub delegations:
                        runtime_types::pallet_conviction_voting::types::Delegations<_0>,
                    pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_1, _0>,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegating<_0, _1, _2> {
                    pub balance: _0,
                    pub target: _1,
                    pub conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
                    pub delegations:
                        runtime_types::pallet_conviction_voting::types::Delegations<_0>,
                    pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_2, _0>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PriorLock<_0, _1>(pub _0, pub _1);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote(pub ::core::primitive::u8);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Voting<_0, _1, _2, _3> {
                    #[codec(index = 0)]
                    Casting(runtime_types::pallet_conviction_voting::vote::Casting<_0, _2, _2>),
                    #[codec(index = 1)]
                    Delegating(
                        runtime_types::pallet_conviction_voting::vote::Delegating<_0, _1, _2>,
                    ),
                    __Ignore(::core::marker::PhantomData<_3>),
                }
            }
        }
        pub mod pallet_crowdloan_rewards {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Associate a native rewards_destination identity with a crowdloan contribution."]
                    #[doc = ""]
                    #[doc = "The caller needs to provide the unassociated relay account and a proof to succeed"]
                    #[doc = "with the association"]
                    #[doc = "The proof is nothing but a signature over the reward_address using the relay keys"]
                    associate_native_identity {
                        reward_account: runtime_types::account::AccountId20,
                        relay_account: [::core::primitive::u8; 32usize],
                        proof: runtime_types::sp_runtime::MultiSignature,
                    },
                    #[codec(index = 1)]
                    #[doc = "Change reward account by submitting proofs from relay accounts"]
                    #[doc = ""]
                    #[doc = "The number of valid proofs needs to be bigger than 'RewardAddressRelayVoteThreshold'"]
                    #[doc = "The account to be changed needs to be submitted as 'previous_account'"]
                    #[doc = "Origin must be RewardAddressChangeOrigin"]
                    change_association_with_relay_keys {
                        reward_account: runtime_types::account::AccountId20,
                        previous_account: runtime_types::account::AccountId20,
                        proofs: ::std::vec::Vec<(
                            [::core::primitive::u8; 32usize],
                            runtime_types::sp_runtime::MultiSignature,
                        )>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Collect whatever portion of your reward are currently vested."]
                    claim,
                    #[codec(index = 3)]
                    #[doc = "Update reward address, proving that the caller owns the current native key"]
                    update_reward_address {
                        new_reward_account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 4)]
                    #[doc = "This extrinsic completes the initialization if some checks are fullfiled. These checks are:"]
                    #[doc = " -The reward contribution money matches the crowdloan pot"]
                    #[doc = " -The end vesting block is higher than the init vesting block"]
                    #[doc = " -The initialization has not complete yet"]
                    complete_initialization {
                        lease_ending_block: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Initialize the reward distribution storage. It shortcuts whenever an error is found"]
                    #[doc = "This does not enforce any checks other than making sure we dont go over funds"]
                    #[doc = "complete_initialization should perform any additional"]
                    initialize_reward_vec {
                        rewards: ::std::vec::Vec<(
                            [::core::primitive::u8; 32usize],
                            ::core::option::Option<runtime_types::account::AccountId20>,
                            ::core::primitive::u128,
                        )>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "User trying to associate a native identity with a relay chain identity for posterior"]
                    #[doc = "reward claiming provided an already associated relay chain identity"]
                    AlreadyAssociated,
                    #[codec(index = 1)]
                    #[doc = "Trying to introduce a batch that goes beyond the limits of the funds"]
                    BatchBeyondFundPot,
                    #[codec(index = 2)]
                    #[doc = "First claim already done"]
                    FirstClaimAlreadyDone,
                    #[codec(index = 3)]
                    #[doc = "The contribution is not high enough to be eligible for rewards"]
                    RewardNotHighEnough,
                    #[codec(index = 4)]
                    #[doc = "User trying to associate a native identity with a relay chain identity for posterior"]
                    #[doc = "reward claiming provided a wrong signature"]
                    InvalidClaimSignature,
                    #[codec(index = 5)]
                    #[doc = "User trying to claim the first free reward provided the wrong signature"]
                    InvalidFreeClaimSignature,
                    #[codec(index = 6)]
                    #[doc = "User trying to claim an award did not have an claim associated with it. This may mean"]
                    #[doc = "they did not contribute to the crowdloan, or they have not yet associated a native id"]
                    #[doc = "with their contribution"]
                    NoAssociatedClaim,
                    #[codec(index = 7)]
                    #[doc = "User trying to claim rewards has already claimed all rewards associated with its"]
                    #[doc = "identity and contribution"]
                    RewardsAlreadyClaimed,
                    #[codec(index = 8)]
                    #[doc = "Reward vec has already been initialized"]
                    RewardVecAlreadyInitialized,
                    #[codec(index = 9)]
                    #[doc = "Reward vec has not yet been fully initialized"]
                    RewardVecNotFullyInitializedYet,
                    #[codec(index = 10)]
                    #[doc = "Rewards should match funds of the pallet"]
                    RewardsDoNotMatchFund,
                    #[codec(index = 11)]
                    #[doc = "Initialize_reward_vec received too many contributors"]
                    TooManyContributors,
                    #[codec(index = 12)]
                    #[doc = "Provided vesting period is not valid"]
                    VestingPeriodNonValid,
                    #[codec(index = 13)]
                    #[doc = "User provided a signature from a non-contributor relay account"]
                    NonContributedAddressProvided,
                    #[codec(index = 14)]
                    #[doc = "User submitted an unsifficient number of proofs to change the reward address"]
                    InsufficientNumberOfValidProofs,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The initial payment of InitializationPayment % was paid"]
                    InitialPaymentMade(
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 1)]
                    #[doc = "Someone has proven they made a contribution and associated a native identity with it."]
                    #[doc = "Data is the relay account,  native account and the total amount of _rewards_ that will be paid"]
                    NativeIdentityAssociated(
                        [::core::primitive::u8; 32usize],
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 2)]
                    #[doc = "A contributor has claimed some rewards."]
                    #[doc = "Data is the account getting paid and the amount of rewards paid."]
                    RewardsPaid(runtime_types::account::AccountId20, ::core::primitive::u128),
                    #[codec(index = 3)]
                    #[doc = "A contributor has updated the reward address."]
                    RewardAddressUpdated(
                        runtime_types::account::AccountId20,
                        runtime_types::account::AccountId20,
                    ),
                    #[codec(index = 4)]
                    #[doc = "When initializing the reward vec an already initialized account was found"]
                    InitializedAlreadyInitializedAccount(
                        [::core::primitive::u8; 32usize],
                        ::core::option::Option<runtime_types::account::AccountId20>,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 5)]
                    #[doc = "When initializing the reward vec an already initialized account was found"]
                    InitializedAccountWithNotEnoughContribution(
                        [::core::primitive::u8; 32usize],
                        ::core::option::Option<runtime_types::account::AccountId20>,
                        ::core::primitive::u128,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RewardInfo {
                    pub total_reward: ::core::primitive::u128,
                    pub claimed_reward: ::core::primitive::u128,
                    pub contributed_relay_addresses:
                        ::std::vec::Vec<[::core::primitive::u8; 32usize]>,
                }
            }
        }
        pub mod pallet_democracy {
            use super::runtime_types;
            pub mod conviction {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Conviction {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Locked1x,
                    #[codec(index = 2)]
                    Locked2x,
                    #[codec(index = 3)]
                    Locked3x,
                    #[codec(index = 4)]
                    Locked4x,
                    #[codec(index = 5)]
                    Locked5x,
                    #[codec(index = 6)]
                    Locked6x,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Propose a sensitive action to be taken."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
                    #[doc = "have funds to cover the deposit."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The hash of the proposal preimage."]
                    #[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
                    #[doc = ""]
                    #[doc = "Emits `Proposed`."]
                    propose {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::moonbase_runtime::RuntimeCall,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Signals agreement with a particular proposal."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
                    #[doc = "must have funds to cover the deposit, equal to the original deposit."]
                    #[doc = ""]
                    #[doc = "- `proposal`: The index of the proposal to second."]
                    second {
                        #[codec(compact)]
                        proposal: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
                    #[doc = "otherwise it is a vote to keep the status quo."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `ref_index`: The index of the referendum to vote for."]
                    #[doc = "- `vote`: The vote configuration."]
                    vote {
                        #[codec(compact)]
                        ref_index: ::core::primitive::u32,
                        vote: runtime_types::pallet_democracy::vote::AccountVote<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
                    #[doc = "referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
                    #[doc = ""]
                    #[doc = "-`ref_index`: The index of the referendum to cancel."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`."]
                    emergency_cancel { ref_index: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
                    #[doc = "referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                    external_propose {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::moonbase_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 5)]
                    #[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
                    #[doc = "an external referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                    #[doc = ""]
                    #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                    #[doc = "pre-scheduled `external_propose` call."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    external_propose_majority {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::moonbase_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 6)]
                    #[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
                    #[doc = "schedule an external referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                    #[doc = ""]
                    #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                    #[doc = "pre-scheduled `external_propose` call."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    external_propose_default {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::moonbase_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 7)]
                    #[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
                    #[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
                    #[doc = "but it is not a majority-carries referendum then it fails."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `FastTrackOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The hash of the current external proposal."]
                    #[doc = "- `voting_period`: The period that is allowed for voting on this proposal. Increased to"]
                    #[doc = "\tMust be always greater than zero."]
                    #[doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."]
                    #[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
                    #[doc = "  enacted. This doesn't have a minimum amount."]
                    #[doc = ""]
                    #[doc = "Emits `Started`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    fast_track {
                        proposal_hash: ::subxt::utils::H256,
                        voting_period: ::core::primitive::u32,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Veto and blacklist the external proposal hash."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `VetoOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
                    #[doc = ""]
                    #[doc = "Emits `Vetoed`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
                    veto_external { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 9)]
                    #[doc = "Remove a referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "- `ref_index`: The index of the referendum to cancel."]
                    #[doc = ""]
                    #[doc = "# Weight: `O(1)`."]
                    cancel_referendum {
                        #[codec(compact)]
                        ref_index: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    #[doc = "Delegate the voting power (with some given conviction) of the sending account."]
                    #[doc = ""]
                    #[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
                    #[doc = "time appropriate for the conviction's lock period."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
                    #[doc = "  - be delegating already; or"]
                    #[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
                    #[doc = "    through `reap_vote` or `unvote`)."]
                    #[doc = ""]
                    #[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
                    #[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
                    #[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
                    #[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
                    #[doc = "  be more than the account's current balance."]
                    #[doc = ""]
                    #[doc = "Emits `Delegated`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                    #[doc = "  voted on. Weight is charged as if maximum votes."]
                    delegate {
                        to: runtime_types::account::AccountId20,
                        conviction: runtime_types::pallet_democracy::conviction::Conviction,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "Undelegate the voting power of the sending account."]
                    #[doc = ""]
                    #[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
                    #[doc = "of the conviction with which the delegation was issued."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
                    #[doc = "currently delegating."]
                    #[doc = ""]
                    #[doc = "Emits `Undelegated`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                    #[doc = "  voted on. Weight is charged as if maximum votes."]
                    undelegate,
                    #[codec(index = 12)]
                    #[doc = "Clears all public proposals."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`."]
                    clear_public_proposals,
                    #[codec(index = 13)]
                    #[doc = "Unlock tokens that have an expired lock."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `target`: The account to remove the lock on."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` with R number of vote of target."]
                    unlock {
                        target: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 14)]
                    #[doc = "Remove a vote for a referendum."]
                    #[doc = ""]
                    #[doc = "If:"]
                    #[doc = "- the referendum was cancelled, or"]
                    #[doc = "- the referendum is ongoing, or"]
                    #[doc = "- the referendum has ended such that"]
                    #[doc = "  - the vote of the account was in opposition to the result; or"]
                    #[doc = "  - there was no conviction to the account's vote; or"]
                    #[doc = "  - the account made a split vote"]
                    #[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
                    #[doc = "funds being available."]
                    #[doc = ""]
                    #[doc = "If, however, the referendum has ended and:"]
                    #[doc = "- it finished corresponding to the vote of the account, and"]
                    #[doc = "- the account made a standard vote with conviction, and"]
                    #[doc = "- the lock period of the conviction is not over"]
                    #[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
                    #[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
                    #[doc = "of both the amount locked and the time is it locked for)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
                    #[doc = "registered for referendum `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: The index of referendum of the vote to be removed."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                    #[doc = "  Weight is calculated for the maximum number of vote."]
                    remove_vote { index: ::core::primitive::u32 },
                    #[codec(index = 15)]
                    #[doc = "Remove a vote for a referendum."]
                    #[doc = ""]
                    #[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
                    #[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
                    #[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
                    #[doc = "because the conviction period is over."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
                    #[doc = "  referendum `index`."]
                    #[doc = "- `index`: The index of referendum of the vote to be removed."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                    #[doc = "  Weight is calculated for the maximum number of vote."]
                    remove_other_vote {
                        target: runtime_types::account::AccountId20,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 16)]
                    #[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
                    #[doc = "proposed again."]
                    #[doc = ""]
                    #[doc = "If called on a queued public or external proposal, then this will result in it being"]
                    #[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
                    #[doc = "then it will be cancelled."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
                    #[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
                    #[doc = "cancelled."]
                    #[doc = ""]
                    #[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
                    #[doc = "  reasonable value)."]
                    blacklist {
                        proposal_hash: ::subxt::utils::H256,
                        maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 17)]
                    #[doc = "Remove a proposal."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
                    #[doc = ""]
                    #[doc = "- `prop_index`: The index of the proposal to cancel."]
                    #[doc = ""]
                    #[doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"]
                    cancel_proposal {
                        #[codec(compact)]
                        prop_index: ::core::primitive::u32,
                    },
                    #[codec(index = 18)]
                    #[doc = "Set or clear a metadata of a proposal or a referendum."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `origin`: Must correspond to the `MetadataOwner`."]
                    #[doc = "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`"]
                    #[doc = "      threshold."]
                    #[doc = "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`"]
                    #[doc = "      threshold."]
                    #[doc = "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`"]
                    #[doc = "      threshold."]
                    #[doc = "    - `Signed` by a creator for a public proposal."]
                    #[doc = "    - `Signed` to clear a metadata for a finished referendum."]
                    #[doc = "    - `Root` to set a metadata for an ongoing referendum."]
                    #[doc = "- `owner`: an identifier of a metadata owner."]
                    #[doc = "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."]
                    set_metadata {
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Value too low"]
                    ValueLow,
                    #[codec(index = 1)]
                    #[doc = "Proposal does not exist"]
                    ProposalMissing,
                    #[codec(index = 2)]
                    #[doc = "Cannot cancel the same proposal twice"]
                    AlreadyCanceled,
                    #[codec(index = 3)]
                    #[doc = "Proposal already made"]
                    DuplicateProposal,
                    #[codec(index = 4)]
                    #[doc = "Proposal still blacklisted"]
                    ProposalBlacklisted,
                    #[codec(index = 5)]
                    #[doc = "Next external proposal not simple majority"]
                    NotSimpleMajority,
                    #[codec(index = 6)]
                    #[doc = "Invalid hash"]
                    InvalidHash,
                    #[codec(index = 7)]
                    #[doc = "No external proposal"]
                    NoProposal,
                    #[codec(index = 8)]
                    #[doc = "Identity may not veto a proposal twice"]
                    AlreadyVetoed,
                    #[codec(index = 9)]
                    #[doc = "Vote given for invalid referendum"]
                    ReferendumInvalid,
                    #[codec(index = 10)]
                    #[doc = "No proposals waiting"]
                    NoneWaiting,
                    #[codec(index = 11)]
                    #[doc = "The given account did not vote on the referendum."]
                    NotVoter,
                    #[codec(index = 12)]
                    #[doc = "The actor has no permission to conduct the action."]
                    NoPermission,
                    #[codec(index = 13)]
                    #[doc = "The account is already delegating."]
                    AlreadyDelegating,
                    #[codec(index = 14)]
                    #[doc = "Too high a balance was provided that the account cannot afford."]
                    InsufficientFunds,
                    #[codec(index = 15)]
                    #[doc = "The account is not currently delegating."]
                    NotDelegating,
                    #[codec(index = 16)]
                    #[doc = "The account currently has votes attached to it and the operation cannot succeed until"]
                    #[doc = "these are removed, either through `unvote` or `reap_vote`."]
                    VotesExist,
                    #[codec(index = 17)]
                    #[doc = "The instant referendum origin is currently disallowed."]
                    InstantNotAllowed,
                    #[codec(index = 18)]
                    #[doc = "Delegation to oneself makes no sense."]
                    Nonsense,
                    #[codec(index = 19)]
                    #[doc = "Invalid upper bound."]
                    WrongUpperBound,
                    #[codec(index = 20)]
                    #[doc = "Maximum number of votes reached."]
                    MaxVotesReached,
                    #[codec(index = 21)]
                    #[doc = "Maximum number of items reached."]
                    TooMany,
                    #[codec(index = 22)]
                    #[doc = "Voting period too low"]
                    VotingPeriodLow,
                    #[codec(index = 23)]
                    #[doc = "The preimage does not exist."]
                    PreimageNotExist,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A motion has been proposed by a public account."]
                    Proposed {
                        proposal_index: ::core::primitive::u32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "A public proposal has been tabled for referendum vote."]
                    Tabled {
                        proposal_index: ::core::primitive::u32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "An external proposal has been tabled."]
                    ExternalTabled,
                    #[codec(index = 3)]
                    #[doc = "A referendum has begun."]
                    Started {
                        ref_index: ::core::primitive::u32,
                        threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    },
                    #[codec(index = 4)]
                    #[doc = "A proposal has been approved by referendum."]
                    Passed { ref_index: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "A proposal has been rejected by referendum."]
                    NotPassed { ref_index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "A referendum has been cancelled."]
                    Cancelled { ref_index: ::core::primitive::u32 },
                    #[codec(index = 7)]
                    #[doc = "An account has delegated their vote to another account."]
                    Delegated {
                        who: runtime_types::account::AccountId20,
                        target: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 8)]
                    #[doc = "An account has cancelled a previous delegation operation."]
                    Undelegated {
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 9)]
                    #[doc = "An external proposal has been vetoed."]
                    Vetoed {
                        who: runtime_types::account::AccountId20,
                        proposal_hash: ::subxt::utils::H256,
                        until: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    #[doc = "A proposal_hash has been blacklisted permanently."]
                    Blacklisted { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 11)]
                    #[doc = "An account has voted in a referendum"]
                    Voted {
                        voter: runtime_types::account::AccountId20,
                        ref_index: ::core::primitive::u32,
                        vote: runtime_types::pallet_democracy::vote::AccountVote<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 12)]
                    #[doc = "An account has secconded a proposal"]
                    Seconded {
                        seconder: runtime_types::account::AccountId20,
                        prop_index: ::core::primitive::u32,
                    },
                    #[codec(index = 13)]
                    #[doc = "A proposal got canceled."]
                    ProposalCanceled { prop_index: ::core::primitive::u32 },
                    #[codec(index = 14)]
                    #[doc = "Metadata for a proposal or a referendum has been set."]
                    MetadataSet {
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 15)]
                    #[doc = "Metadata for a proposal or a referendum has been cleared."]
                    MetadataCleared {
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 16)]
                    #[doc = "Metadata has been transferred to new owner."]
                    MetadataTransferred {
                        prev_owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        hash: ::subxt::utils::H256,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegations<_0> {
                    pub votes: _0,
                    pub capital: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum MetadataOwner {
                    #[codec(index = 0)]
                    External,
                    #[codec(index = 1)]
                    Proposal(::core::primitive::u32),
                    #[codec(index = 2)]
                    Referendum(::core::primitive::u32),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ReferendumInfo<_0, _1, _2> {
                    #[codec(index = 0)]
                    Ongoing(runtime_types::pallet_democracy::types::ReferendumStatus<_0, _1, _2>),
                    #[codec(index = 1)]
                    Finished {
                        approved: ::core::primitive::bool,
                        end: _0,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReferendumStatus<_0, _1, _2> {
                    pub end: _0,
                    pub proposal: _1,
                    pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    pub delay: _0,
                    pub tally: runtime_types::pallet_democracy::types::Tally<_2>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Tally<_0> {
                    pub ayes: _0,
                    pub nays: _0,
                    pub turnout: _0,
                }
            }
            pub mod vote {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AccountVote<_0> {
                    #[codec(index = 0)]
                    Standard {
                        vote: runtime_types::pallet_democracy::vote::Vote,
                        balance: _0,
                    },
                    #[codec(index = 1)]
                    Split { aye: _0, nay: _0 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PriorLock<_0, _1>(pub _0, pub _1);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote(pub ::core::primitive::u8);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Voting<_0, _1, _2> {
                    #[codec(index = 0)]
                    Direct {
                        votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            _2,
                            runtime_types::pallet_democracy::vote::AccountVote<_0>,
                        )>,
                        delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
                        prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
                    },
                    #[codec(index = 1)]
                    Delegating {
                        balance: _0,
                        target: _1,
                        conviction: runtime_types::pallet_democracy::conviction::Conviction,
                        delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
                        prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
                    },
                }
            }
            pub mod vote_threshold {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum VoteThreshold {
                    #[codec(index = 0)]
                    SuperMajorityApprove,
                    #[codec(index = 1)]
                    SuperMajorityAgainst,
                    #[codec(index = 2)]
                    SimpleMajority,
                }
            }
        }
        pub mod pallet_ethereum {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transact an Ethereum transaction."]
                    transact {
                        transaction: runtime_types::ethereum::transaction::TransactionV2,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Signature is invalid."]
                    InvalidSignature,
                    #[codec(index = 1)]
                    #[doc = "Pre-log is present, therefore transact is not allowed."]
                    PreLogExists,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An ethereum transaction was successfully executed."]
                    Executed {
                        from: ::subxt::utils::H160,
                        to: ::subxt::utils::H160,
                        transaction_hash: ::subxt::utils::H256,
                        exit_reason: runtime_types::evm_core::error::ExitReason,
                        extra_data: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RawOrigin {
                #[codec(index = 0)]
                EthereumTransaction(::subxt::utils::H160),
            }
        }
        pub mod pallet_ethereum_xcm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Xcm Transact an Ethereum transaction."]
                    #[doc = "Weight: Gas limit plus the db read involving the suspension check"]
                    transact {
                        xcm_transaction:
                            runtime_types::xcm_primitives::ethereum_xcm::EthereumXcmTransaction,
                    },
                    #[codec(index = 1)]
                    #[doc = "Xcm Transact an Ethereum transaction through proxy."]
                    #[doc = "Weight: Gas limit plus the db reads involving the suspension and proxy checks"]
                    transact_through_proxy {
                        transact_as: ::subxt::utils::H160,
                        xcm_transaction:
                            runtime_types::xcm_primitives::ethereum_xcm::EthereumXcmTransaction,
                    },
                    #[codec(index = 2)]
                    #[doc = "Suspends all Ethereum executions from XCM."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                    suspend_ethereum_xcm_execution,
                    #[codec(index = 3)]
                    #[doc = "Resumes all Ethereum executions from XCM."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                    resume_ethereum_xcm_execution,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Xcm to Ethereum execution is suspended"]
                    EthereumXcmExecutionSuspended,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RawOrigin {
                #[codec(index = 0)]
                XcmEthereumTransaction(::subxt::utils::H160),
            }
        }
        pub mod pallet_evm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Withdraw balance from EVM into currency/balances pallet."]
                    withdraw {
                        address: ::subxt::utils::H160,
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."]
                    call {
                        source: ::subxt::utils::H160,
                        target: ::subxt::utils::H160,
                        input: ::std::vec::Vec<::core::primitive::u8>,
                        value: runtime_types::primitive_types::U256,
                        gas_limit: ::core::primitive::u64,
                        max_fee_per_gas: runtime_types::primitive_types::U256,
                        max_priority_fee_per_gas:
                            ::core::option::Option<runtime_types::primitive_types::U256>,
                        nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
                        access_list: ::std::vec::Vec<(
                            ::subxt::utils::H160,
                            ::std::vec::Vec<::subxt::utils::H256>,
                        )>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Issue an EVM create operation. This is similar to a contract creation transaction in"]
                    #[doc = "Ethereum."]
                    create {
                        source: ::subxt::utils::H160,
                        init: ::std::vec::Vec<::core::primitive::u8>,
                        value: runtime_types::primitive_types::U256,
                        gas_limit: ::core::primitive::u64,
                        max_fee_per_gas: runtime_types::primitive_types::U256,
                        max_priority_fee_per_gas:
                            ::core::option::Option<runtime_types::primitive_types::U256>,
                        nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
                        access_list: ::std::vec::Vec<(
                            ::subxt::utils::H160,
                            ::std::vec::Vec<::subxt::utils::H256>,
                        )>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Issue an EVM create2 operation."]
                    create2 {
                        source: ::subxt::utils::H160,
                        init: ::std::vec::Vec<::core::primitive::u8>,
                        salt: ::subxt::utils::H256,
                        value: runtime_types::primitive_types::U256,
                        gas_limit: ::core::primitive::u64,
                        max_fee_per_gas: runtime_types::primitive_types::U256,
                        max_priority_fee_per_gas:
                            ::core::option::Option<runtime_types::primitive_types::U256>,
                        nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
                        access_list: ::std::vec::Vec<(
                            ::subxt::utils::H160,
                            ::std::vec::Vec<::subxt::utils::H256>,
                        )>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Not enough balance to perform action"]
                    BalanceLow,
                    #[codec(index = 1)]
                    #[doc = "Calculating total fee overflowed"]
                    FeeOverflow,
                    #[codec(index = 2)]
                    #[doc = "Calculating total payment overflowed"]
                    PaymentOverflow,
                    #[codec(index = 3)]
                    #[doc = "Withdraw fee failed"]
                    WithdrawFailed,
                    #[codec(index = 4)]
                    #[doc = "Gas price is too low."]
                    GasPriceTooLow,
                    #[codec(index = 5)]
                    #[doc = "Nonce is invalid"]
                    InvalidNonce,
                    #[codec(index = 6)]
                    #[doc = "Gas limit is too low."]
                    GasLimitTooLow,
                    #[codec(index = 7)]
                    #[doc = "Gas limit is too high."]
                    GasLimitTooHigh,
                    #[codec(index = 8)]
                    #[doc = "Undefined error."]
                    Undefined,
                    #[codec(index = 9)]
                    #[doc = "EVM reentrancy"]
                    Reentrancy,
                    #[codec(index = 10)]
                    #[doc = "EIP-3607,"]
                    TransactionMustComeFromEOA,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Ethereum events from contracts."]
                    Log {
                        log: runtime_types::ethereum::log::Log,
                    },
                    #[codec(index = 1)]
                    #[doc = "A contract has been created at given address."]
                    Created { address: ::subxt::utils::H160 },
                    #[codec(index = 2)]
                    #[doc = "A contract was attempted to be created, but the execution failed."]
                    CreatedFailed { address: ::subxt::utils::H160 },
                    #[codec(index = 3)]
                    #[doc = "A contract has been executed successfully with states applied."]
                    Executed { address: ::subxt::utils::H160 },
                    #[codec(index = 4)]
                    #[doc = "A contract has been executed with errors. States are reverted with only gas fees applied."]
                    ExecutedFailed { address: ::subxt::utils::H160 },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CodeMetadata {
                pub size: ::core::primitive::u64,
                pub hash: ::subxt::utils::H256,
            }
        }
        pub mod pallet_identity {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Identity pallet declaration."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Add a registrar to the system."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `T::RegistrarOrigin`."]
                    #[doc = ""]
                    #[doc = "- `account`: the account of the registrar."]
                    #[doc = ""]
                    #[doc = "Emits `RegistrarAdded` if successful."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."]
                    add_registrar {
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set an account's identity information and reserve the appropriate deposit."]
                    #[doc = ""]
                    #[doc = "If the account already has identity information, the deposit is taken as part payment"]
                    #[doc = "for the new deposit."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `info`: The identity information."]
                    #[doc = ""]
                    #[doc = "Emits `IdentitySet` if successful."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(X + X' + R)`"]
                    #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)"]
                    #[doc = "  - where `R` judgements-count (registrar-count-bounded)"]
                    set_identity {
                        info:
                            ::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Set the sub-accounts of the sender."]
                    #[doc = ""]
                    #[doc = "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned"]
                    #[doc = "and an amount `SubAccountDeposit` will be reserved for each item in `subs`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "identity."]
                    #[doc = ""]
                    #[doc = "- `subs`: The identity's (new) sub-accounts."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(P + S)`"]
                    #[doc = "  - where `P` old-subs-count (hard- and deposit-bounded)."]
                    #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
                    set_subs {
                        subs: ::std::vec::Vec<(
                            runtime_types::account::AccountId20,
                            runtime_types::pallet_identity::types::Data,
                        )>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Clear an account's identity info and all sub-accounts and return all deposits."]
                    #[doc = ""]
                    #[doc = "Payment: All reserved balances on the account are returned."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "identity."]
                    #[doc = ""]
                    #[doc = "Emits `IdentityCleared` if successful."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(R + S + X)`"]
                    #[doc = "  - where `R` registrar-count (governance-bounded)."]
                    #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
                    #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
                    clear_identity,
                    #[codec(index = 4)]
                    #[doc = "Request a judgement from a registrar."]
                    #[doc = ""]
                    #[doc = "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement"]
                    #[doc = "given."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                    #[doc = "registered identity."]
                    #[doc = ""]
                    #[doc = "- `reg_index`: The index of the registrar whose judgement is requested."]
                    #[doc = "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:"]
                    #[doc = ""]
                    #[doc = "```nocompile"]
                    #[doc = "Self::registrars().get(reg_index).unwrap().fee"]
                    #[doc = "```"]
                    #[doc = ""]
                    #[doc = "Emits `JudgementRequested` if successful."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(R + X)`."]
                    #[doc = "  - where `R` registrar-count (governance-bounded)."]
                    #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
                    request_judgement {
                        #[codec(compact)]
                        reg_index: ::core::primitive::u32,
                        #[codec(compact)]
                        max_fee: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Cancel a previous request."]
                    #[doc = ""]
                    #[doc = "Payment: A previously reserved deposit is returned on success."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                    #[doc = "registered identity."]
                    #[doc = ""]
                    #[doc = "- `reg_index`: The index of the registrar whose judgement is no longer requested."]
                    #[doc = ""]
                    #[doc = "Emits `JudgementUnrequested` if successful."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(R + X)`."]
                    #[doc = "  - where `R` registrar-count (governance-bounded)."]
                    #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
                    cancel_request { reg_index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "Set the fee required for a judgement to be requested from a registrar."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                    #[doc = "of the registrar whose index is `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                    #[doc = "- `fee`: the new fee."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(R)`."]
                    #[doc = "  - where `R` registrar-count (governance-bounded)."]
                    set_fee {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        #[codec(compact)]
                        fee: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "Change the account associated with a registrar."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                    #[doc = "of the registrar whose index is `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                    #[doc = "- `new`: the new account ID."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(R)`."]
                    #[doc = "  - where `R` registrar-count (governance-bounded)."]
                    set_account_id {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        new: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 8)]
                    #[doc = "Set the field information for a registrar."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                    #[doc = "of the registrar whose index is `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                    #[doc = "- `fields`: the fields that the registrar concerns themselves with."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(R)`."]
                    #[doc = "  - where `R` registrar-count (governance-bounded)."]
                    set_fields {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        fields: runtime_types::pallet_identity::types::BitFlags<
                            runtime_types::pallet_identity::types::IdentityField,
                        >,
                    },
                    #[codec(index = 9)]
                    #[doc = "Provide a judgement for an account's identity."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                    #[doc = "of the registrar whose index is `reg_index`."]
                    #[doc = ""]
                    #[doc = "- `reg_index`: the index of the registrar whose judgement is being made."]
                    #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                    #[doc = "  with a registered identity."]
                    #[doc = "- `judgement`: the judgement of the registrar of index `reg_index` about `target`."]
                    #[doc = "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided."]
                    #[doc = ""]
                    #[doc = "Emits `JudgementGiven` if successful."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(R + X)`."]
                    #[doc = "  - where `R` registrar-count (governance-bounded)."]
                    #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
                    provide_judgement {
                        #[codec(compact)]
                        reg_index: ::core::primitive::u32,
                        target: runtime_types::account::AccountId20,
                        judgement: runtime_types::pallet_identity::types::Judgement<
                            ::core::primitive::u128,
                        >,
                        identity: ::subxt::utils::H256,
                    },
                    #[codec(index = 10)]
                    #[doc = "Remove an account's identity and sub-account information and slash the deposits."]
                    #[doc = ""]
                    #[doc = "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by"]
                    #[doc = "`Slash`. Verification request deposits are not returned; they should be cancelled"]
                    #[doc = "manually using `cancel_request`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
                    #[doc = ""]
                    #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                    #[doc = "  with a registered identity."]
                    #[doc = ""]
                    #[doc = "Emits `IdentityKilled` if successful."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(R + S + X)`"]
                    #[doc = "  - where `R` registrar-count (governance-bounded)."]
                    #[doc = "  - where `S` subs-count (hard- and deposit-bounded)."]
                    #[doc = "  - where `X` additional-field-count (deposit-bounded and code-bounded)."]
                    kill_identity {
                        target: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 11)]
                    #[doc = "Add the given account to the sender's subs."]
                    #[doc = ""]
                    #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                    #[doc = "to the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "sub identity of `sub`."]
                    add_sub {
                        sub: runtime_types::account::AccountId20,
                        data: runtime_types::pallet_identity::types::Data,
                    },
                    #[codec(index = 12)]
                    #[doc = "Alter the associated name of the given sub-account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "sub identity of `sub`."]
                    rename_sub {
                        sub: runtime_types::account::AccountId20,
                        data: runtime_types::pallet_identity::types::Data,
                    },
                    #[codec(index = 13)]
                    #[doc = "Remove the given account from the sender's subs."]
                    #[doc = ""]
                    #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                    #[doc = "to the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "sub identity of `sub`."]
                    remove_sub {
                        sub: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 14)]
                    #[doc = "Remove the sender as a sub-account."]
                    #[doc = ""]
                    #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                    #[doc = "to the sender (*not* the original depositor)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "super-identity."]
                    #[doc = ""]
                    #[doc = "NOTE: This should not normally be used, but is provided in the case that the non-"]
                    #[doc = "controller of an account is maliciously registered as a sub-account."]
                    quit_sub,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many subs-accounts."]
                    TooManySubAccounts,
                    #[codec(index = 1)]
                    #[doc = "Account isn't found."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Account isn't named."]
                    NotNamed,
                    #[codec(index = 3)]
                    #[doc = "Empty index."]
                    EmptyIndex,
                    #[codec(index = 4)]
                    #[doc = "Fee is changed."]
                    FeeChanged,
                    #[codec(index = 5)]
                    #[doc = "No identity found."]
                    NoIdentity,
                    #[codec(index = 6)]
                    #[doc = "Sticky judgement."]
                    StickyJudgement,
                    #[codec(index = 7)]
                    #[doc = "Judgement given."]
                    JudgementGiven,
                    #[codec(index = 8)]
                    #[doc = "Invalid judgement."]
                    InvalidJudgement,
                    #[codec(index = 9)]
                    #[doc = "The index is invalid."]
                    InvalidIndex,
                    #[codec(index = 10)]
                    #[doc = "The target is invalid."]
                    InvalidTarget,
                    #[codec(index = 11)]
                    #[doc = "Too many additional fields."]
                    TooManyFields,
                    #[codec(index = 12)]
                    #[doc = "Maximum amount of registrars reached. Cannot add any more."]
                    TooManyRegistrars,
                    #[codec(index = 13)]
                    #[doc = "Account ID is already named."]
                    AlreadyClaimed,
                    #[codec(index = 14)]
                    #[doc = "Sender is not a sub-account."]
                    NotSub,
                    #[codec(index = 15)]
                    #[doc = "Sub-account isn't owned by sender."]
                    NotOwned,
                    #[codec(index = 16)]
                    #[doc = "The provided judgement was for a different identity."]
                    JudgementForDifferentIdentity,
                    #[codec(index = 17)]
                    #[doc = "Error that occurs when there is an issue paying for judgement."]
                    JudgementPaymentFailed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A name was set or reset (which will remove all judgements)."]
                    IdentitySet {
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "A name was cleared, and the given balance returned."]
                    IdentityCleared {
                        who: runtime_types::account::AccountId20,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "A name was removed and the given balance slashed."]
                    IdentityKilled {
                        who: runtime_types::account::AccountId20,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A judgement was asked from a registrar."]
                    JudgementRequested {
                        who: runtime_types::account::AccountId20,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "A judgement request was retracted."]
                    JudgementUnrequested {
                        who: runtime_types::account::AccountId20,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "A judgement was given by a registrar."]
                    JudgementGiven {
                        target: runtime_types::account::AccountId20,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "A registrar was added."]
                    RegistrarAdded {
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "A sub-identity was added to an identity and the deposit paid."]
                    SubIdentityAdded {
                        sub: runtime_types::account::AccountId20,
                        main: runtime_types::account::AccountId20,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "A sub-identity was removed from an identity and the deposit freed."]
                    SubIdentityRemoved {
                        sub: runtime_types::account::AccountId20,
                        main: runtime_types::account::AccountId20,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
                    #[doc = "main identity account to the sub-identity account."]
                    SubIdentityRevoked {
                        sub: runtime_types::account::AccountId20,
                        main: runtime_types::account::AccountId20,
                        deposit: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BitFlags<_0>(
                    pub ::core::primitive::u64,
                    #[codec(skip)] pub ::core::marker::PhantomData<_0>,
                );
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Data {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Raw0([::core::primitive::u8; 0usize]),
                    #[codec(index = 2)]
                    Raw1([::core::primitive::u8; 1usize]),
                    #[codec(index = 3)]
                    Raw2([::core::primitive::u8; 2usize]),
                    #[codec(index = 4)]
                    Raw3([::core::primitive::u8; 3usize]),
                    #[codec(index = 5)]
                    Raw4([::core::primitive::u8; 4usize]),
                    #[codec(index = 6)]
                    Raw5([::core::primitive::u8; 5usize]),
                    #[codec(index = 7)]
                    Raw6([::core::primitive::u8; 6usize]),
                    #[codec(index = 8)]
                    Raw7([::core::primitive::u8; 7usize]),
                    #[codec(index = 9)]
                    Raw8([::core::primitive::u8; 8usize]),
                    #[codec(index = 10)]
                    Raw9([::core::primitive::u8; 9usize]),
                    #[codec(index = 11)]
                    Raw10([::core::primitive::u8; 10usize]),
                    #[codec(index = 12)]
                    Raw11([::core::primitive::u8; 11usize]),
                    #[codec(index = 13)]
                    Raw12([::core::primitive::u8; 12usize]),
                    #[codec(index = 14)]
                    Raw13([::core::primitive::u8; 13usize]),
                    #[codec(index = 15)]
                    Raw14([::core::primitive::u8; 14usize]),
                    #[codec(index = 16)]
                    Raw15([::core::primitive::u8; 15usize]),
                    #[codec(index = 17)]
                    Raw16([::core::primitive::u8; 16usize]),
                    #[codec(index = 18)]
                    Raw17([::core::primitive::u8; 17usize]),
                    #[codec(index = 19)]
                    Raw18([::core::primitive::u8; 18usize]),
                    #[codec(index = 20)]
                    Raw19([::core::primitive::u8; 19usize]),
                    #[codec(index = 21)]
                    Raw20([::core::primitive::u8; 20usize]),
                    #[codec(index = 22)]
                    Raw21([::core::primitive::u8; 21usize]),
                    #[codec(index = 23)]
                    Raw22([::core::primitive::u8; 22usize]),
                    #[codec(index = 24)]
                    Raw23([::core::primitive::u8; 23usize]),
                    #[codec(index = 25)]
                    Raw24([::core::primitive::u8; 24usize]),
                    #[codec(index = 26)]
                    Raw25([::core::primitive::u8; 25usize]),
                    #[codec(index = 27)]
                    Raw26([::core::primitive::u8; 26usize]),
                    #[codec(index = 28)]
                    Raw27([::core::primitive::u8; 27usize]),
                    #[codec(index = 29)]
                    Raw28([::core::primitive::u8; 28usize]),
                    #[codec(index = 30)]
                    Raw29([::core::primitive::u8; 29usize]),
                    #[codec(index = 31)]
                    Raw30([::core::primitive::u8; 30usize]),
                    #[codec(index = 32)]
                    Raw31([::core::primitive::u8; 31usize]),
                    #[codec(index = 33)]
                    Raw32([::core::primitive::u8; 32usize]),
                    #[codec(index = 34)]
                    BlakeTwo256([::core::primitive::u8; 32usize]),
                    #[codec(index = 35)]
                    Sha256([::core::primitive::u8; 32usize]),
                    #[codec(index = 36)]
                    Keccak256([::core::primitive::u8; 32usize]),
                    #[codec(index = 37)]
                    ShaThree256([::core::primitive::u8; 32usize]),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum IdentityField {
                    #[codec(index = 1)]
                    Display,
                    #[codec(index = 2)]
                    Legal,
                    #[codec(index = 4)]
                    Web,
                    #[codec(index = 8)]
                    Riot,
                    #[codec(index = 16)]
                    Email,
                    #[codec(index = 32)]
                    PgpFingerprint,
                    #[codec(index = 64)]
                    Image,
                    #[codec(index = 128)]
                    Twitter,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct IdentityInfo {
                    pub additional: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        runtime_types::pallet_identity::types::Data,
                        runtime_types::pallet_identity::types::Data,
                    )>,
                    pub display: runtime_types::pallet_identity::types::Data,
                    pub legal: runtime_types::pallet_identity::types::Data,
                    pub web: runtime_types::pallet_identity::types::Data,
                    pub riot: runtime_types::pallet_identity::types::Data,
                    pub email: runtime_types::pallet_identity::types::Data,
                    pub pgp_fingerprint: ::core::option::Option<[::core::primitive::u8; 20usize]>,
                    pub image: runtime_types::pallet_identity::types::Data,
                    pub twitter: runtime_types::pallet_identity::types::Data,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Judgement<_0> {
                    #[codec(index = 0)]
                    Unknown,
                    #[codec(index = 1)]
                    FeePaid(_0),
                    #[codec(index = 2)]
                    Reasonable,
                    #[codec(index = 3)]
                    KnownGood,
                    #[codec(index = 4)]
                    OutOfDate,
                    #[codec(index = 5)]
                    LowQuality,
                    #[codec(index = 6)]
                    Erroneous,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RegistrarInfo<_0, _1> {
                    pub account: _1,
                    pub fee: _0,
                    pub fields: runtime_types::pallet_identity::types::BitFlags<
                        runtime_types::pallet_identity::types::IdentityField,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Registration<_0> {
                    pub judgements: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        runtime_types::pallet_identity::types::Judgement<_0>,
                    )>,
                    pub deposit: _0,
                    pub info: runtime_types::pallet_identity::types::IdentityInfo,
                }
            }
        }
        pub mod pallet_maintenance_mode {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Place the chain in maintenance mode"]
                    #[doc = ""]
                    #[doc = "Weight cost is:"]
                    #[doc = "* One DB read to ensure we're not already in maintenance mode"]
                    #[doc = "* Three DB writes - 1 for the mode, 1 for suspending xcm execution, 1 for the event"]
                    enter_maintenance_mode,
                    #[codec(index = 1)]
                    #[doc = "Return the chain to normal operating mode"]
                    #[doc = ""]
                    #[doc = "Weight cost is:"]
                    #[doc = "* One DB read to ensure we're in maintenance mode"]
                    #[doc = "* Three DB writes - 1 for the mode, 1 for resuming xcm execution, 1 for the event"]
                    resume_normal_operation,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "An error that can occur while executing this pallet's extrinsics."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The chain cannot enter maintenance mode because it is already in maintenance mode"]
                    AlreadyInMaintenanceMode,
                    #[codec(index = 1)]
                    #[doc = "The chain cannot resume normal operation because it is not in maintenance mode"]
                    NotInMaintenanceMode,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The chain was put into Maintenance Mode"]
                    EnteredMaintenanceMode,
                    #[codec(index = 1)]
                    #[doc = "The chain returned to its normal operating state"]
                    NormalOperationResumed,
                    #[codec(index = 2)]
                    #[doc = "The call to suspend on_idle XCM execution failed with inner error"]
                    FailedToSuspendIdleXcmExecution {
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 3)]
                    #[doc = "The call to resume on_idle XCM execution failed with inner error"]
                    FailedToResumeIdleXcmExecution {
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                }
            }
        }
        pub mod pallet_migrations {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Missing preimage in original democracy storage"]
                    PreimageMissing,
                    #[codec(index = 1)]
                    #[doc = "Provided upper bound is too low."]
                    WrongUpperBound,
                    #[codec(index = 2)]
                    #[doc = "Preimage is larger than the new max size."]
                    PreimageIsTooBig,
                    #[codec(index = 3)]
                    #[doc = "Preimage already exists in the new storage."]
                    PreimageAlreadyExists,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Runtime upgrade started"]
                    RuntimeUpgradeStarted,
                    #[codec(index = 1)]
                    #[doc = "Runtime upgrade completed"]
                    RuntimeUpgradeCompleted {
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    #[doc = "Migration started"]
                    MigrationStarted {
                        migration_name: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Migration completed"]
                    MigrationCompleted {
                        migration_name: ::std::vec::Vec<::core::primitive::u8>,
                        consumed_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 4)]
                    #[doc = "XCM execution suspension failed with inner error"]
                    FailedToSuspendIdleXcmExecution {
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 5)]
                    #[doc = "XCM execution resume failed with inner error"]
                    FailedToResumeIdleXcmExecution {
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                }
            }
        }
        pub mod pallet_moonbeam_orbiters {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Add an orbiter in a collator pool"]
                    collator_add_orbiter {
                        orbiter: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "Remove an orbiter from the caller collator pool"]
                    collator_remove_orbiter {
                        orbiter: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 2)]
                    #[doc = "Remove the caller from the specified collator pool"]
                    orbiter_leave_collator_pool {
                        collator: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 3)]
                    #[doc = "Registering as an orbiter"]
                    orbiter_register,
                    #[codec(index = 4)]
                    #[doc = "Deregistering from orbiters"]
                    orbiter_unregister {
                        collators_pool_count: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Add a collator to orbiters program."]
                    add_collator {
                        collator: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 6)]
                    #[doc = "Remove a collator from orbiters program."]
                    remove_collator {
                        collator: runtime_types::account::AccountId20,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "An error that can occur while executing this pallet's extrinsics."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The collator is already added in orbiters program."]
                    CollatorAlreadyAdded,
                    #[codec(index = 1)]
                    #[doc = "This collator is not in orbiters program."]
                    CollatorNotFound,
                    #[codec(index = 2)]
                    #[doc = "There are already too many orbiters associated with this collator."]
                    CollatorPoolTooLarge,
                    #[codec(index = 3)]
                    #[doc = "There are more collator pools than the number specified in the parameter."]
                    CollatorsPoolCountTooLow,
                    #[codec(index = 4)]
                    #[doc = "The minimum deposit required to register as an orbiter has not yet been included in the"]
                    #[doc = "onchain storage"]
                    MinOrbiterDepositNotSet,
                    #[codec(index = 5)]
                    #[doc = "This orbiter is already associated with this collator."]
                    OrbiterAlreadyInPool,
                    #[codec(index = 6)]
                    #[doc = "This orbiter has not made a deposit"]
                    OrbiterDepositNotFound,
                    #[codec(index = 7)]
                    #[doc = "This orbiter is not found"]
                    OrbiterNotFound,
                    #[codec(index = 8)]
                    #[doc = "The orbiter is still at least in one pool"]
                    OrbiterStillInAPool,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An orbiter join a collator pool"]
                    OrbiterJoinCollatorPool {
                        collator: runtime_types::account::AccountId20,
                        orbiter: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "An orbiter leave a collator pool"]
                    OrbiterLeaveCollatorPool {
                        collator: runtime_types::account::AccountId20,
                        orbiter: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 2)]
                    #[doc = "Paid the orbiter account the balance as liquid rewards."]
                    OrbiterRewarded {
                        account: runtime_types::account::AccountId20,
                        rewards: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    OrbiterRotation {
                        collator: runtime_types::account::AccountId20,
                        old_orbiter: ::core::option::Option<runtime_types::account::AccountId20>,
                        new_orbiter: ::core::option::Option<runtime_types::account::AccountId20>,
                    },
                    #[codec(index = 4)]
                    #[doc = "An orbiter has registered"]
                    OrbiterRegistered {
                        account: runtime_types::account::AccountId20,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "An orbiter has unregistered"]
                    OrbiterUnregistered {
                        account: runtime_types::account::AccountId20,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CollatorPoolInfo<_0> {
                    pub orbiters: ::std::vec::Vec<_0>,
                    pub maybe_current_orbiter: ::core::option::Option<
                        runtime_types::pallet_moonbeam_orbiters::types::CurrentOrbiter<_0>,
                    >,
                    pub next_orbiter: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CurrentOrbiter<_0> {
                    pub account_id: _0,
                    pub removed: ::core::primitive::bool,
                }
            }
        }
        pub mod pallet_multisig {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
                    #[doc = "multi-signature, but do not participate in the approval process."]
                    #[doc = "- `call`: The call to be executed."]
                    #[doc = ""]
                    #[doc = "Result is equivalent to the dispatched result."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
                    as_multi_threshold_1 {
                        other_signatories: ::std::vec::Vec<runtime_types::account::AccountId20>,
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                    #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                    #[doc = ""]
                    #[doc = "If there are enough, then dispatch the call."]
                    #[doc = ""]
                    #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                    #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                    #[doc = "is cancelled."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                    #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                    #[doc = "transaction index) of the first approval transaction."]
                    #[doc = "- `call`: The call to be executed."]
                    #[doc = ""]
                    #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
                    #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
                    #[doc = ""]
                    #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
                    #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
                    #[doc = "may be found in the deposited `MultisigExecuted` event."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(S + Z + Call)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                    #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                    #[doc = "- One event."]
                    #[doc = "- The weight of the `call`."]
                    #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                    #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                    as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<runtime_types::account::AccountId20>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                    #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                    #[doc = ""]
                    #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                    #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                    #[doc = "is cancelled."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                    #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                    #[doc = "transaction index) of the first approval transaction."]
                    #[doc = "- `call_hash`: The hash of the call to be executed."]
                    #[doc = ""]
                    #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(S)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                    #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                    #[doc = "- One event."]
                    #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                    #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                    approve_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<runtime_types::account::AccountId20>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call_hash: [::core::primitive::u8; 32usize],
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 3)]
                    #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
                    #[doc = "for this operation will be unreserved on success."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
                    #[doc = "transaction for this dispatch."]
                    #[doc = "- `call_hash`: The hash of the call to be executed."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(S)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- One event."]
                    #[doc = "- I/O: 1 read `O(S)`, one remove."]
                    #[doc = "- Storage: removes one item."]
                    cancel_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<runtime_types::account::AccountId20>,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Threshold must be 2 or greater."]
                    MinimumThreshold,
                    #[codec(index = 1)]
                    #[doc = "Call is already approved by this signatory."]
                    AlreadyApproved,
                    #[codec(index = 2)]
                    #[doc = "Call doesn't need any (more) approvals."]
                    NoApprovalsNeeded,
                    #[codec(index = 3)]
                    #[doc = "There are too few signatories in the list."]
                    TooFewSignatories,
                    #[codec(index = 4)]
                    #[doc = "There are too many signatories in the list."]
                    TooManySignatories,
                    #[codec(index = 5)]
                    #[doc = "The signatories were provided out of order; they should be ordered."]
                    SignatoriesOutOfOrder,
                    #[codec(index = 6)]
                    #[doc = "The sender was contained in the other signatories; it shouldn't be."]
                    SenderInSignatories,
                    #[codec(index = 7)]
                    #[doc = "Multisig operation not found when attempting to cancel."]
                    NotFound,
                    #[codec(index = 8)]
                    #[doc = "Only the account that originally created the multisig is able to cancel it."]
                    NotOwner,
                    #[codec(index = 9)]
                    #[doc = "No timepoint was given, yet the multisig operation is already underway."]
                    NoTimepoint,
                    #[codec(index = 10)]
                    #[doc = "A different timepoint was given to the multisig operation that is underway."]
                    WrongTimepoint,
                    #[codec(index = 11)]
                    #[doc = "A timepoint was given, yet no multisig operation is underway."]
                    UnexpectedTimepoint,
                    #[codec(index = 12)]
                    #[doc = "The maximum weight information provided was too low."]
                    MaxWeightTooLow,
                    #[codec(index = 13)]
                    #[doc = "The data to be stored is already stored."]
                    AlreadyStored,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new multisig operation has begun."]
                    NewMultisig {
                        approving: runtime_types::account::AccountId20,
                        multisig: runtime_types::account::AccountId20,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    #[doc = "A multisig operation has been approved by someone."]
                    MultisigApproval {
                        approving: runtime_types::account::AccountId20,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: runtime_types::account::AccountId20,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    #[doc = "A multisig operation has been executed."]
                    MultisigExecuted {
                        approving: runtime_types::account::AccountId20,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: runtime_types::account::AccountId20,
                        call_hash: [::core::primitive::u8; 32usize],
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    #[doc = "A multisig operation has been cancelled."]
                    MultisigCancelled {
                        cancelling: runtime_types::account::AccountId20,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: runtime_types::account::AccountId20,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Multisig<_0, _1, _2> {
                pub when: runtime_types::pallet_multisig::Timepoint<_0>,
                pub deposit: _1,
                pub depositor: _2,
                pub approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<_2>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Timepoint<_0> {
                pub height: _0,
                pub index: ::core::primitive::u32,
            }
        }
        pub mod pallet_parachain_staking {
            use super::runtime_types;
            pub mod auto_compound {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AutoCompoundConfig<_0> {
                    pub delegator: _0,
                    pub value: runtime_types::sp_arithmetic::per_things::Percent,
                }
            }
            pub mod delegation_requests {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelledScheduledRequest < _0 > { pub when_executable : :: core :: primitive :: u32 , pub action : runtime_types :: pallet_parachain_staking :: delegation_requests :: DelegationAction < _0 > , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum DelegationAction<_0> {
                    #[codec(index = 0)]
                    Revoke(_0),
                    #[codec(index = 1)]
                    Decrease(_0),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ScheduledRequest < _0 , _1 > { pub delegator : _0 , pub when_executable : :: core :: primitive :: u32 , pub action : runtime_types :: pallet_parachain_staking :: delegation_requests :: DelegationAction < _1 > , }
            }
            pub mod inflation {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InflationInfo<_0> {
                    pub expect: runtime_types::pallet_parachain_staking::inflation::Range<_0>,
                    pub annual: runtime_types::pallet_parachain_staking::inflation::Range<
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    >,
                    pub round: runtime_types::pallet_parachain_staking::inflation::Range<
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Range<_0> {
                    pub min: _0,
                    pub ideal: _0,
                    pub max: _0,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the expectations for total staked. These expectations determine the issuance for"]
                    #[doc = "the round according to logic in `fn compute_issuance`"]
                    set_staking_expectations {
                        expectations: runtime_types::pallet_parachain_staking::inflation::Range<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set the annual inflation rate to derive per-round inflation"]
                    set_inflation {
                        schedule: runtime_types::pallet_parachain_staking::inflation::Range<
                            runtime_types::sp_arithmetic::per_things::Perbill,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "Set the account that will hold funds set aside for parachain bond"]
                    set_parachain_bond_account {
                        new: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 3)]
                    #[doc = "Set the percent of inflation set aside for parachain bond"]
                    set_parachain_bond_reserve_percent {
                        new: runtime_types::sp_arithmetic::per_things::Percent,
                    },
                    #[codec(index = 4)]
                    #[doc = "Set the total number of collator candidates selected per round"]
                    #[doc = "- changes are not applied until the start of the next round"]
                    set_total_selected { new: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "Set the commission for all collators"]
                    set_collator_commission {
                        new: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 6)]
                    #[doc = "Set blocks per round"]
                    #[doc = "- if called with `new` less than length of current round, will transition immediately"]
                    #[doc = "in the next block"]
                    #[doc = "- also updates per-round inflation config"]
                    set_blocks_per_round { new: ::core::primitive::u32 },
                    #[codec(index = 7)]
                    #[doc = "Join the set of collator candidates"]
                    join_candidates {
                        bond: ::core::primitive::u128,
                        candidate_count: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Request to leave the set of candidates. If successful, the account is immediately"]
                    #[doc = "removed from the candidate pool to prevent selection as a collator."]
                    schedule_leave_candidates {
                        candidate_count: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    #[doc = "Execute leave candidates request"]
                    execute_leave_candidates {
                        candidate: runtime_types::account::AccountId20,
                        candidate_delegation_count: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    #[doc = "Cancel open request to leave candidates"]
                    #[doc = "- only callable by collator account"]
                    #[doc = "- result upon successful call is the candidate is active in the candidate pool"]
                    cancel_leave_candidates {
                        candidate_count: ::core::primitive::u32,
                    },
                    #[codec(index = 11)]
                    #[doc = "Temporarily leave the set of collator candidates without unbonding"]
                    go_offline,
                    #[codec(index = 12)]
                    #[doc = "Rejoin the set of collator candidates if previously had called `go_offline`"]
                    go_online,
                    #[codec(index = 13)]
                    #[doc = "Increase collator candidate self bond by `more`"]
                    candidate_bond_more { more: ::core::primitive::u128 },
                    #[codec(index = 14)]
                    #[doc = "Request by collator candidate to decrease self bond by `less`"]
                    schedule_candidate_bond_less { less: ::core::primitive::u128 },
                    #[codec(index = 15)]
                    #[doc = "Execute pending request to adjust the collator candidate self bond"]
                    execute_candidate_bond_less {
                        candidate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 16)]
                    #[doc = "Cancel pending request to adjust the collator candidate self bond"]
                    cancel_candidate_bond_less,
                    #[codec(index = 17)]
                    #[doc = "DEPRECATED use delegateWithAutoCompound"]
                    #[doc = "If caller is not a delegator and not a collator, then join the set of delegators"]
                    #[doc = "If caller is a delegator, then makes delegation to change their delegation state"]
                    delegate {
                        candidate: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                        candidate_delegation_count: ::core::primitive::u32,
                        delegation_count: ::core::primitive::u32,
                    },
                    #[codec(index = 18)]
                    #[doc = "If caller is not a delegator and not a collator, then join the set of delegators"]
                    #[doc = "If caller is a delegator, then makes delegation to change their delegation state"]
                    #[doc = "Sets the auto-compound config for the delegation"]
                    delegate_with_auto_compound {
                        candidate: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                        auto_compound: runtime_types::sp_arithmetic::per_things::Percent,
                        candidate_delegation_count: ::core::primitive::u32,
                        candidate_auto_compounding_delegation_count: ::core::primitive::u32,
                        delegation_count: ::core::primitive::u32,
                    },
                    #[codec(index = 19)]
                    #[doc = "REMOVED, was schedule_leave_delegators"]
                    removed_call_19,
                    #[codec(index = 20)]
                    #[doc = "REMOVED, was execute_leave_delegators"]
                    removed_call_20,
                    #[codec(index = 21)]
                    #[doc = "REMOVED, was cancel_leave_delegators"]
                    removed_call_21,
                    #[codec(index = 22)]
                    #[doc = "Request to revoke an existing delegation. If successful, the delegation is scheduled"]
                    #[doc = "to be allowed to be revoked via the `execute_delegation_request` extrinsic."]
                    #[doc = "The delegation receives no rewards for the rounds while a revoke is pending."]
                    #[doc = "A revoke may not be performed if any other scheduled request is pending."]
                    schedule_revoke_delegation {
                        collator: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 23)]
                    #[doc = "Bond more for delegators wrt a specific collator candidate."]
                    delegator_bond_more {
                        candidate: runtime_types::account::AccountId20,
                        more: ::core::primitive::u128,
                    },
                    #[codec(index = 24)]
                    #[doc = "Request bond less for delegators wrt a specific collator candidate. The delegation's"]
                    #[doc = "rewards for rounds while the request is pending use the reduced bonded amount."]
                    #[doc = "A bond less may not be performed if any other scheduled request is pending."]
                    schedule_delegator_bond_less {
                        candidate: runtime_types::account::AccountId20,
                        less: ::core::primitive::u128,
                    },
                    #[codec(index = 25)]
                    #[doc = "Execute pending request to change an existing delegation"]
                    execute_delegation_request {
                        delegator: runtime_types::account::AccountId20,
                        candidate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 26)]
                    #[doc = "Cancel request to change an existing delegation."]
                    cancel_delegation_request {
                        candidate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 27)]
                    #[doc = "Sets the auto-compounding reward percentage for a delegation."]
                    set_auto_compound {
                        candidate: runtime_types::account::AccountId20,
                        value: runtime_types::sp_arithmetic::per_things::Percent,
                        candidate_auto_compounding_delegation_count_hint: ::core::primitive::u32,
                        delegation_count_hint: ::core::primitive::u32,
                    },
                    #[codec(index = 28)]
                    #[doc = "Hotfix to remove existing empty entries for candidates that have left."]
                    hotfix_remove_delegation_requests_exited_candidates {
                        candidates: ::std::vec::Vec<runtime_types::account::AccountId20>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    DelegatorDNE,
                    #[codec(index = 1)]
                    DelegatorDNEinTopNorBottom,
                    #[codec(index = 2)]
                    DelegatorDNEInDelegatorSet,
                    #[codec(index = 3)]
                    CandidateDNE,
                    #[codec(index = 4)]
                    DelegationDNE,
                    #[codec(index = 5)]
                    DelegatorExists,
                    #[codec(index = 6)]
                    CandidateExists,
                    #[codec(index = 7)]
                    CandidateBondBelowMin,
                    #[codec(index = 8)]
                    InsufficientBalance,
                    #[codec(index = 9)]
                    DelegatorBondBelowMin,
                    #[codec(index = 10)]
                    DelegationBelowMin,
                    #[codec(index = 11)]
                    AlreadyOffline,
                    #[codec(index = 12)]
                    AlreadyActive,
                    #[codec(index = 13)]
                    DelegatorAlreadyLeaving,
                    #[codec(index = 14)]
                    DelegatorNotLeaving,
                    #[codec(index = 15)]
                    DelegatorCannotLeaveYet,
                    #[codec(index = 16)]
                    CannotDelegateIfLeaving,
                    #[codec(index = 17)]
                    CandidateAlreadyLeaving,
                    #[codec(index = 18)]
                    CandidateNotLeaving,
                    #[codec(index = 19)]
                    CandidateCannotLeaveYet,
                    #[codec(index = 20)]
                    CannotGoOnlineIfLeaving,
                    #[codec(index = 21)]
                    ExceedMaxDelegationsPerDelegator,
                    #[codec(index = 22)]
                    AlreadyDelegatedCandidate,
                    #[codec(index = 23)]
                    InvalidSchedule,
                    #[codec(index = 24)]
                    CannotSetBelowMin,
                    #[codec(index = 25)]
                    RoundLengthMustBeGreaterThanTotalSelectedCollators,
                    #[codec(index = 26)]
                    NoWritingSameValue,
                    #[codec(index = 27)]
                    TooLowCandidateCountWeightHintJoinCandidates,
                    #[codec(index = 28)]
                    TooLowCandidateCountWeightHintCancelLeaveCandidates,
                    #[codec(index = 29)]
                    TooLowCandidateCountToLeaveCandidates,
                    #[codec(index = 30)]
                    TooLowDelegationCountToDelegate,
                    #[codec(index = 31)]
                    TooLowCandidateDelegationCountToDelegate,
                    #[codec(index = 32)]
                    TooLowCandidateDelegationCountToLeaveCandidates,
                    #[codec(index = 33)]
                    TooLowDelegationCountToLeaveDelegators,
                    #[codec(index = 34)]
                    PendingCandidateRequestsDNE,
                    #[codec(index = 35)]
                    PendingCandidateRequestAlreadyExists,
                    #[codec(index = 36)]
                    PendingCandidateRequestNotDueYet,
                    #[codec(index = 37)]
                    PendingDelegationRequestDNE,
                    #[codec(index = 38)]
                    PendingDelegationRequestAlreadyExists,
                    #[codec(index = 39)]
                    PendingDelegationRequestNotDueYet,
                    #[codec(index = 40)]
                    CannotDelegateLessThanOrEqualToLowestBottomWhenFull,
                    #[codec(index = 41)]
                    PendingDelegationRevoke,
                    #[codec(index = 42)]
                    TooLowDelegationCountToAutoCompound,
                    #[codec(index = 43)]
                    TooLowCandidateAutoCompoundingDelegationCountToAutoCompound,
                    #[codec(index = 44)]
                    TooLowCandidateAutoCompoundingDelegationCountToDelegate,
                    #[codec(index = 45)]
                    TooLowCandidateAutoCompoundingDelegationCountToLeaveCandidates,
                    #[codec(index = 46)]
                    TooLowCandidateCountWeightHint,
                    #[codec(index = 47)]
                    TooLowCandidateCountWeightHintGoOffline,
                    #[codec(index = 48)]
                    CandidateLimitReached,
                    #[codec(index = 49)]
                    CannotSetAboveMaxCandidates,
                    #[codec(index = 50)]
                    RemovedCall,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    # [codec (index = 0)] # [doc = "Started new round."] NewRound { starting_block : :: core :: primitive :: u32 , round : :: core :: primitive :: u32 , selected_collators_number : :: core :: primitive :: u32 , total_balance : :: core :: primitive :: u128 , } , # [codec (index = 1)] # [doc = "Account joined the set of collator candidates."] JoinedCollatorCandidates { account : runtime_types :: account :: AccountId20 , amount_locked : :: core :: primitive :: u128 , new_total_amt_locked : :: core :: primitive :: u128 , } , # [codec (index = 2)] # [doc = "Candidate selected for collators. Total Exposed Amount includes all delegations."] CollatorChosen { round : :: core :: primitive :: u32 , collator_account : runtime_types :: account :: AccountId20 , total_exposed_amount : :: core :: primitive :: u128 , } , # [codec (index = 3)] # [doc = "Candidate requested to decrease a self bond."] CandidateBondLessRequested { candidate : runtime_types :: account :: AccountId20 , amount_to_decrease : :: core :: primitive :: u128 , execute_round : :: core :: primitive :: u32 , } , # [codec (index = 4)] # [doc = "Candidate has increased a self bond."] CandidateBondedMore { candidate : runtime_types :: account :: AccountId20 , amount : :: core :: primitive :: u128 , new_total_bond : :: core :: primitive :: u128 , } , # [codec (index = 5)] # [doc = "Candidate has decreased a self bond."] CandidateBondedLess { candidate : runtime_types :: account :: AccountId20 , amount : :: core :: primitive :: u128 , new_bond : :: core :: primitive :: u128 , } , # [codec (index = 6)] # [doc = "Candidate temporarily leave the set of collator candidates without unbonding."] CandidateWentOffline { candidate : runtime_types :: account :: AccountId20 , } , # [codec (index = 7)] # [doc = "Candidate rejoins the set of collator candidates."] CandidateBackOnline { candidate : runtime_types :: account :: AccountId20 , } , # [codec (index = 8)] # [doc = "Candidate has requested to leave the set of candidates."] CandidateScheduledExit { exit_allowed_round : :: core :: primitive :: u32 , candidate : runtime_types :: account :: AccountId20 , scheduled_exit : :: core :: primitive :: u32 , } , # [codec (index = 9)] # [doc = "Cancelled request to leave the set of candidates."] CancelledCandidateExit { candidate : runtime_types :: account :: AccountId20 , } , # [codec (index = 10)] # [doc = "Cancelled request to decrease candidate's bond."] CancelledCandidateBondLess { candidate : runtime_types :: account :: AccountId20 , amount : :: core :: primitive :: u128 , execute_round : :: core :: primitive :: u32 , } , # [codec (index = 11)] # [doc = "Candidate has left the set of candidates."] CandidateLeft { ex_candidate : runtime_types :: account :: AccountId20 , unlocked_amount : :: core :: primitive :: u128 , new_total_amt_locked : :: core :: primitive :: u128 , } , # [codec (index = 12)] # [doc = "Delegator requested to decrease a bond for the collator candidate."] DelegationDecreaseScheduled { delegator : runtime_types :: account :: AccountId20 , candidate : runtime_types :: account :: AccountId20 , amount_to_decrease : :: core :: primitive :: u128 , execute_round : :: core :: primitive :: u32 , } , # [codec (index = 13)] DelegationIncreased { delegator : runtime_types :: account :: AccountId20 , candidate : runtime_types :: account :: AccountId20 , amount : :: core :: primitive :: u128 , in_top : :: core :: primitive :: bool , } , # [codec (index = 14)] DelegationDecreased { delegator : runtime_types :: account :: AccountId20 , candidate : runtime_types :: account :: AccountId20 , amount : :: core :: primitive :: u128 , in_top : :: core :: primitive :: bool , } , # [codec (index = 15)] # [doc = "Delegator requested to leave the set of delegators."] DelegatorExitScheduled { round : :: core :: primitive :: u32 , delegator : runtime_types :: account :: AccountId20 , scheduled_exit : :: core :: primitive :: u32 , } , # [codec (index = 16)] # [doc = "Delegator requested to revoke delegation."] DelegationRevocationScheduled { round : :: core :: primitive :: u32 , delegator : runtime_types :: account :: AccountId20 , candidate : runtime_types :: account :: AccountId20 , scheduled_exit : :: core :: primitive :: u32 , } , # [codec (index = 17)] # [doc = "Delegator has left the set of delegators."] DelegatorLeft { delegator : runtime_types :: account :: AccountId20 , unstaked_amount : :: core :: primitive :: u128 , } , # [codec (index = 18)] # [doc = "Delegation revoked."] DelegationRevoked { delegator : runtime_types :: account :: AccountId20 , candidate : runtime_types :: account :: AccountId20 , unstaked_amount : :: core :: primitive :: u128 , } , # [codec (index = 19)] # [doc = "Delegation kicked."] DelegationKicked { delegator : runtime_types :: account :: AccountId20 , candidate : runtime_types :: account :: AccountId20 , unstaked_amount : :: core :: primitive :: u128 , } , # [codec (index = 20)] # [doc = "Cancelled a pending request to exit the set of delegators."] DelegatorExitCancelled { delegator : runtime_types :: account :: AccountId20 , } , # [codec (index = 21)] # [doc = "Cancelled request to change an existing delegation."] CancelledDelegationRequest { delegator : runtime_types :: account :: AccountId20 , cancelled_request : runtime_types :: pallet_parachain_staking :: delegation_requests :: CancelledScheduledRequest < :: core :: primitive :: u128 > , collator : runtime_types :: account :: AccountId20 , } , # [codec (index = 22)] # [doc = "New delegation (increase of the existing one)."] Delegation { delegator : runtime_types :: account :: AccountId20 , locked_amount : :: core :: primitive :: u128 , candidate : runtime_types :: account :: AccountId20 , delegator_position : runtime_types :: pallet_parachain_staking :: types :: DelegatorAdded < :: core :: primitive :: u128 > , auto_compound : runtime_types :: sp_arithmetic :: per_things :: Percent , } , # [codec (index = 23)] # [doc = "Delegation from candidate state has been remove."] DelegatorLeftCandidate { delegator : runtime_types :: account :: AccountId20 , candidate : runtime_types :: account :: AccountId20 , unstaked_amount : :: core :: primitive :: u128 , total_candidate_staked : :: core :: primitive :: u128 , } , # [codec (index = 24)] # [doc = "Paid the account (delegator or collator) the balance as liquid rewards."] Rewarded { account : runtime_types :: account :: AccountId20 , rewards : :: core :: primitive :: u128 , } , # [codec (index = 25)] # [doc = "Transferred to account which holds funds reserved for parachain bond."] ReservedForParachainBond { account : runtime_types :: account :: AccountId20 , value : :: core :: primitive :: u128 , } , # [codec (index = 26)] # [doc = "Account (re)set for parachain bond treasury."] ParachainBondAccountSet { old : runtime_types :: account :: AccountId20 , new : runtime_types :: account :: AccountId20 , } , # [codec (index = 27)] # [doc = "Percent of inflation reserved for parachain bond (re)set."] ParachainBondReservePercentSet { old : runtime_types :: sp_arithmetic :: per_things :: Percent , new : runtime_types :: sp_arithmetic :: per_things :: Percent , } , # [codec (index = 28)] # [doc = "Annual inflation input (first 3) was used to derive new per-round inflation (last 3)"] InflationSet { annual_min : runtime_types :: sp_arithmetic :: per_things :: Perbill , annual_ideal : runtime_types :: sp_arithmetic :: per_things :: Perbill , annual_max : runtime_types :: sp_arithmetic :: per_things :: Perbill , round_min : runtime_types :: sp_arithmetic :: per_things :: Perbill , round_ideal : runtime_types :: sp_arithmetic :: per_things :: Perbill , round_max : runtime_types :: sp_arithmetic :: per_things :: Perbill , } , # [codec (index = 29)] # [doc = "Staking expectations set."] StakeExpectationsSet { expect_min : :: core :: primitive :: u128 , expect_ideal : :: core :: primitive :: u128 , expect_max : :: core :: primitive :: u128 , } , # [codec (index = 30)] # [doc = "Set total selected candidates to this value."] TotalSelectedSet { old : :: core :: primitive :: u32 , new : :: core :: primitive :: u32 , } , # [codec (index = 31)] # [doc = "Set collator commission to this value."] CollatorCommissionSet { old : runtime_types :: sp_arithmetic :: per_things :: Perbill , new : runtime_types :: sp_arithmetic :: per_things :: Perbill , } , # [codec (index = 32)] # [doc = "Set blocks per round"] BlocksPerRoundSet { current_round : :: core :: primitive :: u32 , first_block : :: core :: primitive :: u32 , old : :: core :: primitive :: u32 , new : :: core :: primitive :: u32 , new_per_round_inflation_min : runtime_types :: sp_arithmetic :: per_things :: Perbill , new_per_round_inflation_ideal : runtime_types :: sp_arithmetic :: per_things :: Perbill , new_per_round_inflation_max : runtime_types :: sp_arithmetic :: per_things :: Perbill , } , # [codec (index = 33)] # [doc = "Auto-compounding reward percent was set for a delegation."] AutoCompoundSet { candidate : runtime_types :: account :: AccountId20 , delegator : runtime_types :: account :: AccountId20 , value : runtime_types :: sp_arithmetic :: per_things :: Percent , } , # [codec (index = 34)] # [doc = "Compounded a portion of rewards towards the delegation."] Compounded { candidate : runtime_types :: account :: AccountId20 , delegator : runtime_types :: account :: AccountId20 , amount : :: core :: primitive :: u128 , } , }
            }
            pub mod set {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BoundedOrderedSet<_0>(
                    pub runtime_types::bounded_collections::bounded_vec::BoundedVec<_0>,
                );
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OrderedSet<_0>(pub ::std::vec::Vec<_0>);
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Bond<_0, _1> {
                    pub owner: _0,
                    pub amount: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BondWithAutoCompound<_0, _1> {
                    pub owner: _0,
                    pub amount: _1,
                    pub auto_compound: runtime_types::sp_arithmetic::per_things::Percent,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CandidateBondLessRequest<_0> {
                    pub amount: _0,
                    pub when_executable: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CandidateMetadata<_0> {
                    pub bond: _0,
                    pub delegation_count: ::core::primitive::u32,
                    pub total_counted: _0,
                    pub lowest_top_delegation_amount: _0,
                    pub highest_bottom_delegation_amount: _0,
                    pub lowest_bottom_delegation_amount: _0,
                    pub top_capacity:
                        runtime_types::pallet_parachain_staking::types::CapacityStatus,
                    pub bottom_capacity:
                        runtime_types::pallet_parachain_staking::types::CapacityStatus,
                    pub request: ::core::option::Option<
                        runtime_types::pallet_parachain_staking::types::CandidateBondLessRequest<
                            _0,
                        >,
                    >,
                    pub status: runtime_types::pallet_parachain_staking::types::CollatorStatus,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum CapacityStatus {
                    #[codec(index = 0)]
                    Full,
                    #[codec(index = 1)]
                    Empty,
                    #[codec(index = 2)]
                    Partial,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CollatorSnapshot<_0, _1> {
                    pub bond: _1,
                    pub delegations: ::std::vec::Vec<
                        runtime_types::pallet_parachain_staking::types::BondWithAutoCompound<
                            _0,
                            _1,
                        >,
                    >,
                    pub total: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum CollatorStatus {
                    #[codec(index = 0)]
                    Active,
                    #[codec(index = 1)]
                    Idle,
                    #[codec(index = 2)]
                    Leaving(::core::primitive::u32),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DelayedPayout<_0> {
                    pub round_issuance: _0,
                    pub total_staking_reward: _0,
                    pub collator_commission: runtime_types::sp_arithmetic::per_things::Perbill,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegations<_0, _1> {
                    pub delegations: ::std::vec::Vec<
                        runtime_types::pallet_parachain_staking::types::Bond<_0, _1>,
                    >,
                    pub total: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegator<_0, _1> {
                    pub id: _0,
                    pub delegations: runtime_types::pallet_parachain_staking::set::OrderedSet<
                        runtime_types::pallet_parachain_staking::types::Bond<_0, _1>,
                    >,
                    pub total: _1,
                    pub less_total: _1,
                    pub status: runtime_types::pallet_parachain_staking::types::DelegatorStatus,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum DelegatorAdded<_0> {
                    #[codec(index = 0)]
                    AddedToTop { new_total: _0 },
                    #[codec(index = 1)]
                    AddedToBottom,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum DelegatorStatus {
                    #[codec(index = 0)]
                    Active,
                    #[codec(index = 1)]
                    Leaving(::core::primitive::u32),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ParachainBondConfig<_0> {
                    pub account: _0,
                    pub percent: runtime_types::sp_arithmetic::per_things::Percent,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RoundInfo<_0> {
                    pub current: ::core::primitive::u32,
                    pub first: _0,
                    pub length: ::core::primitive::u32,
                }
            }
        }
        pub mod pallet_preimage {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Register a preimage on-chain."]
                    #[doc = ""]
                    #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
                    #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
                    note_preimage {
                        bytes: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Clear an unrequested preimage from the runtime storage."]
                    #[doc = ""]
                    #[doc = "If `len` is provided, then it will be a much cheaper operation."]
                    #[doc = ""]
                    #[doc = "- `hash`: The hash of the preimage to be removed from the store."]
                    #[doc = "- `len`: The length of the preimage of `hash`."]
                    unnote_preimage { hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
                    #[doc = ""]
                    #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
                    #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
                    request_preimage { hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    #[doc = "Clear a previously made request for a preimage."]
                    #[doc = ""]
                    #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
                    unrequest_preimage { hash: ::subxt::utils::H256 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Preimage is too large to store on-chain."]
                    TooBig,
                    #[codec(index = 1)]
                    #[doc = "Preimage has already been noted on-chain."]
                    AlreadyNoted,
                    #[codec(index = 2)]
                    #[doc = "The user is not authorized to perform this action."]
                    NotAuthorized,
                    #[codec(index = 3)]
                    #[doc = "The preimage cannot be removed since it has not yet been noted."]
                    NotNoted,
                    #[codec(index = 4)]
                    #[doc = "A preimage may not be removed when there are outstanding requests."]
                    Requested,
                    #[codec(index = 5)]
                    #[doc = "The preimage request cannot be removed since no outstanding requests exist."]
                    NotRequested,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A preimage has been noted."]
                    Noted { hash: ::subxt::utils::H256 },
                    #[codec(index = 1)]
                    #[doc = "A preimage has been requested."]
                    Requested { hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    #[doc = "A preimage has ben cleared."]
                    Cleared { hash: ::subxt::utils::H256 },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RequestStatus<_0, _1> {
                #[codec(index = 0)]
                Unrequested {
                    deposit: (_0, _1),
                    len: ::core::primitive::u32,
                },
                #[codec(index = 1)]
                Requested {
                    deposit: ::core::option::Option<(_0, _1)>,
                    count: ::core::primitive::u32,
                    len: ::core::option::Option<::core::primitive::u32>,
                },
            }
        }
        pub mod pallet_proxy {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
                    #[doc = "`add_proxy`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                    #[doc = "- `call`: The call to be made by the `real` account."]
                    proxy {
                        real: runtime_types::account::AccountId20,
                        force_proxy_type:
                            ::core::option::Option<runtime_types::moonbase_runtime::ProxyType>,
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
                    #[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
                    #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                    #[doc = "zero."]
                    add_proxy {
                        delegate: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::moonbase_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Unregister a proxy account for the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
                    #[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
                    remove_proxy {
                        delegate: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::moonbase_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Unregister all proxy accounts for the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "WARNING: This may be called on accounts created by `pure`, however if done, then"]
                    #[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
                    remove_proxies,
                    #[codec(index = 4)]
                    #[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
                    #[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
                    #[doc = ""]
                    #[doc = "Requires a `Signed` origin."]
                    #[doc = ""]
                    #[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
                    #[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
                    #[doc = "allow for maximum flexibility."]
                    #[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
                    #[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
                    #[doc = "want to use `0`."]
                    #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                    #[doc = "zero."]
                    #[doc = ""]
                    #[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
                    #[doc = "same sender, with the same parameters."]
                    #[doc = ""]
                    #[doc = "Fails if there are insufficient funds to pay for deposit."]
                    create_pure {
                        proxy_type: runtime_types::moonbase_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                        index: ::core::primitive::u16,
                    },
                    #[codec(index = 5)]
                    #[doc = "Removes a previously spawned pure proxy."]
                    #[doc = ""]
                    #[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
                    #[doc = "inaccessible."]
                    #[doc = ""]
                    #[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
                    #[doc = "`pure` with corresponding parameters."]
                    #[doc = ""]
                    #[doc = "- `spawner`: The account that originally called `pure` to create this account."]
                    #[doc = "- `index`: The disambiguation index originally passed to `pure`. Probably `0`."]
                    #[doc = "- `proxy_type`: The proxy type originally passed to `pure`."]
                    #[doc = "- `height`: The height of the chain when the call to `pure` was processed."]
                    #[doc = "- `ext_index`: The extrinsic index in which the call to `pure` was processed."]
                    #[doc = ""]
                    #[doc = "Fails with `NoPermission` in case the caller is not a previously created pure"]
                    #[doc = "account whose `pure` call has corresponding parameters."]
                    kill_pure {
                        spawner: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::moonbase_runtime::ProxyType,
                        index: ::core::primitive::u16,
                        #[codec(compact)]
                        height: ::core::primitive::u32,
                        #[codec(compact)]
                        ext_index: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Publish the hash of a proxy-call that will be made in the future."]
                    #[doc = ""]
                    #[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
                    #[doc = "if the delay associated with the proxy relationship is greater than zero."]
                    #[doc = ""]
                    #[doc = "No more than `MaxPending` announcements may be made at any one time."]
                    #[doc = ""]
                    #[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
                    #[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                    announce {
                        real: runtime_types::account::AccountId20,
                        call_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 7)]
                    #[doc = "Remove a given announcement."]
                    #[doc = ""]
                    #[doc = "May be called by a proxy account to remove a call they previously announced and return"]
                    #[doc = "the deposit."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                    remove_announcement {
                        real: runtime_types::account::AccountId20,
                        call_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 8)]
                    #[doc = "Remove the given announcement of a delegate."]
                    #[doc = ""]
                    #[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
                    #[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `delegate`: The account that previously announced the call."]
                    #[doc = "- `call_hash`: The hash of the call to be made."]
                    reject_announcement {
                        delegate: runtime_types::account::AccountId20,
                        call_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 9)]
                    #[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
                    #[doc = "`add_proxy`."]
                    #[doc = ""]
                    #[doc = "Removes any corresponding announcement(s)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                    #[doc = "- `call`: The call to be made by the `real` account."]
                    proxy_announced {
                        delegate: runtime_types::account::AccountId20,
                        real: runtime_types::account::AccountId20,
                        force_proxy_type:
                            ::core::option::Option<runtime_types::moonbase_runtime::ProxyType>,
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "There are too many proxies registered or too many announcements pending."]
                    TooMany,
                    #[codec(index = 1)]
                    #[doc = "Proxy registration not found."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Sender is not a proxy of the account to be proxied."]
                    NotProxy,
                    #[codec(index = 3)]
                    #[doc = "A call which is incompatible with the proxy type's filter was attempted."]
                    Unproxyable,
                    #[codec(index = 4)]
                    #[doc = "Account is already a proxy."]
                    Duplicate,
                    #[codec(index = 5)]
                    #[doc = "Call may not be made by proxy because it may escalate its privileges."]
                    NoPermission,
                    #[codec(index = 6)]
                    #[doc = "Announcement, if made at all, was made too recently."]
                    Unannounced,
                    #[codec(index = 7)]
                    #[doc = "Cannot add self as proxy."]
                    NoSelfProxy,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A proxy was executed correctly, with the given."]
                    ProxyExecuted {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    #[doc = "A pure account has been created by new proxy with given"]
                    #[doc = "disambiguation index and proxy type."]
                    PureCreated {
                        pure: runtime_types::account::AccountId20,
                        who: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::moonbase_runtime::ProxyType,
                        disambiguation_index: ::core::primitive::u16,
                    },
                    #[codec(index = 2)]
                    #[doc = "An announcement was placed to make a call in the future."]
                    Announced {
                        real: runtime_types::account::AccountId20,
                        proxy: runtime_types::account::AccountId20,
                        call_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 3)]
                    #[doc = "A proxy was added."]
                    ProxyAdded {
                        delegator: runtime_types::account::AccountId20,
                        delegatee: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::moonbase_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "A proxy was removed."]
                    ProxyRemoved {
                        delegator: runtime_types::account::AccountId20,
                        delegatee: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::moonbase_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Announcement<_0, _1, _2> {
                pub real: _0,
                pub call_hash: _1,
                pub height: _2,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ProxyDefinition<_0, _1, _2> {
                pub delegate: _0,
                pub proxy_type: _1,
                pub delay: _2,
            }
        }
        pub mod pallet_randomness {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Populates `RandomnessResults` due this epoch with BABE epoch randomness"]
                    set_babe_randomness_results,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    RequestCounterOverflowed,
                    #[codec(index = 1)]
                    RequestFeeOverflowed,
                    #[codec(index = 2)]
                    MustRequestAtLeastOneWord,
                    #[codec(index = 3)]
                    CannotRequestMoreWordsThanMax,
                    #[codec(index = 4)]
                    CannotRequestRandomnessAfterMaxDelay,
                    #[codec(index = 5)]
                    CannotRequestRandomnessBeforeMinDelay,
                    #[codec(index = 6)]
                    RequestDNE,
                    #[codec(index = 7)]
                    RequestCannotYetBeFulfilled,
                    #[codec(index = 8)]
                    OnlyRequesterCanIncreaseFee,
                    #[codec(index = 9)]
                    RequestHasNotExpired,
                    #[codec(index = 10)]
                    RandomnessResultDNE,
                    #[codec(index = 11)]
                    RandomnessResultNotFilled,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    RandomnessRequestedBabeEpoch {
                        id: ::core::primitive::u64,
                        refund_address: ::subxt::utils::H160,
                        contract_address: ::subxt::utils::H160,
                        fee: ::core::primitive::u128,
                        gas_limit: ::core::primitive::u64,
                        num_words: ::core::primitive::u8,
                        salt: ::subxt::utils::H256,
                        earliest_epoch: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    RandomnessRequestedLocal {
                        id: ::core::primitive::u64,
                        refund_address: ::subxt::utils::H160,
                        contract_address: ::subxt::utils::H160,
                        fee: ::core::primitive::u128,
                        gas_limit: ::core::primitive::u64,
                        num_words: ::core::primitive::u8,
                        salt: ::subxt::utils::H256,
                        earliest_block: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    RequestFulfilled { id: ::core::primitive::u64 },
                    #[codec(index = 3)]
                    RequestFeeIncreased {
                        id: ::core::primitive::u64,
                        new_fee: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    RequestExpirationExecuted { id: ::core::primitive::u64 },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RandomnessResult<_0> {
                    pub randomness: ::core::option::Option<_0>,
                    pub request_count: ::core::primitive::u64,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Request<_0, _1> {
                    pub refund_address: ::subxt::utils::H160,
                    pub contract_address: ::subxt::utils::H160,
                    pub fee: _0,
                    pub gas_limit: ::core::primitive::u64,
                    pub num_words: ::core::primitive::u8,
                    pub salt: ::subxt::utils::H256,
                    pub info: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum RequestInfo {
                    #[codec(index = 0)]
                    BabeEpoch(::core::primitive::u64, ::core::primitive::u64),
                    #[codec(index = 1)]
                    Local(::core::primitive::u32, ::core::primitive::u32),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RequestState {
                    pub request: runtime_types::pallet_randomness::types::Request<
                        ::core::primitive::u128,
                        runtime_types::pallet_randomness::types::RequestInfo,
                    >,
                    pub deposit: ::core::primitive::u128,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum RequestType {
                    #[codec(index = 0)]
                    BabeEpoch(::core::primitive::u64),
                    #[codec(index = 1)]
                    Local(::core::primitive::u32),
                }
            }
        }
        pub mod pallet_referenda {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Propose a referendum on a privileged action."]
                    #[doc = ""]
                    #[doc = "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds"]
                    #[doc = "  available."]
                    #[doc = "- `proposal_origin`: The origin from which the proposal should be executed."]
                    #[doc = "- `proposal`: The proposal."]
                    #[doc = "- `enactment_moment`: The moment that the proposal should be enacted."]
                    #[doc = ""]
                    #[doc = "Emits `Submitted`."]
                    submit {
                        proposal_origin:
                            ::std::boxed::Box<runtime_types::moonbase_runtime::OriginCaller>,
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::moonbase_runtime::RuntimeCall,
                        >,
                        enactment_moment:
                            runtime_types::frame_support::traits::schedule::DispatchTime<
                                ::core::primitive::u32,
                            >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Post the Decision Deposit for a referendum."]
                    #[doc = ""]
                    #[doc = "- `origin`: must be `Signed` and the account must have funds available for the"]
                    #[doc = "  referendum's track's Decision Deposit."]
                    #[doc = "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be"]
                    #[doc = "  posted."]
                    #[doc = ""]
                    #[doc = "Emits `DecisionDepositPlaced`."]
                    place_decision_deposit { index: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    #[doc = "Refund the Decision Deposit for a closed referendum back to the depositor."]
                    #[doc = ""]
                    #[doc = "- `origin`: must be `Signed` or `Root`."]
                    #[doc = "- `index`: The index of a closed referendum whose Decision Deposit has not yet been"]
                    #[doc = "  refunded."]
                    #[doc = ""]
                    #[doc = "Emits `DecisionDepositRefunded`."]
                    refund_decision_deposit { index: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    #[doc = "Cancel an ongoing referendum."]
                    #[doc = ""]
                    #[doc = "- `origin`: must be the `CancelOrigin`."]
                    #[doc = "- `index`: The index of the referendum to be cancelled."]
                    #[doc = ""]
                    #[doc = "Emits `Cancelled`."]
                    cancel { index: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "Cancel an ongoing referendum and slash the deposits."]
                    #[doc = ""]
                    #[doc = "- `origin`: must be the `KillOrigin`."]
                    #[doc = "- `index`: The index of the referendum to be cancelled."]
                    #[doc = ""]
                    #[doc = "Emits `Killed` and `DepositSlashed`."]
                    kill { index: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "Advance a referendum onto its next logical state. Only used internally."]
                    #[doc = ""]
                    #[doc = "- `origin`: must be `Root`."]
                    #[doc = "- `index`: the referendum to be advanced."]
                    nudge_referendum { index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "Advance a track onto its next logical state. Only used internally."]
                    #[doc = ""]
                    #[doc = "- `origin`: must be `Root`."]
                    #[doc = "- `track`: the track to be advanced."]
                    #[doc = ""]
                    #[doc = "Action item for when there is now one fewer referendum in the deciding phase and the"]
                    #[doc = "`DecidingCount` is not yet updated. This means that we should either:"]
                    #[doc = "- begin deciding another referendum (and leave `DecidingCount` alone); or"]
                    #[doc = "- decrement `DecidingCount`."]
                    one_fewer_deciding { track: ::core::primitive::u16 },
                    #[codec(index = 7)]
                    #[doc = "Refund the Submission Deposit for a closed referendum back to the depositor."]
                    #[doc = ""]
                    #[doc = "- `origin`: must be `Signed` or `Root`."]
                    #[doc = "- `index`: The index of a closed referendum whose Submission Deposit has not yet been"]
                    #[doc = "  refunded."]
                    #[doc = ""]
                    #[doc = "Emits `SubmissionDepositRefunded`."]
                    refund_submission_deposit { index: ::core::primitive::u32 },
                    #[codec(index = 8)]
                    #[doc = "Set or clear metadata of a referendum."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a"]
                    #[doc = "  metadata of a finished referendum."]
                    #[doc = "- `index`:  The index of a referendum to set or clear metadata for."]
                    #[doc = "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."]
                    set_metadata {
                        index: ::core::primitive::u32,
                        maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Referendum is not ongoing."]
                    NotOngoing,
                    #[codec(index = 1)]
                    #[doc = "Referendum's decision deposit is already paid."]
                    HasDeposit,
                    #[codec(index = 2)]
                    #[doc = "The track identifier given was invalid."]
                    BadTrack,
                    #[codec(index = 3)]
                    #[doc = "There are already a full complement of referenda in progress for this track."]
                    Full,
                    #[codec(index = 4)]
                    #[doc = "The queue of the track is empty."]
                    QueueEmpty,
                    #[codec(index = 5)]
                    #[doc = "The referendum index provided is invalid in this context."]
                    BadReferendum,
                    #[codec(index = 6)]
                    #[doc = "There was nothing to do in the advancement."]
                    NothingToDo,
                    #[codec(index = 7)]
                    #[doc = "No track exists for the proposal origin."]
                    NoTrack,
                    #[codec(index = 8)]
                    #[doc = "Any deposit cannot be refunded until after the decision is over."]
                    Unfinished,
                    #[codec(index = 9)]
                    #[doc = "The deposit refunder is not the depositor."]
                    NoPermission,
                    #[codec(index = 10)]
                    #[doc = "The deposit cannot be refunded since none was made."]
                    NoDeposit,
                    #[codec(index = 11)]
                    #[doc = "The referendum status is invalid for this operation."]
                    BadStatus,
                    #[codec(index = 12)]
                    #[doc = "The preimage does not exist."]
                    PreimageNotExist,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A referendum has been submitted."]
                    Submitted {
                        index: ::core::primitive::u32,
                        track: ::core::primitive::u16,
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::moonbase_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "The decision deposit has been placed."]
                    DecisionDepositPlaced {
                        index: ::core::primitive::u32,
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "The decision deposit has been refunded."]
                    DecisionDepositRefunded {
                        index: ::core::primitive::u32,
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A deposit has been slashaed."]
                    DepositSlashed {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "A referendum has moved into the deciding phase."]
                    DecisionStarted {
                        index: ::core::primitive::u32,
                        track: ::core::primitive::u16,
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::moonbase_runtime::RuntimeCall,
                        >,
                        tally: runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 5)]
                    ConfirmStarted { index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    ConfirmAborted { index: ::core::primitive::u32 },
                    #[codec(index = 7)]
                    #[doc = "A referendum has ended its confirmation phase and is ready for approval."]
                    Confirmed {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 8)]
                    #[doc = "A referendum has been approved and its proposal has been scheduled."]
                    Approved { index: ::core::primitive::u32 },
                    #[codec(index = 9)]
                    #[doc = "A proposal has been rejected by referendum."]
                    Rejected {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 10)]
                    #[doc = "A referendum has been timed out without being decided."]
                    TimedOut {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 11)]
                    #[doc = "A referendum has been cancelled."]
                    Cancelled {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 12)]
                    #[doc = "A referendum has been killed."]
                    Killed {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 13)]
                    #[doc = "The submission deposit has been refunded."]
                    SubmissionDepositRefunded {
                        index: ::core::primitive::u32,
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 14)]
                    #[doc = "Metadata for a referendum has been set."]
                    MetadataSet {
                        index: ::core::primitive::u32,
                        hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 15)]
                    #[doc = "Metadata for a referendum has been cleared."]
                    MetadataCleared {
                        index: ::core::primitive::u32,
                        hash: ::subxt::utils::H256,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Curve {
                    #[codec(index = 0)]
                    LinearDecreasing {
                        length: runtime_types::sp_arithmetic::per_things::Perbill,
                        floor: runtime_types::sp_arithmetic::per_things::Perbill,
                        ceil: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 1)]
                    SteppedDecreasing {
                        begin: runtime_types::sp_arithmetic::per_things::Perbill,
                        end: runtime_types::sp_arithmetic::per_things::Perbill,
                        step: runtime_types::sp_arithmetic::per_things::Perbill,
                        period: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 2)]
                    Reciprocal {
                        factor: runtime_types::sp_arithmetic::fixed_point::FixedI64,
                        x_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
                        y_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DecidingStatus<_0> {
                    pub since: _0,
                    pub confirming: ::core::option::Option<_0>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Deposit<_0, _1> {
                    pub who: _0,
                    pub amount: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ReferendumInfo<_0, _1, _2, _3, _4, _5, _6, _7> {
                    #[codec(index = 0)]
                    Ongoing(
                        runtime_types::pallet_referenda::types::ReferendumStatus<
                            _0,
                            _1,
                            _2,
                            _3,
                            _4,
                            _5,
                            _6,
                            _7,
                        >,
                    ),
                    #[codec(index = 1)]
                    Approved(
                        _2,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                    ),
                    #[codec(index = 2)]
                    Rejected(
                        _2,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                    ),
                    #[codec(index = 3)]
                    Cancelled(
                        _2,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                    ),
                    #[codec(index = 4)]
                    TimedOut(
                        _2,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                    ),
                    #[codec(index = 5)]
                    Killed(_2),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReferendumStatus<_0, _1, _2, _3, _4, _5, _6, _7> {
                    pub track: _0,
                    pub origin: _1,
                    pub proposal: _3,
                    pub enactment: runtime_types::frame_support::traits::schedule::DispatchTime<_2>,
                    pub submitted: _2,
                    pub submission_deposit: runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                    pub decision_deposit: ::core::option::Option<
                        runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                    >,
                    pub deciding: ::core::option::Option<
                        runtime_types::pallet_referenda::types::DecidingStatus<_2>,
                    >,
                    pub tally: _5,
                    pub in_queue: ::core::primitive::bool,
                    pub alarm: ::core::option::Option<(_2, _7)>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TrackInfo<_0, _1> {
                    pub name: ::std::string::String,
                    pub max_deciding: ::core::primitive::u32,
                    pub decision_deposit: _0,
                    pub prepare_period: _1,
                    pub decision_period: _1,
                    pub confirm_period: _1,
                    pub min_enactment_period: _1,
                    pub min_approval: runtime_types::pallet_referenda::types::Curve,
                    pub min_support: runtime_types::pallet_referenda::types::Curve,
                }
            }
        }
        pub mod pallet_root_testing {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "A dispatch that will fill the block weight up to the given ratio."]
                    fill_block {
                        ratio: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                }
            }
        }
        pub mod pallet_scheduler {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Anonymously schedule a task."]
                    schedule {
                        when: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Cancel an anonymously scheduled task."]
                    cancel {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Schedule a named task."]
                    schedule_named {
                        id: [::core::primitive::u8; 32usize],
                        when: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Cancel a named scheduled task."]
                    cancel_named {
                        id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 4)]
                    #[doc = "Anonymously schedule a task after a delay."]
                    schedule_after {
                        after: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Schedule a named task after a delay."]
                    schedule_named_after {
                        id: [::core::primitive::u8; 32usize],
                        after: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Failed to schedule a call"]
                    FailedToSchedule,
                    #[codec(index = 1)]
                    #[doc = "Cannot find the scheduled call."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Given target block number is in the past."]
                    TargetBlockNumberInPast,
                    #[codec(index = 3)]
                    #[doc = "Reschedule failed because it does not change scheduled time."]
                    RescheduleNoChange,
                    #[codec(index = 4)]
                    #[doc = "Attempt to use a non-named function on a named task."]
                    Named,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Events type."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Scheduled some task."]
                    Scheduled {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Canceled some task."]
                    Canceled {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Dispatched some task."]
                    Dispatched {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    #[doc = "The call for the provided hash was not found so the task has been aborted."]
                    CallUnavailable {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 4)]
                    #[doc = "The given task was unable to be renewed since the agenda is full at that block."]
                    PeriodicFailed {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 5)]
                    #[doc = "The given task can never be executed since it is overweight."]
                    PermanentlyOverweight {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Scheduled<_0, _1, _2, _3, _4> {
                pub maybe_id: ::core::option::Option<_0>,
                pub priority: ::core::primitive::u8,
                pub call: _1,
                pub maybe_periodic: ::core::option::Option<(_2, _2)>,
                pub origin: _3,
                #[codec(skip)]
                pub __subxt_unused_type_params: ::core::marker::PhantomData<_4>,
            }
        }
        pub mod pallet_sudo {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    sudo {
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                    #[doc = "This function does not check the weight of the call, and instead allows the"]
                    #[doc = "Sudo user to specify the weight of the call."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    sudo_unchecked_weight {
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                    #[doc = "key."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    set_key {
                        new: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 3)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                    #[doc = "a given account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    sudo_as {
                        who: runtime_types::account::AccountId20,
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Error for the Sudo pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Sender must be the Sudo account"]
                    RequireSudo,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    Sudid {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
                    KeyChanged {
                        old_sudoer: ::core::option::Option<runtime_types::account::AccountId20>,
                    },
                    #[codec(index = 2)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    SudoAsDone {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_timestamp {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the current time."]
                    #[doc = ""]
                    #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                    #[doc = "phase, if this call hasn't been invoked by that time."]
                    #[doc = ""]
                    #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                    #[doc = "`MinimumPeriod`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Inherent`."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                    #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
                    #[doc = "  `on_finalize`)"]
                    #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                    set {
                        #[codec(compact)]
                        now: ::core::primitive::u64,
                    },
                }
            }
        }
        pub mod pallet_transaction_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
                    #[doc = "has been paid by `who`."]
                    TransactionFeePaid {
                        who: runtime_types::account::AccountId20,
                        actual_fee: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u128);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Releases {
                #[codec(index = 0)]
                V1Ancient,
                #[codec(index = 1)]
                V2,
            }
        }
        pub mod pallet_treasury {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Put forward a suggestion for spending. A deposit proportional to the value"]
                    #[doc = "is reserved and slashed if the proposal is rejected. It is returned once the"]
                    #[doc = "proposal is awarded."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)"]
                    propose_spend {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        beneficiary: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "Reject a proposed spend. The original deposit will be slashed."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::RejectOrigin`."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)"]
                    reject_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary"]
                    #[doc = "and the original deposit will be returned."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::ApproveOrigin`."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = " - O(1)."]
                    approve_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Propose and approve a spend of treasury funds."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`."]
                    #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                    #[doc = "- `beneficiary`: The destination account for the transfer."]
                    #[doc = ""]
                    #[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
                    #[doc = "beneficiary."]
                    spend {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        beneficiary: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 4)]
                    #[doc = "Force a previously approved proposal to be removed from the approval queue."]
                    #[doc = "The original deposit will no longer be returned."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::RejectOrigin`."]
                    #[doc = "- `proposal_id`: The index of a proposal"]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(A) where `A` is the number of approvals"]
                    #[doc = ""]
                    #[doc = "Errors:"]
                    #[doc = "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,"]
                    #[doc = "i.e., the proposal has not been approved. This could also mean the proposal does not"]
                    #[doc = "exist altogether, thus there is no way it would have been approved in the first place."]
                    remove_approval {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Error for the treasury pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Proposer's balance is too low."]
                    InsufficientProposersBalance,
                    #[codec(index = 1)]
                    #[doc = "No proposal or bounty at that index."]
                    InvalidIndex,
                    #[codec(index = 2)]
                    #[doc = "Too many approvals in the queue."]
                    TooManyApprovals,
                    #[codec(index = 3)]
                    #[doc = "The spend origin is valid but the amount it is allowed to spend is lower than the"]
                    #[doc = "amount to be spent."]
                    InsufficientPermission,
                    #[codec(index = 4)]
                    #[doc = "Proposal has not been approved."]
                    ProposalNotApproved,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New proposal."]
                    Proposed {
                        proposal_index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "We have ended a spend period and will now allocate funds."]
                    Spending {
                        budget_remaining: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Some funds have been allocated."]
                    Awarded {
                        proposal_index: ::core::primitive::u32,
                        award: ::core::primitive::u128,
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 3)]
                    #[doc = "A proposal was rejected; funds were slashed."]
                    Rejected {
                        proposal_index: ::core::primitive::u32,
                        slashed: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some of our funds have been burnt."]
                    Burnt {
                        burnt_funds: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
                    Rollover {
                        rollover_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some funds have been deposited."]
                    Deposit { value: ::core::primitive::u128 },
                    #[codec(index = 7)]
                    #[doc = "A new spend proposal has been approved."]
                    SpendApproved {
                        proposal_index: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        beneficiary: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 8)]
                    #[doc = "The inactive funds of the pallet have been updated."]
                    UpdatedInactive {
                        reactivated: ::core::primitive::u128,
                        deactivated: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Proposal<_0, _1> {
                pub proposer: _0,
                pub value: _1,
                pub beneficiary: _0,
                pub bond: _1,
            }
        }
        pub mod pallet_utility {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Send a batch of dispatch calls."]
                    #[doc = ""]
                    #[doc = "May be called from any origin except `None`."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                    #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(C) where C is the number of calls to be batched."]
                    #[doc = ""]
                    #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                    #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                    #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                    #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                    #[doc = "event is deposited."]
                    batch {
                        calls: ::std::vec::Vec<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Send a call through an indexed pseudonym of the sender."]
                    #[doc = ""]
                    #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                    #[doc = "use the same filter as the origin of this call."]
                    #[doc = ""]
                    #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                    #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                    #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                    #[doc = "in the Multisig pallet instead."]
                    #[doc = ""]
                    #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    as_derivative {
                        index: ::core::primitive::u16,
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Send a batch of dispatch calls and atomically execute them."]
                    #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                    #[doc = ""]
                    #[doc = "May be called from any origin except `None`."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                    #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(C) where C is the number of calls to be batched."]
                    batch_all {
                        calls: ::std::vec::Vec<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Dispatches a function call with a provided origin."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    dispatch_as {
                        as_origin: ::std::boxed::Box<runtime_types::moonbase_runtime::OriginCaller>,
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Send a batch of dispatch calls."]
                    #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                    #[doc = ""]
                    #[doc = "May be called from any origin except `None`."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
                    #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(C) where C is the number of calls to be batched."]
                    force_batch {
                        calls: ::std::vec::Vec<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Dispatch a function call with a specified weight."]
                    #[doc = ""]
                    #[doc = "This function does not check the weight of the call, and instead allows the"]
                    #[doc = "Root origin to specify the weight of the call."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    with_weight {
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many calls batched."]
                    TooManyCalls,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
                    #[doc = "well as the error."]
                    BatchInterrupted {
                        index: ::core::primitive::u32,
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 1)]
                    #[doc = "Batch of dispatches completed fully with no error."]
                    BatchCompleted,
                    #[codec(index = 2)]
                    #[doc = "Batch of dispatches completed but has errors."]
                    BatchCompletedWithErrors,
                    #[codec(index = 3)]
                    #[doc = "A single item within a Batch of dispatches has completed with no error."]
                    ItemCompleted,
                    #[codec(index = 4)]
                    #[doc = "A single item within a Batch of dispatches has completed with error."]
                    ItemFailed {
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 5)]
                    #[doc = "A call was dispatched."]
                    DispatchedAs {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_whitelist {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    whitelist_call { call_hash: ::subxt::utils::H256 },
                    #[codec(index = 1)]
                    remove_whitelisted_call { call_hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    dispatch_whitelisted_call {
                        call_hash: ::subxt::utils::H256,
                        call_encoded_len: ::core::primitive::u32,
                        call_weight_witness: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 3)]
                    dispatch_whitelisted_call_with_preimage {
                        call: ::std::boxed::Box<runtime_types::moonbase_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The preimage of the call hash could not be loaded."]
                    UnavailablePreImage,
                    #[codec(index = 1)]
                    #[doc = "The call could not be decoded."]
                    UndecodableCall,
                    #[codec(index = 2)]
                    #[doc = "The weight of the decoded call was higher than the witness."]
                    InvalidCallWeightWitness,
                    #[codec(index = 3)]
                    #[doc = "The call was not whitelisted."]
                    CallIsNotWhitelisted,
                    #[codec(index = 4)]
                    #[doc = "The call was already whitelisted; No-Op."]
                    CallAlreadyWhitelisted,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    CallWhitelisted { call_hash: ::subxt::utils::H256 },
                    #[codec(index = 1)]
                    WhitelistedCallRemoved { call_hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    WhitelistedCallDispatched {
                        call_hash: ::subxt::utils::H256,
                        result: ::core::result::Result<
                            runtime_types::frame_support::dispatch::PostDispatchInfo,
                            runtime_types::sp_runtime::DispatchErrorWithPostInfo<
                                runtime_types::frame_support::dispatch::PostDispatchInfo,
                            >,
                        >,
                    },
                }
            }
        }
        pub mod pallet_xcm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    send {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Teleport some assets from the local chain to some destination chain."]
                    #[doc = ""]
                    #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                    #[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
                    #[doc = "with all fees taken as needed from the asset."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                    #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                    #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                    #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                    #[doc = "  an `AccountId32` value."]
                    #[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
                    #[doc = "  `dest` side. May not be empty."]
                    #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                    #[doc = "  fees."]
                    teleport_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
                    #[doc = "chain and forward a notification XCM."]
                    #[doc = ""]
                    #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                    #[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
                    #[doc = "with all fees taken as needed from the asset."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                    #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                    #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                    #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                    #[doc = "  an `AccountId32` value."]
                    #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
                    #[doc = "  `dest` side."]
                    #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                    #[doc = "  fees."]
                    reserve_transfer_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Execute an XCM message from a local, signed, origin."]
                    #[doc = ""]
                    #[doc = "An event is deposited indicating whether `msg` could be executed completely or only"]
                    #[doc = "partially."]
                    #[doc = ""]
                    #[doc = "No more than `max_weight` will be used in its attempted execution. If this is less than the"]
                    #[doc = "maximum amount of weight that the message could take to be executed, then no execution"]
                    #[doc = "attempt will be made."]
                    #[doc = ""]
                    #[doc = "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully"]
                    #[doc = "to completion; only that *some* of it was executed."]
                    execute {
                        message: ::std::boxed::Box<runtime_types::xcm::VersionedXcm2>,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 4)]
                    #[doc = "Extoll that a particular destination can be communicated with through a particular"]
                    #[doc = "version of XCM."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                    #[doc = "- `location`: The destination that is being described."]
                    #[doc = "- `xcm_version`: The latest version of XCM that `location` supports."]
                    force_xcm_version {
                        location:
                            ::std::boxed::Box<runtime_types::xcm::v3::multilocation::MultiLocation>,
                        xcm_version: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"]
                    #[doc = "version a destination can accept is unknown)."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                    #[doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."]
                    force_default_xcm_version {
                        maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Ask a location to notify us regarding their XCM version and any changes to it."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                    #[doc = "- `location`: The location to which we should subscribe for XCM version notifications."]
                    force_subscribe_version_notify {
                        location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    },
                    #[codec(index = 7)]
                    #[doc = "Require that a particular destination should no longer notify us regarding any XCM"]
                    #[doc = "version changes."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                    #[doc = "- `location`: The location to which we are currently subscribed for XCM version"]
                    #[doc = "  notifications which we no longer desire."]
                    force_unsubscribe_version_notify {
                        location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    },
                    #[codec(index = 8)]
                    #[doc = "Transfer some assets from the local chain to the sovereign account of a destination"]
                    #[doc = "chain and forward a notification XCM."]
                    #[doc = ""]
                    #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                    #[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
                    #[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
                    #[doc = "at risk."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                    #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                    #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                    #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                    #[doc = "  an `AccountId32` value."]
                    #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the"]
                    #[doc = "  `dest` side."]
                    #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                    #[doc = "  fees."]
                    #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                    limited_reserve_transfer_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 9)]
                    #[doc = "Teleport some assets from the local chain to some destination chain."]
                    #[doc = ""]
                    #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                    #[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
                    #[doc = "is needed than `weight_limit`, then the operation will fail and the assets send may be"]
                    #[doc = "at risk."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                    #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send"]
                    #[doc = "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain."]
                    #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be"]
                    #[doc = "  an `AccountId32` value."]
                    #[doc = "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the"]
                    #[doc = "  `dest` side. May not be empty."]
                    #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                    #[doc = "  fees."]
                    #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                    limited_teleport_assets {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        beneficiary: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        assets: ::std::boxed::Box<runtime_types::xcm::VersionedMultiAssets>,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 10)]
                    #[doc = "Set or unset the global suspension state of the XCM executor."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                    #[doc = "- `suspended`: `true` to suspend, `false` to resume."]
                    force_suspension { suspended: ::core::primitive::bool },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The desired destination was unreachable, generally because there is a no way of routing"]
                    #[doc = "to it."]
                    Unreachable,
                    #[codec(index = 1)]
                    #[doc = "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps"]
                    #[doc = "a lack of space for buffering the message."]
                    SendFailure,
                    #[codec(index = 2)]
                    #[doc = "The message execution fails the filter."]
                    Filtered,
                    #[codec(index = 3)]
                    #[doc = "The message's weight could not be determined."]
                    UnweighableMessage,
                    #[codec(index = 4)]
                    #[doc = "The destination `MultiLocation` provided cannot be inverted."]
                    DestinationNotInvertible,
                    #[codec(index = 5)]
                    #[doc = "The assets to be sent are empty."]
                    Empty,
                    #[codec(index = 6)]
                    #[doc = "Could not re-anchor the assets to declare the fees for the destination chain."]
                    CannotReanchor,
                    #[codec(index = 7)]
                    #[doc = "Too many assets have been attempted for transfer."]
                    TooManyAssets,
                    #[codec(index = 8)]
                    #[doc = "Origin is invalid for sending."]
                    InvalidOrigin,
                    #[codec(index = 9)]
                    #[doc = "The version of the `Versioned` value used is not able to be interpreted."]
                    BadVersion,
                    #[codec(index = 10)]
                    #[doc = "The given location could not be used (e.g. because it cannot be expressed in the"]
                    #[doc = "desired version of XCM)."]
                    BadLocation,
                    #[codec(index = 11)]
                    #[doc = "The referenced subscription could not be found."]
                    NoSubscription,
                    #[codec(index = 12)]
                    #[doc = "The location is invalid since it already has a subscription from us."]
                    AlreadySubscribed,
                    #[codec(index = 13)]
                    #[doc = "Invalid asset for the operation."]
                    InvalidAsset,
                    #[codec(index = 14)]
                    #[doc = "The owner does not own (all) of the asset that they wish to do the operation on."]
                    LowBalance,
                    #[codec(index = 15)]
                    #[doc = "The asset owner has too many locks on the asset."]
                    TooManyLocks,
                    #[codec(index = 16)]
                    #[doc = "The given account is not an identifiable sovereign account for any location."]
                    AccountNotSovereign,
                    #[codec(index = 17)]
                    #[doc = "The operation required fees to be paid which the initiator could not meet."]
                    FeesNotMet,
                    #[codec(index = 18)]
                    #[doc = "A remote lock with the corresponding data could not be found."]
                    LockNotFound,
                    #[codec(index = 19)]
                    #[doc = "The unlock operation cannot succeed because there are still consumers of the lock."]
                    InUse,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Execution of an XCM message was attempted."]
                    #[doc = ""]
                    #[doc = "\\[ outcome \\]"]
                    Attempted(runtime_types::xcm::v3::traits::Outcome),
                    #[codec(index = 1)]
                    #[doc = "A XCM message was sent."]
                    #[doc = ""]
                    #[doc = "\\[ origin, destination, message \\]"]
                    Sent(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::Xcm,
                    ),
                    #[codec(index = 2)]
                    #[doc = "Query response received which does not match a registered query. This may be because a"]
                    #[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
                    #[doc = "because the query timed out."]
                    #[doc = ""]
                    #[doc = "\\[ origin location, id \\]"]
                    UnexpectedResponse(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 3)]
                    #[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
                    #[doc = "no registered notification call."]
                    #[doc = ""]
                    #[doc = "\\[ id, response \\]"]
                    ResponseReady(::core::primitive::u64, runtime_types::xcm::v3::Response),
                    #[codec(index = 4)]
                    #[doc = "Query response has been received and query is removed. The registered notification has"]
                    #[doc = "been dispatched and executed successfully."]
                    #[doc = ""]
                    #[doc = "\\[ id, pallet index, call index \\]"]
                    Notified(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                    ),
                    #[codec(index = 5)]
                    #[doc = "Query response has been received and query is removed. The registered notification could"]
                    #[doc = "not be dispatched because the dispatch weight is greater than the maximum weight"]
                    #[doc = "originally budgeted by this runtime for the query result."]
                    #[doc = ""]
                    #[doc = "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"]
                    NotifyOverweight(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                        runtime_types::sp_weights::weight_v2::Weight,
                        runtime_types::sp_weights::weight_v2::Weight,
                    ),
                    #[codec(index = 6)]
                    #[doc = "Query response has been received and query is removed. There was a general error with"]
                    #[doc = "dispatching the notification call."]
                    #[doc = ""]
                    #[doc = "\\[ id, pallet index, call index \\]"]
                    NotifyDispatchError(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                    ),
                    #[codec(index = 7)]
                    #[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
                    #[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
                    #[doc = "is not `(origin, QueryId, Response)`."]
                    #[doc = ""]
                    #[doc = "\\[ id, pallet index, call index \\]"]
                    NotifyDecodeFailed(
                        ::core::primitive::u64,
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                    ),
                    #[codec(index = 8)]
                    #[doc = "Expected query response has been received but the origin location of the response does"]
                    #[doc = "not match that expected. The query remains registered for a later, valid, response to"]
                    #[doc = "be received and acted upon."]
                    #[doc = ""]
                    #[doc = "\\[ origin location, id, expected location \\]"]
                    InvalidResponder(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                        ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 9)]
                    #[doc = "Expected query response has been received but the expected origin location placed in"]
                    #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
                    #[doc = ""]
                    #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
                    #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
                    #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
                    #[doc = "needed."]
                    #[doc = ""]
                    #[doc = "\\[ origin location, id \\]"]
                    InvalidResponderVersion(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 10)]
                    #[doc = "Received query response has been read and removed."]
                    #[doc = ""]
                    #[doc = "\\[ id \\]"]
                    ResponseTaken(::core::primitive::u64),
                    #[codec(index = 11)]
                    #[doc = "Some assets have been placed in an asset trap."]
                    #[doc = ""]
                    #[doc = "\\[ hash, origin, assets \\]"]
                    AssetsTrapped(
                        ::subxt::utils::H256,
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::VersionedMultiAssets,
                    ),
                    #[codec(index = 12)]
                    #[doc = "An XCM version change notification message has been attempted to be sent."]
                    #[doc = ""]
                    #[doc = "The cost of sending it (borne by the chain) is included."]
                    #[doc = ""]
                    #[doc = "\\[ destination, result, cost \\]"]
                    VersionChangeNotified(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u32,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 13)]
                    #[doc = "The supported version of a location has been changed. This might be through an"]
                    #[doc = "automatic notification or a manual intervention."]
                    #[doc = ""]
                    #[doc = "\\[ location, XCM version \\]"]
                    SupportedVersionChanged(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 14)]
                    #[doc = "A given location which had a version change subscription was dropped owing to an error"]
                    #[doc = "sending the notification to it."]
                    #[doc = ""]
                    #[doc = "\\[ location, query ID, error \\]"]
                    NotifyTargetSendFail(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                        runtime_types::xcm::v3::traits::Error,
                    ),
                    #[codec(index = 15)]
                    #[doc = "A given location which had a version change subscription was dropped owing to an error"]
                    #[doc = "migrating the location to our new XCM format."]
                    #[doc = ""]
                    #[doc = "\\[ location, query ID \\]"]
                    NotifyTargetMigrationFail(
                        runtime_types::xcm::VersionedMultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 16)]
                    #[doc = "Expected query response has been received but the expected querier location placed in"]
                    #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
                    #[doc = ""]
                    #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
                    #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
                    #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
                    #[doc = "needed."]
                    #[doc = ""]
                    #[doc = "\\[ origin location, id \\]"]
                    InvalidQuerierVersion(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                    ),
                    #[codec(index = 17)]
                    #[doc = "Expected query response has been received but the querier location of the response does"]
                    #[doc = "not match the expected. The query remains registered for a later, valid, response to"]
                    #[doc = "be received and acted upon."]
                    #[doc = ""]
                    #[doc = "\\[ origin location, id, expected querier, maybe actual querier \\]"]
                    InvalidQuerier(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::primitive::u64,
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 18)]
                    #[doc = "A remote has requested XCM version change notification from us and we have honored it."]
                    #[doc = "A version information message is sent to them and its cost is included."]
                    #[doc = ""]
                    #[doc = "\\[ destination location, cost \\]"]
                    VersionNotifyStarted(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 19)]
                    #[doc = "We have requested that a remote chain sends us XCM version change notifications."]
                    #[doc = ""]
                    #[doc = "\\[ destination location, cost \\]"]
                    VersionNotifyRequested(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 20)]
                    #[doc = "We have requested that a remote chain stops sending us XCM version change notifications."]
                    #[doc = ""]
                    #[doc = "\\[ destination location, cost \\]"]
                    VersionNotifyUnrequested(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 21)]
                    #[doc = "Fees were paid from a location for an operation (often for using `SendXcm`)."]
                    #[doc = ""]
                    #[doc = "\\[ paying location, fees \\]"]
                    FeesPaid(
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::v3::multiasset::MultiAssets,
                    ),
                    #[codec(index = 22)]
                    #[doc = "Some assets have been claimed from an asset trap"]
                    #[doc = ""]
                    #[doc = "\\[ hash, origin, assets \\]"]
                    AssetsClaimed(
                        ::subxt::utils::H256,
                        runtime_types::xcm::v3::multilocation::MultiLocation,
                        runtime_types::xcm::VersionedMultiAssets,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Origin {
                    #[codec(index = 0)]
                    Xcm(runtime_types::xcm::v3::multilocation::MultiLocation),
                    #[codec(index = 1)]
                    Response(runtime_types::xcm::v3::multilocation::MultiLocation),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum QueryStatus<_0> {
                    #[codec(index = 0)]
                    Pending {
                        responder: runtime_types::xcm::VersionedMultiLocation,
                        maybe_match_querier:
                            ::core::option::Option<runtime_types::xcm::VersionedMultiLocation>,
                        maybe_notify:
                            ::core::option::Option<(::core::primitive::u8, ::core::primitive::u8)>,
                        timeout: _0,
                    },
                    #[codec(index = 1)]
                    VersionNotifier {
                        origin: runtime_types::xcm::VersionedMultiLocation,
                        is_active: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    Ready {
                        response: runtime_types::xcm::VersionedResponse,
                        at: _0,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoteLockedFungibleRecord<_0> {
                    pub amount: ::core::primitive::u128,
                    pub owner: runtime_types::xcm::VersionedMultiLocation,
                    pub locker: runtime_types::xcm::VersionedMultiLocation,
                    pub consumers: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        _0,
                        ::core::primitive::u128,
                    )>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum VersionMigrationStage {
                    #[codec(index = 0)]
                    MigrateSupportedVersion,
                    #[codec(index = 1)]
                    MigrateVersionNotifiers,
                    #[codec(index = 2)]
                    NotifyCurrentTargets(
                        ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                    ),
                    #[codec(index = 3)]
                    MigrateAndNotifyOldTargets,
                }
            }
        }
        pub mod pallet_xcm_transactor {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Register a derivative index for an account id. Dispatchable by"]
                    #[doc = "DerivativeAddressRegistrationOrigin"]
                    #[doc = ""]
                    #[doc = "We do not store the derivative address, but only the index. We do not need to store"]
                    #[doc = "the derivative address to issue calls, only the index is enough"]
                    #[doc = ""]
                    #[doc = "For now an index is registered for all possible destinations and not per-destination."]
                    #[doc = "We can change this in the future although it would just make things more complicated"]
                    register {
                        who: runtime_types::account::AccountId20,
                        index: ::core::primitive::u16,
                    },
                    #[codec(index = 1)]
                    #[doc = "De-Register a derivative index. This prevents an account to use a derivative address"]
                    #[doc = "(represented by an index) from our of our sovereign accounts anymore"]
                    deregister { index: ::core::primitive::u16 },
                    #[codec(index = 2)]
                    #[doc = "Transact the inner call through a derivative account in a destination chain,"]
                    #[doc = "using 'fee_location' to pay for the fees. This fee_location is given as a multilocation"]
                    #[doc = ""]
                    #[doc = "The caller needs to have the index registered in this pallet. The fee multiasset needs"]
                    #[doc = "to be a reserve asset for the destination transactor::multilocation."]
                    transact_through_derivative {
                        dest: runtime_types::moonbase_runtime::xcm_config::Transactors,
                        index: ::core::primitive::u16,
                        fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
                            runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                        >,
                        inner_call: ::std::vec::Vec<::core::primitive::u8>,
                        weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
                        refund: ::core::primitive::bool,
                    },
                    #[codec(index = 3)]
                    #[doc = "Transact the call through the sovereign account in a destination chain,"]
                    #[doc = "'fee_payer' pays for the fee"]
                    #[doc = ""]
                    #[doc = "SovereignAccountDispatcherOrigin callable only"]
                    transact_through_sovereign {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        fee_payer: runtime_types::account::AccountId20,
                        fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
                            runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                        >,
                        call: ::std::vec::Vec<::core::primitive::u8>,
                        origin_kind: runtime_types::xcm::v2::OriginKind,
                        weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
                        refund: ::core::primitive::bool,
                    },
                    #[codec(index = 4)]
                    #[doc = "Change the transact info of a location"]
                    set_transact_info {
                        location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        transact_extra_weight: runtime_types::sp_weights::weight_v2::Weight,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                        transact_extra_weight_signed:
                            ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Remove the transact info of a location"]
                    remove_transact_info {
                        location: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Transact the call through the a signed origin in this chain"]
                    #[doc = "that should be converted to a transaction dispatch account in the destination chain"]
                    #[doc = "by any method implemented in the destination chains runtime"]
                    #[doc = ""]
                    #[doc = "This time we are giving the currency as a currencyId instead of multilocation"]
                    transact_through_signed {
                        dest: ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
                            runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                        >,
                        call: ::std::vec::Vec<::core::primitive::u8>,
                        weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
                        refund: ::core::primitive::bool,
                    },
                    #[codec(index = 7)]
                    #[doc = "Set the fee per second of an asset on its reserve chain"]
                    set_fee_per_second {
                        asset_location:
                            ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                        fee_per_second: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Remove the fee per second of an asset on its reserve chain"]
                    remove_fee_per_second {
                        asset_location:
                            ::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>,
                    },
                    #[codec(index = 9)]
                    #[doc = "Manage HRMP operations"]
                    hrmp_manage {
                        action: runtime_types::pallet_xcm_transactor::pallet::HrmpOperation,
                        fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
                            runtime_types::moonbase_runtime::xcm_config::CurrencyId,
                        >,
                        weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Currency<_0> {
                    #[codec(index = 0)]
                    AsCurrencyId(_0),
                    #[codec(index = 1)]
                    AsMultiLocation(::std::boxed::Box<runtime_types::xcm::VersionedMultiLocation>),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CurrencyPayment<_0> {
                    pub currency: runtime_types::pallet_xcm_transactor::pallet::Currency<_0>,
                    pub fee_amount: ::core::option::Option<::core::primitive::u128>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "An error that can occur while executing the mapping pallet's logic."]
                pub enum Error {
                    #[codec(index = 0)]
                    IndexAlreadyClaimed,
                    #[codec(index = 1)]
                    UnclaimedIndex,
                    #[codec(index = 2)]
                    NotOwner,
                    #[codec(index = 3)]
                    UnweighableMessage,
                    #[codec(index = 4)]
                    CannotReanchor,
                    #[codec(index = 5)]
                    AssetHasNoReserve,
                    #[codec(index = 6)]
                    InvalidDest,
                    #[codec(index = 7)]
                    NotCrossChainTransfer,
                    #[codec(index = 8)]
                    AssetIsNotReserveInDestination,
                    #[codec(index = 9)]
                    DestinationNotInvertible,
                    #[codec(index = 10)]
                    ErrorDelivering,
                    #[codec(index = 11)]
                    DispatchWeightBiggerThanTotalWeight,
                    #[codec(index = 12)]
                    WeightOverflow,
                    #[codec(index = 13)]
                    AmountOverflow,
                    #[codec(index = 14)]
                    TransactorInfoNotSet,
                    #[codec(index = 15)]
                    NotCrossChainTransferableCurrency,
                    #[codec(index = 16)]
                    XcmExecuteError,
                    #[codec(index = 17)]
                    BadVersion,
                    #[codec(index = 18)]
                    MaxWeightTransactReached,
                    #[codec(index = 19)]
                    UnableToWithdrawAsset,
                    #[codec(index = 20)]
                    FeePerSecondNotSet,
                    #[codec(index = 21)]
                    SignedTransactNotAllowedForDestination,
                    #[codec(index = 22)]
                    FailedMultiLocationToJunction,
                    #[codec(index = 23)]
                    HrmpHandlerNotImplemented,
                    #[codec(index = 24)]
                    TooMuchFeeUsed,
                    #[codec(index = 25)]
                    ErrorValidating,
                    #[codec(index = 26)]
                    RefundNotSupportedWithTransactInfo,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    # [codec (index = 0)] # [doc = "Transacted the inner call through a derivative account in a destination chain."] TransactedDerivative { account_id : runtime_types :: account :: AccountId20 , dest : runtime_types :: xcm :: v3 :: multilocation :: MultiLocation , call : :: std :: vec :: Vec < :: core :: primitive :: u8 > , index : :: core :: primitive :: u16 , } , # [codec (index = 1)] # [doc = "Transacted the call through the sovereign account in a destination chain."] TransactedSovereign { fee_payer : runtime_types :: account :: AccountId20 , dest : runtime_types :: xcm :: v3 :: multilocation :: MultiLocation , call : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 2)] # [doc = "Transacted the call through a signed account in a destination chain."] TransactedSigned { fee_payer : runtime_types :: account :: AccountId20 , dest : runtime_types :: xcm :: v3 :: multilocation :: MultiLocation , call : :: std :: vec :: Vec < :: core :: primitive :: u8 > , } , # [codec (index = 3)] # [doc = "Registered a derivative index for an account id."] RegisteredDerivative { account_id : runtime_types :: account :: AccountId20 , index : :: core :: primitive :: u16 , } , # [codec (index = 4)] DeRegisteredDerivative { index : :: core :: primitive :: u16 , } , # [codec (index = 5)] # [doc = "Transact failed"] TransactFailed { error : runtime_types :: xcm :: v3 :: traits :: Error , } , # [codec (index = 6)] # [doc = "Changed the transact info of a location"] TransactInfoChanged { location : runtime_types :: xcm :: v3 :: multilocation :: MultiLocation , remote_info : runtime_types :: pallet_xcm_transactor :: pallet :: RemoteTransactInfoWithMaxWeight , } , # [codec (index = 7)] # [doc = "Removed the transact info of a location"] TransactInfoRemoved { location : runtime_types :: xcm :: v3 :: multilocation :: MultiLocation , } , # [codec (index = 8)] # [doc = "Set dest fee per second"] DestFeePerSecondChanged { location : runtime_types :: xcm :: v3 :: multilocation :: MultiLocation , fee_per_second : :: core :: primitive :: u128 , } , # [codec (index = 9)] # [doc = "Remove dest fee per second"] DestFeePerSecondRemoved { location : runtime_types :: xcm :: v3 :: multilocation :: MultiLocation , } , # [codec (index = 10)] # [doc = "HRMP manage action succesfully sent"] HrmpManagementSent { action : runtime_types :: pallet_xcm_transactor :: pallet :: HrmpOperation , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HrmpInitParams {
                    pub para_id: runtime_types::polkadot_parachain::primitives::Id,
                    pub proposed_max_capacity: ::core::primitive::u32,
                    pub proposed_max_message_size: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum HrmpOperation {
                    #[codec(index = 0)]
                    InitOpen(runtime_types::pallet_xcm_transactor::pallet::HrmpInitParams),
                    #[codec(index = 1)]
                    Accept {
                        para_id: runtime_types::polkadot_parachain::primitives::Id,
                    },
                    #[codec(index = 2)]
                    Close(runtime_types::polkadot_parachain::primitives::HrmpChannelId),
                    #[codec(index = 3)]
                    Cancel {
                        channel_id: runtime_types::polkadot_parachain::primitives::HrmpChannelId,
                        open_requests: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoteTransactInfoWithMaxWeight {
                    pub transact_extra_weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub transact_extra_weight_signed:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransactWeights {
                    pub transact_required_weight_at_most:
                        runtime_types::sp_weights::weight_v2::Weight,
                    pub overall_weight:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                }
            }
        }
        pub mod polkadot_core_primitives {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InboundDownwardMessage<_0> {
                pub sent_at: _0,
                pub msg: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InboundHrmpMessage<_0> {
                pub sent_at: _0,
                pub data: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OutboundHrmpMessage<_0> {
                pub recipient: _0,
                pub data: ::std::vec::Vec<::core::primitive::u8>,
            }
        }
        pub mod polkadot_parachain {
            use super::runtime_types;
            pub mod primitives {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HeadData(pub ::std::vec::Vec<::core::primitive::u8>);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HrmpChannelId {
                    pub sender: runtime_types::polkadot_parachain::primitives::Id,
                    pub recipient: runtime_types::polkadot_parachain::primitives::Id,
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Id(pub ::core::primitive::u32);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum XcmpMessageFormat {
                    #[codec(index = 0)]
                    ConcatenatedVersionedXcm,
                    #[codec(index = 1)]
                    ConcatenatedEncodedBlob,
                    #[codec(index = 2)]
                    Signals,
                }
            }
        }
        pub mod polkadot_primitives {
            use super::runtime_types;
            pub mod v4 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AbridgedHostConfiguration {
                    pub max_code_size: ::core::primitive::u32,
                    pub max_head_data_size: ::core::primitive::u32,
                    pub max_upward_queue_count: ::core::primitive::u32,
                    pub max_upward_queue_size: ::core::primitive::u32,
                    pub max_upward_message_size: ::core::primitive::u32,
                    pub max_upward_message_num_per_candidate: ::core::primitive::u32,
                    pub hrmp_max_message_num_per_candidate: ::core::primitive::u32,
                    pub validation_upgrade_cooldown: ::core::primitive::u32,
                    pub validation_upgrade_delay: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AbridgedHrmpChannel {
                    pub max_capacity: ::core::primitive::u32,
                    pub max_total_size: ::core::primitive::u32,
                    pub max_message_size: ::core::primitive::u32,
                    pub msg_count: ::core::primitive::u32,
                    pub total_size: ::core::primitive::u32,
                    pub mqc_head: ::core::option::Option<::subxt::utils::H256>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PersistedValidationData<_0, _1> {
                    pub parent_head: runtime_types::polkadot_parachain::primitives::HeadData,
                    pub relay_parent_number: _1,
                    pub relay_parent_storage_root: _0,
                    pub max_pov_size: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum UpgradeRestriction {
                    #[codec(index = 0)]
                    Present,
                }
            }
        }
        pub mod primitive_types {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct U256(pub [::core::primitive::u64; 4usize]);
        }
        pub mod session_keys_primitives {
            use super::runtime_types;
            pub mod vrf {
                use super::runtime_types;
                pub mod vrf_crypto {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Public(pub runtime_types::sp_core::sr25519::Public);
                }
            }
        }
        pub mod sp_arithmetic {
            use super::runtime_types;
            pub mod fixed_point {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FixedI64(pub ::core::primitive::i64);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FixedU128(pub ::core::primitive::u128);
            }
            pub mod per_things {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Perbill(pub ::core::primitive::u32);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Percent(pub ::core::primitive::u8);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Permill(pub ::core::primitive::u32);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ArithmeticError {
                #[codec(index = 0)]
                Underflow,
                #[codec(index = 1)]
                Overflow,
                #[codec(index = 2)]
                DivisionByZero,
            }
        }
        pub mod sp_core {
            use super::runtime_types;
            pub mod ecdsa {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 65usize]);
            }
            pub mod ed25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            pub mod sr25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Void {}
        }
        pub mod sp_runtime {
            use super::runtime_types;
            pub mod generic {
                use super::runtime_types;
                pub mod digest {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Digest {
                        pub logs:
                            ::std::vec::Vec<runtime_types::sp_runtime::generic::digest::DigestItem>,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum DigestItem {
                        #[codec(index = 6)]
                        PreRuntime(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 4)]
                        Consensus(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 5)]
                        Seal(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 0)]
                        Other(::std::vec::Vec<::core::primitive::u8>),
                        #[codec(index = 8)]
                        RuntimeEnvironmentUpdated,
                    }
                }
                pub mod era {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Era {
                        #[codec(index = 0)]
                        Immortal,
                        #[codec(index = 1)]
                        Mortal1(::core::primitive::u8),
                        #[codec(index = 2)]
                        Mortal2(::core::primitive::u8),
                        #[codec(index = 3)]
                        Mortal3(::core::primitive::u8),
                        #[codec(index = 4)]
                        Mortal4(::core::primitive::u8),
                        #[codec(index = 5)]
                        Mortal5(::core::primitive::u8),
                        #[codec(index = 6)]
                        Mortal6(::core::primitive::u8),
                        #[codec(index = 7)]
                        Mortal7(::core::primitive::u8),
                        #[codec(index = 8)]
                        Mortal8(::core::primitive::u8),
                        #[codec(index = 9)]
                        Mortal9(::core::primitive::u8),
                        #[codec(index = 10)]
                        Mortal10(::core::primitive::u8),
                        #[codec(index = 11)]
                        Mortal11(::core::primitive::u8),
                        #[codec(index = 12)]
                        Mortal12(::core::primitive::u8),
                        #[codec(index = 13)]
                        Mortal13(::core::primitive::u8),
                        #[codec(index = 14)]
                        Mortal14(::core::primitive::u8),
                        #[codec(index = 15)]
                        Mortal15(::core::primitive::u8),
                        #[codec(index = 16)]
                        Mortal16(::core::primitive::u8),
                        #[codec(index = 17)]
                        Mortal17(::core::primitive::u8),
                        #[codec(index = 18)]
                        Mortal18(::core::primitive::u8),
                        #[codec(index = 19)]
                        Mortal19(::core::primitive::u8),
                        #[codec(index = 20)]
                        Mortal20(::core::primitive::u8),
                        #[codec(index = 21)]
                        Mortal21(::core::primitive::u8),
                        #[codec(index = 22)]
                        Mortal22(::core::primitive::u8),
                        #[codec(index = 23)]
                        Mortal23(::core::primitive::u8),
                        #[codec(index = 24)]
                        Mortal24(::core::primitive::u8),
                        #[codec(index = 25)]
                        Mortal25(::core::primitive::u8),
                        #[codec(index = 26)]
                        Mortal26(::core::primitive::u8),
                        #[codec(index = 27)]
                        Mortal27(::core::primitive::u8),
                        #[codec(index = 28)]
                        Mortal28(::core::primitive::u8),
                        #[codec(index = 29)]
                        Mortal29(::core::primitive::u8),
                        #[codec(index = 30)]
                        Mortal30(::core::primitive::u8),
                        #[codec(index = 31)]
                        Mortal31(::core::primitive::u8),
                        #[codec(index = 32)]
                        Mortal32(::core::primitive::u8),
                        #[codec(index = 33)]
                        Mortal33(::core::primitive::u8),
                        #[codec(index = 34)]
                        Mortal34(::core::primitive::u8),
                        #[codec(index = 35)]
                        Mortal35(::core::primitive::u8),
                        #[codec(index = 36)]
                        Mortal36(::core::primitive::u8),
                        #[codec(index = 37)]
                        Mortal37(::core::primitive::u8),
                        #[codec(index = 38)]
                        Mortal38(::core::primitive::u8),
                        #[codec(index = 39)]
                        Mortal39(::core::primitive::u8),
                        #[codec(index = 40)]
                        Mortal40(::core::primitive::u8),
                        #[codec(index = 41)]
                        Mortal41(::core::primitive::u8),
                        #[codec(index = 42)]
                        Mortal42(::core::primitive::u8),
                        #[codec(index = 43)]
                        Mortal43(::core::primitive::u8),
                        #[codec(index = 44)]
                        Mortal44(::core::primitive::u8),
                        #[codec(index = 45)]
                        Mortal45(::core::primitive::u8),
                        #[codec(index = 46)]
                        Mortal46(::core::primitive::u8),
                        #[codec(index = 47)]
                        Mortal47(::core::primitive::u8),
                        #[codec(index = 48)]
                        Mortal48(::core::primitive::u8),
                        #[codec(index = 49)]
                        Mortal49(::core::primitive::u8),
                        #[codec(index = 50)]
                        Mortal50(::core::primitive::u8),
                        #[codec(index = 51)]
                        Mortal51(::core::primitive::u8),
                        #[codec(index = 52)]
                        Mortal52(::core::primitive::u8),
                        #[codec(index = 53)]
                        Mortal53(::core::primitive::u8),
                        #[codec(index = 54)]
                        Mortal54(::core::primitive::u8),
                        #[codec(index = 55)]
                        Mortal55(::core::primitive::u8),
                        #[codec(index = 56)]
                        Mortal56(::core::primitive::u8),
                        #[codec(index = 57)]
                        Mortal57(::core::primitive::u8),
                        #[codec(index = 58)]
                        Mortal58(::core::primitive::u8),
                        #[codec(index = 59)]
                        Mortal59(::core::primitive::u8),
                        #[codec(index = 60)]
                        Mortal60(::core::primitive::u8),
                        #[codec(index = 61)]
                        Mortal61(::core::primitive::u8),
                        #[codec(index = 62)]
                        Mortal62(::core::primitive::u8),
                        #[codec(index = 63)]
                        Mortal63(::core::primitive::u8),
                        #[codec(index = 64)]
                        Mortal64(::core::primitive::u8),
                        #[codec(index = 65)]
                        Mortal65(::core::primitive::u8),
                        #[codec(index = 66)]
                        Mortal66(::core::primitive::u8),
                        #[codec(index = 67)]
                        Mortal67(::core::primitive::u8),
                        #[codec(index = 68)]
                        Mortal68(::core::primitive::u8),
                        #[codec(index = 69)]
                        Mortal69(::core::primitive::u8),
                        #[codec(index = 70)]
                        Mortal70(::core::primitive::u8),
                        #[codec(index = 71)]
                        Mortal71(::core::primitive::u8),
                        #[codec(index = 72)]
                        Mortal72(::core::primitive::u8),
                        #[codec(index = 73)]
                        Mortal73(::core::primitive::u8),
                        #[codec(index = 74)]
                        Mortal74(::core::primitive::u8),
                        #[codec(index = 75)]
                        Mortal75(::core::primitive::u8),
                        #[codec(index = 76)]
                        Mortal76(::core::primitive::u8),
                        #[codec(index = 77)]
                        Mortal77(::core::primitive::u8),
                        #[codec(index = 78)]
                        Mortal78(::core::primitive::u8),
                        #[codec(index = 79)]
                        Mortal79(::core::primitive::u8),
                        #[codec(index = 80)]
                        Mortal80(::core::primitive::u8),
                        #[codec(index = 81)]
                        Mortal81(::core::primitive::u8),
                        #[codec(index = 82)]
                        Mortal82(::core::primitive::u8),
                        #[codec(index = 83)]
                        Mortal83(::core::primitive::u8),
                        #[codec(index = 84)]
                        Mortal84(::core::primitive::u8),
                        #[codec(index = 85)]
                        Mortal85(::core::primitive::u8),
                        #[codec(index = 86)]
                        Mortal86(::core::primitive::u8),
                        #[codec(index = 87)]
                        Mortal87(::core::primitive::u8),
                        #[codec(index = 88)]
                        Mortal88(::core::primitive::u8),
                        #[codec(index = 89)]
                        Mortal89(::core::primitive::u8),
                        #[codec(index = 90)]
                        Mortal90(::core::primitive::u8),
                        #[codec(index = 91)]
                        Mortal91(::core::primitive::u8),
                        #[codec(index = 92)]
                        Mortal92(::core::primitive::u8),
                        #[codec(index = 93)]
                        Mortal93(::core::primitive::u8),
                        #[codec(index = 94)]
                        Mortal94(::core::primitive::u8),
                        #[codec(index = 95)]
                        Mortal95(::core::primitive::u8),
                        #[codec(index = 96)]
                        Mortal96(::core::primitive::u8),
                        #[codec(index = 97)]
                        Mortal97(::core::primitive::u8),
                        #[codec(index = 98)]
                        Mortal98(::core::primitive::u8),
                        #[codec(index = 99)]
                        Mortal99(::core::primitive::u8),
                        #[codec(index = 100)]
                        Mortal100(::core::primitive::u8),
                        #[codec(index = 101)]
                        Mortal101(::core::primitive::u8),
                        #[codec(index = 102)]
                        Mortal102(::core::primitive::u8),
                        #[codec(index = 103)]
                        Mortal103(::core::primitive::u8),
                        #[codec(index = 104)]
                        Mortal104(::core::primitive::u8),
                        #[codec(index = 105)]
                        Mortal105(::core::primitive::u8),
                        #[codec(index = 106)]
                        Mortal106(::core::primitive::u8),
                        #[codec(index = 107)]
                        Mortal107(::core::primitive::u8),
                        #[codec(index = 108)]
                        Mortal108(::core::primitive::u8),
                        #[codec(index = 109)]
                        Mortal109(::core::primitive::u8),
                        #[codec(index = 110)]
                        Mortal110(::core::primitive::u8),
                        #[codec(index = 111)]
                        Mortal111(::core::primitive::u8),
                        #[codec(index = 112)]
                        Mortal112(::core::primitive::u8),
                        #[codec(index = 113)]
                        Mortal113(::core::primitive::u8),
                        #[codec(index = 114)]
                        Mortal114(::core::primitive::u8),
                        #[codec(index = 115)]
                        Mortal115(::core::primitive::u8),
                        #[codec(index = 116)]
                        Mortal116(::core::primitive::u8),
                        #[codec(index = 117)]
                        Mortal117(::core::primitive::u8),
                        #[codec(index = 118)]
                        Mortal118(::core::primitive::u8),
                        #[codec(index = 119)]
                        Mortal119(::core::primitive::u8),
                        #[codec(index = 120)]
                        Mortal120(::core::primitive::u8),
                        #[codec(index = 121)]
                        Mortal121(::core::primitive::u8),
                        #[codec(index = 122)]
                        Mortal122(::core::primitive::u8),
                        #[codec(index = 123)]
                        Mortal123(::core::primitive::u8),
                        #[codec(index = 124)]
                        Mortal124(::core::primitive::u8),
                        #[codec(index = 125)]
                        Mortal125(::core::primitive::u8),
                        #[codec(index = 126)]
                        Mortal126(::core::primitive::u8),
                        #[codec(index = 127)]
                        Mortal127(::core::primitive::u8),
                        #[codec(index = 128)]
                        Mortal128(::core::primitive::u8),
                        #[codec(index = 129)]
                        Mortal129(::core::primitive::u8),
                        #[codec(index = 130)]
                        Mortal130(::core::primitive::u8),
                        #[codec(index = 131)]
                        Mortal131(::core::primitive::u8),
                        #[codec(index = 132)]
                        Mortal132(::core::primitive::u8),
                        #[codec(index = 133)]
                        Mortal133(::core::primitive::u8),
                        #[codec(index = 134)]
                        Mortal134(::core::primitive::u8),
                        #[codec(index = 135)]
                        Mortal135(::core::primitive::u8),
                        #[codec(index = 136)]
                        Mortal136(::core::primitive::u8),
                        #[codec(index = 137)]
                        Mortal137(::core::primitive::u8),
                        #[codec(index = 138)]
                        Mortal138(::core::primitive::u8),
                        #[codec(index = 139)]
                        Mortal139(::core::primitive::u8),
                        #[codec(index = 140)]
                        Mortal140(::core::primitive::u8),
                        #[codec(index = 141)]
                        Mortal141(::core::primitive::u8),
                        #[codec(index = 142)]
                        Mortal142(::core::primitive::u8),
                        #[codec(index = 143)]
                        Mortal143(::core::primitive::u8),
                        #[codec(index = 144)]
                        Mortal144(::core::primitive::u8),
                        #[codec(index = 145)]
                        Mortal145(::core::primitive::u8),
                        #[codec(index = 146)]
                        Mortal146(::core::primitive::u8),
                        #[codec(index = 147)]
                        Mortal147(::core::primitive::u8),
                        #[codec(index = 148)]
                        Mortal148(::core::primitive::u8),
                        #[codec(index = 149)]
                        Mortal149(::core::primitive::u8),
                        #[codec(index = 150)]
                        Mortal150(::core::primitive::u8),
                        #[codec(index = 151)]
                        Mortal151(::core::primitive::u8),
                        #[codec(index = 152)]
                        Mortal152(::core::primitive::u8),
                        #[codec(index = 153)]
                        Mortal153(::core::primitive::u8),
                        #[codec(index = 154)]
                        Mortal154(::core::primitive::u8),
                        #[codec(index = 155)]
                        Mortal155(::core::primitive::u8),
                        #[codec(index = 156)]
                        Mortal156(::core::primitive::u8),
                        #[codec(index = 157)]
                        Mortal157(::core::primitive::u8),
                        #[codec(index = 158)]
                        Mortal158(::core::primitive::u8),
                        #[codec(index = 159)]
                        Mortal159(::core::primitive::u8),
                        #[codec(index = 160)]
                        Mortal160(::core::primitive::u8),
                        #[codec(index = 161)]
                        Mortal161(::core::primitive::u8),
                        #[codec(index = 162)]
                        Mortal162(::core::primitive::u8),
                        #[codec(index = 163)]
                        Mortal163(::core::primitive::u8),
                        #[codec(index = 164)]
                        Mortal164(::core::primitive::u8),
                        #[codec(index = 165)]
                        Mortal165(::core::primitive::u8),
                        #[codec(index = 166)]
                        Mortal166(::core::primitive::u8),
                        #[codec(index = 167)]
                        Mortal167(::core::primitive::u8),
                        #[codec(index = 168)]
                        Mortal168(::core::primitive::u8),
                        #[codec(index = 169)]
                        Mortal169(::core::primitive::u8),
                        #[codec(index = 170)]
                        Mortal170(::core::primitive::u8),
                        #[codec(index = 171)]
                        Mortal171(::core::primitive::u8),
                        #[codec(index = 172)]
                        Mortal172(::core::primitive::u8),
                        #[codec(index = 173)]
                        Mortal173(::core::primitive::u8),
                        #[codec(index = 174)]
                        Mortal174(::core::primitive::u8),
                        #[codec(index = 175)]
                        Mortal175(::core::primitive::u8),
                        #[codec(index = 176)]
                        Mortal176(::core::primitive::u8),
                        #[codec(index = 177)]
                        Mortal177(::core::primitive::u8),
                        #[codec(index = 178)]
                        Mortal178(::core::primitive::u8),
                        #[codec(index = 179)]
                        Mortal179(::core::primitive::u8),
                        #[codec(index = 180)]
                        Mortal180(::core::primitive::u8),
                        #[codec(index = 181)]
                        Mortal181(::core::primitive::u8),
                        #[codec(index = 182)]
                        Mortal182(::core::primitive::u8),
                        #[codec(index = 183)]
                        Mortal183(::core::primitive::u8),
                        #[codec(index = 184)]
                        Mortal184(::core::primitive::u8),
                        #[codec(index = 185)]
                        Mortal185(::core::primitive::u8),
                        #[codec(index = 186)]
                        Mortal186(::core::primitive::u8),
                        #[codec(index = 187)]
                        Mortal187(::core::primitive::u8),
                        #[codec(index = 188)]
                        Mortal188(::core::primitive::u8),
                        #[codec(index = 189)]
                        Mortal189(::core::primitive::u8),
                        #[codec(index = 190)]
                        Mortal190(::core::primitive::u8),
                        #[codec(index = 191)]
                        Mortal191(::core::primitive::u8),
                        #[codec(index = 192)]
                        Mortal192(::core::primitive::u8),
                        #[codec(index = 193)]
                        Mortal193(::core::primitive::u8),
                        #[codec(index = 194)]
                        Mortal194(::core::primitive::u8),
                        #[codec(index = 195)]
                        Mortal195(::core::primitive::u8),
                        #[codec(index = 196)]
                        Mortal196(::core::primitive::u8),
                        #[codec(index = 197)]
                        Mortal197(::core::primitive::u8),
                        #[codec(index = 198)]
                        Mortal198(::core::primitive::u8),
                        #[codec(index = 199)]
                        Mortal199(::core::primitive::u8),
                        #[codec(index = 200)]
                        Mortal200(::core::primitive::u8),
                        #[codec(index = 201)]
                        Mortal201(::core::primitive::u8),
                        #[codec(index = 202)]
                        Mortal202(::core::primitive::u8),
                        #[codec(index = 203)]
                        Mortal203(::core::primitive::u8),
                        #[codec(index = 204)]
                        Mortal204(::core::primitive::u8),
                        #[codec(index = 205)]
                        Mortal205(::core::primitive::u8),
                        #[codec(index = 206)]
                        Mortal206(::core::primitive::u8),
                        #[codec(index = 207)]
                        Mortal207(::core::primitive::u8),
                        #[codec(index = 208)]
                        Mortal208(::core::primitive::u8),
                        #[codec(index = 209)]
                        Mortal209(::core::primitive::u8),
                        #[codec(index = 210)]
                        Mortal210(::core::primitive::u8),
                        #[codec(index = 211)]
                        Mortal211(::core::primitive::u8),
                        #[codec(index = 212)]
                        Mortal212(::core::primitive::u8),
                        #[codec(index = 213)]
                        Mortal213(::core::primitive::u8),
                        #[codec(index = 214)]
                        Mortal214(::core::primitive::u8),
                        #[codec(index = 215)]
                        Mortal215(::core::primitive::u8),
                        #[codec(index = 216)]
                        Mortal216(::core::primitive::u8),
                        #[codec(index = 217)]
                        Mortal217(::core::primitive::u8),
                        #[codec(index = 218)]
                        Mortal218(::core::primitive::u8),
                        #[codec(index = 219)]
                        Mortal219(::core::primitive::u8),
                        #[codec(index = 220)]
                        Mortal220(::core::primitive::u8),
                        #[codec(index = 221)]
                        Mortal221(::core::primitive::u8),
                        #[codec(index = 222)]
                        Mortal222(::core::primitive::u8),
                        #[codec(index = 223)]
                        Mortal223(::core::primitive::u8),
                        #[codec(index = 224)]
                        Mortal224(::core::primitive::u8),
                        #[codec(index = 225)]
                        Mortal225(::core::primitive::u8),
                        #[codec(index = 226)]
                        Mortal226(::core::primitive::u8),
                        #[codec(index = 227)]
                        Mortal227(::core::primitive::u8),
                        #[codec(index = 228)]
                        Mortal228(::core::primitive::u8),
                        #[codec(index = 229)]
                        Mortal229(::core::primitive::u8),
                        #[codec(index = 230)]
                        Mortal230(::core::primitive::u8),
                        #[codec(index = 231)]
                        Mortal231(::core::primitive::u8),
                        #[codec(index = 232)]
                        Mortal232(::core::primitive::u8),
                        #[codec(index = 233)]
                        Mortal233(::core::primitive::u8),
                        #[codec(index = 234)]
                        Mortal234(::core::primitive::u8),
                        #[codec(index = 235)]
                        Mortal235(::core::primitive::u8),
                        #[codec(index = 236)]
                        Mortal236(::core::primitive::u8),
                        #[codec(index = 237)]
                        Mortal237(::core::primitive::u8),
                        #[codec(index = 238)]
                        Mortal238(::core::primitive::u8),
                        #[codec(index = 239)]
                        Mortal239(::core::primitive::u8),
                        #[codec(index = 240)]
                        Mortal240(::core::primitive::u8),
                        #[codec(index = 241)]
                        Mortal241(::core::primitive::u8),
                        #[codec(index = 242)]
                        Mortal242(::core::primitive::u8),
                        #[codec(index = 243)]
                        Mortal243(::core::primitive::u8),
                        #[codec(index = 244)]
                        Mortal244(::core::primitive::u8),
                        #[codec(index = 245)]
                        Mortal245(::core::primitive::u8),
                        #[codec(index = 246)]
                        Mortal246(::core::primitive::u8),
                        #[codec(index = 247)]
                        Mortal247(::core::primitive::u8),
                        #[codec(index = 248)]
                        Mortal248(::core::primitive::u8),
                        #[codec(index = 249)]
                        Mortal249(::core::primitive::u8),
                        #[codec(index = 250)]
                        Mortal250(::core::primitive::u8),
                        #[codec(index = 251)]
                        Mortal251(::core::primitive::u8),
                        #[codec(index = 252)]
                        Mortal252(::core::primitive::u8),
                        #[codec(index = 253)]
                        Mortal253(::core::primitive::u8),
                        #[codec(index = 254)]
                        Mortal254(::core::primitive::u8),
                        #[codec(index = 255)]
                        Mortal255(::core::primitive::u8),
                    }
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum DispatchError {
                #[codec(index = 0)]
                Other,
                #[codec(index = 1)]
                CannotLookup,
                #[codec(index = 2)]
                BadOrigin,
                #[codec(index = 3)]
                Module(runtime_types::sp_runtime::ModuleError),
                #[codec(index = 4)]
                ConsumerRemaining,
                #[codec(index = 5)]
                NoProviders,
                #[codec(index = 6)]
                TooManyConsumers,
                #[codec(index = 7)]
                Token(runtime_types::sp_runtime::TokenError),
                #[codec(index = 8)]
                Arithmetic(runtime_types::sp_arithmetic::ArithmeticError),
                #[codec(index = 9)]
                Transactional(runtime_types::sp_runtime::TransactionalError),
                #[codec(index = 10)]
                Exhausted,
                #[codec(index = 11)]
                Corruption,
                #[codec(index = 12)]
                Unavailable,
                #[codec(index = 13)]
                RootNotAllowed,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DispatchErrorWithPostInfo<_0> {
                pub post_info: _0,
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ModuleError {
                pub index: ::core::primitive::u8,
                pub error: [::core::primitive::u8; 4usize],
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum MultiSignature {
                #[codec(index = 0)]
                Ed25519(runtime_types::sp_core::ed25519::Signature),
                #[codec(index = 1)]
                Sr25519(runtime_types::sp_core::sr25519::Signature),
                #[codec(index = 2)]
                Ecdsa(runtime_types::sp_core::ecdsa::Signature),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum TokenError {
                #[codec(index = 0)]
                FundsUnavailable,
                #[codec(index = 1)]
                OnlyProvider,
                #[codec(index = 2)]
                BelowMinimum,
                #[codec(index = 3)]
                CannotCreate,
                #[codec(index = 4)]
                UnknownAsset,
                #[codec(index = 5)]
                Frozen,
                #[codec(index = 6)]
                Unsupported,
                #[codec(index = 7)]
                CannotCreateHold,
                #[codec(index = 8)]
                NotExpendable,
                #[codec(index = 9)]
                Blocked,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum TransactionalError {
                #[codec(index = 0)]
                LimitReached,
                #[codec(index = 1)]
                NoLayer,
            }
        }
        pub mod sp_trie {
            use super::runtime_types;
            pub mod storage_proof {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct StorageProof {
                    pub trie_nodes: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                }
            }
        }
        pub mod sp_version {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RuntimeVersion {
                pub spec_name: ::std::string::String,
                pub impl_name: ::std::string::String,
                pub authoring_version: ::core::primitive::u32,
                pub spec_version: ::core::primitive::u32,
                pub impl_version: ::core::primitive::u32,
                pub apis:
                    ::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
                pub transaction_version: ::core::primitive::u32,
                pub state_version: ::core::primitive::u8,
            }
        }
        pub mod sp_weights {
            use super::runtime_types;
            pub mod weight_v2 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Weight {
                    #[codec(compact)]
                    pub ref_time: ::core::primitive::u64,
                    #[codec(compact)]
                    pub proof_size: ::core::primitive::u64,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RuntimeDbWeight {
                pub read: ::core::primitive::u64,
                pub write: ::core::primitive::u64,
            }
        }
        pub mod xcm {
            use super::runtime_types;
            pub mod double_encoded {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DoubleEncoded {
                    pub encoded: ::std::vec::Vec<::core::primitive::u8>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DoubleEncoded2 {
                    pub encoded: ::std::vec::Vec<::core::primitive::u8>,
                }
            }
            pub mod v2 {
                use super::runtime_types;
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 1)]
                        AccountId32 {
                            network: runtime_types::xcm::v2::NetworkId,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        AccountIndex64 {
                            network: runtime_types::xcm::v2::NetworkId,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 3)]
                        AccountKey20 {
                            network: runtime_types::xcm::v2::NetworkId,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 4)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 5)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 6)]
                        GeneralKey(
                            runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                                ::core::primitive::u8,
                            >,
                        ),
                        #[codec(index = 7)]
                        OnlyChild,
                        #[codec(index = 8)]
                        Plurality {
                            id: runtime_types::xcm::v2::BodyId,
                            part: runtime_types::xcm::v2::BodyPart,
                        },
                    }
                }
                pub mod multiasset {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetId {
                        #[codec(index = 0)]
                        Concrete(runtime_types::xcm::v2::multilocation::MultiLocation),
                        #[codec(index = 1)]
                        Abstract(::std::vec::Vec<::core::primitive::u8>),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetInstance {
                        #[codec(index = 0)]
                        Undefined,
                        #[codec(index = 1)]
                        Index(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 2)]
                        Array4([::core::primitive::u8; 4usize]),
                        #[codec(index = 3)]
                        Array8([::core::primitive::u8; 8usize]),
                        #[codec(index = 4)]
                        Array16([::core::primitive::u8; 16usize]),
                        #[codec(index = 5)]
                        Array32([::core::primitive::u8; 32usize]),
                        #[codec(index = 6)]
                        Blob(::std::vec::Vec<::core::primitive::u8>),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Fungibility {
                        #[codec(index = 0)]
                        Fungible(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 1)]
                        NonFungible(runtime_types::xcm::v2::multiasset::AssetInstance),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAsset {
                        pub id: runtime_types::xcm::v2::multiasset::AssetId,
                        pub fun: runtime_types::xcm::v2::multiasset::Fungibility,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum MultiAssetFilter {
                        #[codec(index = 0)]
                        Definite(runtime_types::xcm::v2::multiasset::MultiAssets),
                        #[codec(index = 1)]
                        Wild(runtime_types::xcm::v2::multiasset::WildMultiAsset),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAssets(
                        pub ::std::vec::Vec<runtime_types::xcm::v2::multiasset::MultiAsset>,
                    );
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildFungibility {
                        #[codec(index = 0)]
                        Fungible,
                        #[codec(index = 1)]
                        NonFungible,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildMultiAsset {
                        #[codec(index = 0)]
                        All,
                        #[codec(index = 1)]
                        AllOf {
                            id: runtime_types::xcm::v2::multiasset::AssetId,
                            fun: runtime_types::xcm::v2::multiasset::WildFungibility,
                        },
                    }
                }
                pub mod multilocation {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junctions {
                        #[codec(index = 0)]
                        Here,
                        #[codec(index = 1)]
                        X1(runtime_types::xcm::v2::junction::Junction),
                        #[codec(index = 2)]
                        X2(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 3)]
                        X3(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 4)]
                        X4(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 5)]
                        X5(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 6)]
                        X6(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 7)]
                        X7(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                        #[codec(index = 8)]
                        X8(
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                            runtime_types::xcm::v2::junction::Junction,
                        ),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiLocation {
                        pub parents: ::core::primitive::u8,
                        pub interior: runtime_types::xcm::v2::multilocation::Junctions,
                    }
                }
                pub mod traits {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Error {
                        #[codec(index = 0)]
                        Overflow,
                        #[codec(index = 1)]
                        Unimplemented,
                        #[codec(index = 2)]
                        UntrustedReserveLocation,
                        #[codec(index = 3)]
                        UntrustedTeleportLocation,
                        #[codec(index = 4)]
                        MultiLocationFull,
                        #[codec(index = 5)]
                        MultiLocationNotInvertible,
                        #[codec(index = 6)]
                        BadOrigin,
                        #[codec(index = 7)]
                        InvalidLocation,
                        #[codec(index = 8)]
                        AssetNotFound,
                        #[codec(index = 9)]
                        FailedToTransactAsset,
                        #[codec(index = 10)]
                        NotWithdrawable,
                        #[codec(index = 11)]
                        LocationCannotHold,
                        #[codec(index = 12)]
                        ExceedsMaxMessageSize,
                        #[codec(index = 13)]
                        DestinationUnsupported,
                        #[codec(index = 14)]
                        Transport,
                        #[codec(index = 15)]
                        Unroutable,
                        #[codec(index = 16)]
                        UnknownClaim,
                        #[codec(index = 17)]
                        FailedToDecode,
                        #[codec(index = 18)]
                        MaxWeightInvalid,
                        #[codec(index = 19)]
                        NotHoldingFees,
                        #[codec(index = 20)]
                        TooExpensive,
                        #[codec(index = 21)]
                        Trap(::core::primitive::u64),
                        #[codec(index = 22)]
                        UnhandledXcmVersion,
                        #[codec(index = 23)]
                        WeightLimitReached(::core::primitive::u64),
                        #[codec(index = 24)]
                        Barrier,
                        #[codec(index = 25)]
                        WeightNotComputable,
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum BodyId {
                    #[codec(index = 0)]
                    Unit,
                    #[codec(index = 1)]
                    Named(
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    Index(#[codec(compact)] ::core::primitive::u32),
                    #[codec(index = 3)]
                    Executive,
                    #[codec(index = 4)]
                    Technical,
                    #[codec(index = 5)]
                    Legislative,
                    #[codec(index = 6)]
                    Judicial,
                    #[codec(index = 7)]
                    Defense,
                    #[codec(index = 8)]
                    Administration,
                    #[codec(index = 9)]
                    Treasury,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum BodyPart {
                    #[codec(index = 0)]
                    Voice,
                    #[codec(index = 1)]
                    Members {
                        #[codec(compact)]
                        count: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    Fraction {
                        #[codec(compact)]
                        nom: ::core::primitive::u32,
                        #[codec(compact)]
                        denom: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    AtLeastProportion {
                        #[codec(compact)]
                        nom: ::core::primitive::u32,
                        #[codec(compact)]
                        denom: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    MoreThanProportion {
                        #[codec(compact)]
                        nom: ::core::primitive::u32,
                        #[codec(compact)]
                        denom: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v2::Response,
                        #[codec(compact)]
                        max_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_type: runtime_types::xcm::v2::OriginKind,
                        #[codec(compact)]
                        require_weight_at_most: ::core::primitive::u64,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v2::multilocation::Junctions),
                    #[codec(index = 12)]
                    ReportError {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        receive: runtime_types::xcm::v2::multiasset::MultiAssets,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        reserve: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 18)]
                    QueryHolding {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v2::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v2::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v2::Xcm),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v2::Xcm),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        ticket: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction2 {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v2::Response,
                        #[codec(compact)]
                        max_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_type: runtime_types::xcm::v2::OriginKind,
                        #[codec(compact)]
                        require_weight_at_most: ::core::primitive::u64,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded2,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v2::multilocation::Junctions),
                    #[codec(index = 12)]
                    ReportError {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_assets: ::core::primitive::u32,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        receive: runtime_types::xcm::v2::multiasset::MultiAssets,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        reserve: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v2::Xcm,
                    },
                    #[codec(index = 18)]
                    QueryHolding {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        dest: runtime_types::xcm::v2::multilocation::MultiLocation,
                        assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v2::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v2::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v2::Xcm2),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v2::Xcm2),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v2::multiasset::MultiAssets,
                        ticket: runtime_types::xcm::v2::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        #[codec(compact)]
                        max_response_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum NetworkId {
                    #[codec(index = 0)]
                    Any,
                    #[codec(index = 1)]
                    Named(
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    Polkadot,
                    #[codec(index = 3)]
                    Kusama,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum OriginKind {
                    #[codec(index = 0)]
                    Native,
                    #[codec(index = 1)]
                    SovereignAccount,
                    #[codec(index = 2)]
                    Superuser,
                    #[codec(index = 3)]
                    Xcm,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Response {
                    #[codec(index = 0)]
                    Null,
                    #[codec(index = 1)]
                    Assets(runtime_types::xcm::v2::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ExecutionResult(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v2::traits::Error,
                        )>,
                    ),
                    #[codec(index = 3)]
                    Version(::core::primitive::u32),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum WeightLimit {
                    #[codec(index = 0)]
                    Unlimited,
                    #[codec(index = 1)]
                    Limited(#[codec(compact)] ::core::primitive::u64),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v2::Instruction>);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm2(pub ::std::vec::Vec<runtime_types::xcm::v2::Instruction2>);
            }
            pub mod v3 {
                use super::runtime_types;
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum BodyId {
                        #[codec(index = 0)]
                        Unit,
                        #[codec(index = 1)]
                        Moniker([::core::primitive::u8; 4usize]),
                        #[codec(index = 2)]
                        Index(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        Executive,
                        #[codec(index = 4)]
                        Technical,
                        #[codec(index = 5)]
                        Legislative,
                        #[codec(index = 6)]
                        Judicial,
                        #[codec(index = 7)]
                        Defense,
                        #[codec(index = 8)]
                        Administration,
                        #[codec(index = 9)]
                        Treasury,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum BodyPart {
                        #[codec(index = 0)]
                        Voice,
                        #[codec(index = 1)]
                        Members {
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                        #[codec(index = 2)]
                        Fraction {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                        #[codec(index = 3)]
                        AtLeastProportion {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                        #[codec(index = 4)]
                        MoreThanProportion {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 1)]
                        AccountId32 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        AccountIndex64 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 3)]
                        AccountKey20 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 4)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 5)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 6)]
                        GeneralKey {
                            length: ::core::primitive::u8,
                            data: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 7)]
                        OnlyChild,
                        #[codec(index = 8)]
                        Plurality {
                            id: runtime_types::xcm::v3::junction::BodyId,
                            part: runtime_types::xcm::v3::junction::BodyPart,
                        },
                        #[codec(index = 9)]
                        GlobalConsensus(runtime_types::xcm::v3::junction::NetworkId),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum NetworkId {
                        #[codec(index = 0)]
                        ByGenesis([::core::primitive::u8; 32usize]),
                        #[codec(index = 1)]
                        ByFork {
                            block_number: ::core::primitive::u64,
                            block_hash: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        Polkadot,
                        #[codec(index = 3)]
                        Kusama,
                        #[codec(index = 4)]
                        Westend,
                        #[codec(index = 5)]
                        Rococo,
                        #[codec(index = 6)]
                        Wococo,
                        #[codec(index = 7)]
                        Ethereum {
                            #[codec(compact)]
                            chain_id: ::core::primitive::u64,
                        },
                        #[codec(index = 8)]
                        BitcoinCore,
                        #[codec(index = 9)]
                        BitcoinCash,
                    }
                }
                pub mod junctions {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Junctions {
                        #[codec(index = 0)]
                        Here,
                        #[codec(index = 1)]
                        X1(runtime_types::xcm::v3::junction::Junction),
                        #[codec(index = 2)]
                        X2(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 3)]
                        X3(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 4)]
                        X4(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 5)]
                        X5(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 6)]
                        X6(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 7)]
                        X7(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 8)]
                        X8(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                    }
                }
                pub mod multiasset {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetId {
                        #[codec(index = 0)]
                        Concrete(runtime_types::xcm::v3::multilocation::MultiLocation),
                        #[codec(index = 1)]
                        Abstract([::core::primitive::u8; 32usize]),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum AssetInstance {
                        #[codec(index = 0)]
                        Undefined,
                        #[codec(index = 1)]
                        Index(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 2)]
                        Array4([::core::primitive::u8; 4usize]),
                        #[codec(index = 3)]
                        Array8([::core::primitive::u8; 8usize]),
                        #[codec(index = 4)]
                        Array16([::core::primitive::u8; 16usize]),
                        #[codec(index = 5)]
                        Array32([::core::primitive::u8; 32usize]),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Fungibility {
                        #[codec(index = 0)]
                        Fungible(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 1)]
                        NonFungible(runtime_types::xcm::v3::multiasset::AssetInstance),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAsset {
                        pub id: runtime_types::xcm::v3::multiasset::AssetId,
                        pub fun: runtime_types::xcm::v3::multiasset::Fungibility,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum MultiAssetFilter {
                        #[codec(index = 0)]
                        Definite(runtime_types::xcm::v3::multiasset::MultiAssets),
                        #[codec(index = 1)]
                        Wild(runtime_types::xcm::v3::multiasset::WildMultiAsset),
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiAssets(
                        pub ::std::vec::Vec<runtime_types::xcm::v3::multiasset::MultiAsset>,
                    );
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildFungibility {
                        #[codec(index = 0)]
                        Fungible,
                        #[codec(index = 1)]
                        NonFungible,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum WildMultiAsset {
                        #[codec(index = 0)]
                        All,
                        #[codec(index = 1)]
                        AllOf {
                            id: runtime_types::xcm::v3::multiasset::AssetId,
                            fun: runtime_types::xcm::v3::multiasset::WildFungibility,
                        },
                        #[codec(index = 2)]
                        AllCounted(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        AllOfCounted {
                            id: runtime_types::xcm::v3::multiasset::AssetId,
                            fun: runtime_types::xcm::v3::multiasset::WildFungibility,
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                    }
                }
                pub mod multilocation {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct MultiLocation {
                        pub parents: ::core::primitive::u8,
                        pub interior: runtime_types::xcm::v3::junctions::Junctions,
                    }
                }
                pub mod traits {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Error {
                        #[codec(index = 0)]
                        Overflow,
                        #[codec(index = 1)]
                        Unimplemented,
                        #[codec(index = 2)]
                        UntrustedReserveLocation,
                        #[codec(index = 3)]
                        UntrustedTeleportLocation,
                        #[codec(index = 4)]
                        LocationFull,
                        #[codec(index = 5)]
                        LocationNotInvertible,
                        #[codec(index = 6)]
                        BadOrigin,
                        #[codec(index = 7)]
                        InvalidLocation,
                        #[codec(index = 8)]
                        AssetNotFound,
                        #[codec(index = 9)]
                        FailedToTransactAsset,
                        #[codec(index = 10)]
                        NotWithdrawable,
                        #[codec(index = 11)]
                        LocationCannotHold,
                        #[codec(index = 12)]
                        ExceedsMaxMessageSize,
                        #[codec(index = 13)]
                        DestinationUnsupported,
                        #[codec(index = 14)]
                        Transport,
                        #[codec(index = 15)]
                        Unroutable,
                        #[codec(index = 16)]
                        UnknownClaim,
                        #[codec(index = 17)]
                        FailedToDecode,
                        #[codec(index = 18)]
                        MaxWeightInvalid,
                        #[codec(index = 19)]
                        NotHoldingFees,
                        #[codec(index = 20)]
                        TooExpensive,
                        #[codec(index = 21)]
                        Trap(::core::primitive::u64),
                        #[codec(index = 22)]
                        ExpectationFalse,
                        #[codec(index = 23)]
                        PalletNotFound,
                        #[codec(index = 24)]
                        NameMismatch,
                        #[codec(index = 25)]
                        VersionIncompatible,
                        #[codec(index = 26)]
                        HoldingWouldOverflow,
                        #[codec(index = 27)]
                        ExportError,
                        #[codec(index = 28)]
                        ReanchorFailed,
                        #[codec(index = 29)]
                        NoDeal,
                        #[codec(index = 30)]
                        FeesNotMet,
                        #[codec(index = 31)]
                        LockError,
                        #[codec(index = 32)]
                        NoPermission,
                        #[codec(index = 33)]
                        Unanchored,
                        #[codec(index = 34)]
                        NotDepositable,
                        #[codec(index = 35)]
                        UnhandledXcmVersion,
                        #[codec(index = 36)]
                        WeightLimitReached(runtime_types::sp_weights::weight_v2::Weight),
                        #[codec(index = 37)]
                        Barrier,
                        #[codec(index = 38)]
                        WeightNotComputable,
                        #[codec(index = 39)]
                        ExceedsStackLimit,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Outcome {
                        #[codec(index = 0)]
                        Complete(runtime_types::sp_weights::weight_v2::Weight),
                        #[codec(index = 1)]
                        Incomplete(
                            runtime_types::sp_weights::weight_v2::Weight,
                            runtime_types::xcm::v3::traits::Error,
                        ),
                        #[codec(index = 2)]
                        Error(runtime_types::xcm::v3::traits::Error),
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v3::Response,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                        querier: ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_kind: runtime_types::xcm::v2::OriginKind,
                        require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v3::junctions::Junctions),
                    #[codec(index = 12)]
                    ReportError(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        want: runtime_types::xcm::v3::multiasset::MultiAssets,
                        maximal: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        reserve: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 18)]
                    ReportHolding {
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v3::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v3::Xcm),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v3::Xcm),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        ticket: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                    #[codec(index = 28)]
                    BurnAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 29)]
                    ExpectAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 30)]
                    ExpectOrigin(
                        ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 31)]
                    ExpectError(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 32)]
                    ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
                    #[codec(index = 33)]
                    QueryPallet {
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                    },
                    #[codec(index = 34)]
                    ExpectPallet {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(compact)]
                        crate_major: ::core::primitive::u32,
                        #[codec(compact)]
                        min_crate_minor: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    ReportTransactStatus(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 36)]
                    ClearTransactStatus,
                    #[codec(index = 37)]
                    UniversalOrigin(runtime_types::xcm::v3::junction::Junction),
                    #[codec(index = 38)]
                    ExportMessage {
                        network: runtime_types::xcm::v3::junction::NetworkId,
                        destination: runtime_types::xcm::v3::junctions::Junctions,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 39)]
                    LockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        unlocker: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 40)]
                    UnlockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        target: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 41)]
                    NoteUnlockable {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        owner: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 42)]
                    RequestUnlock {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        locker: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 43)]
                    SetFeesMode {
                        jit_withdraw: ::core::primitive::bool,
                    },
                    #[codec(index = 44)]
                    SetTopic([::core::primitive::u8; 32usize]),
                    #[codec(index = 45)]
                    ClearTopic,
                    #[codec(index = 46)]
                    AliasOrigin(runtime_types::xcm::v3::multilocation::MultiLocation),
                    #[codec(index = 47)]
                    UnpaidExecution {
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                        check_origin: ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Instruction2 {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v3::Response,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                        querier: ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_kind: runtime_types::xcm::v2::OriginKind,
                        require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded2,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v3::junctions::Junctions),
                    #[codec(index = 12)]
                    ReportError(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        beneficiary: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        want: runtime_types::xcm::v3::multiasset::MultiAssets,
                        maximal: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        reserve: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 18)]
                    ReportHolding {
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v3::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v3::Xcm2),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v3::Xcm2),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        ticket: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                    #[codec(index = 28)]
                    BurnAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 29)]
                    ExpectAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 30)]
                    ExpectOrigin(
                        ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 31)]
                    ExpectError(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 32)]
                    ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
                    #[codec(index = 33)]
                    QueryPallet {
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                    },
                    #[codec(index = 34)]
                    ExpectPallet {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        module_name: ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(compact)]
                        crate_major: ::core::primitive::u32,
                        #[codec(compact)]
                        min_crate_minor: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    ReportTransactStatus(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 36)]
                    ClearTransactStatus,
                    #[codec(index = 37)]
                    UniversalOrigin(runtime_types::xcm::v3::junction::Junction),
                    #[codec(index = 38)]
                    ExportMessage {
                        network: runtime_types::xcm::v3::junction::NetworkId,
                        destination: runtime_types::xcm::v3::junctions::Junctions,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 39)]
                    LockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        unlocker: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 40)]
                    UnlockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        target: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 41)]
                    NoteUnlockable {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        owner: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 42)]
                    RequestUnlock {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        locker: runtime_types::xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 43)]
                    SetFeesMode {
                        jit_withdraw: ::core::primitive::bool,
                    },
                    #[codec(index = 44)]
                    SetTopic([::core::primitive::u8; 32usize]),
                    #[codec(index = 45)]
                    ClearTopic,
                    #[codec(index = 46)]
                    AliasOrigin(runtime_types::xcm::v3::multilocation::MultiLocation),
                    #[codec(index = 47)]
                    UnpaidExecution {
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                        check_origin: ::core::option::Option<
                            runtime_types::xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum MaybeErrorCode {
                    #[codec(index = 0)]
                    Success,
                    #[codec(index = 1)]
                    Error(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    TruncatedError(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PalletInfo {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub module_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    #[codec(compact)]
                    pub major: ::core::primitive::u32,
                    #[codec(compact)]
                    pub minor: ::core::primitive::u32,
                    #[codec(compact)]
                    pub patch: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryResponseInfo {
                    pub destination: runtime_types::xcm::v3::multilocation::MultiLocation,
                    #[codec(compact)]
                    pub query_id: ::core::primitive::u64,
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Response {
                    #[codec(index = 0)]
                    Null,
                    #[codec(index = 1)]
                    Assets(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ExecutionResult(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 3)]
                    Version(::core::primitive::u32),
                    #[codec(index = 4)]
                    PalletsInfo(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::xcm::v3::PalletInfo,
                        >,
                    ),
                    #[codec(index = 5)]
                    DispatchResult(runtime_types::xcm::v3::MaybeErrorCode),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum WeightLimit {
                    #[codec(index = 0)]
                    Unlimited,
                    #[codec(index = 1)]
                    Limited(runtime_types::sp_weights::weight_v2::Weight),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm(pub ::std::vec::Vec<runtime_types::xcm::v3::Instruction>);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Xcm2(pub ::std::vec::Vec<runtime_types::xcm::v3::Instruction2>);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedAssetId {
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multiasset::AssetId),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedMultiAsset {
                #[codec(index = 1)]
                V2(runtime_types::xcm::v2::multiasset::MultiAsset),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multiasset::MultiAsset),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedMultiAssets {
                #[codec(index = 1)]
                V2(runtime_types::xcm::v2::multiasset::MultiAssets),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multiasset::MultiAssets),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedMultiLocation {
                #[codec(index = 1)]
                V2(runtime_types::xcm::v2::multilocation::MultiLocation),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multilocation::MultiLocation),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedResponse {
                #[codec(index = 2)]
                V2(runtime_types::xcm::v2::Response),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::Response),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedXcm {
                #[codec(index = 2)]
                V2(runtime_types::xcm::v2::Xcm),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::Xcm),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VersionedXcm2 {
                #[codec(index = 2)]
                V2(runtime_types::xcm::v2::Xcm2),
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::Xcm2),
            }
        }
        pub mod xcm_primitives {
            use super::runtime_types;
            pub mod ethereum_xcm {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum EthereumXcmFee {
                    #[codec(index = 0)]
                    Manual(runtime_types::xcm_primitives::ethereum_xcm::ManualEthereumXcmFee),
                    #[codec(index = 1)]
                    Auto,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum EthereumXcmTransaction {
                    #[codec(index = 0)]
                    V1(runtime_types::xcm_primitives::ethereum_xcm::EthereumXcmTransactionV1),
                    #[codec(index = 1)]
                    V2(runtime_types::xcm_primitives::ethereum_xcm::EthereumXcmTransactionV2),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EthereumXcmTransactionV1 {
                    pub gas_limit: runtime_types::primitive_types::U256,
                    pub fee_payment: runtime_types::xcm_primitives::ethereum_xcm::EthereumXcmFee,
                    pub action: runtime_types::ethereum::transaction::TransactionAction,
                    pub value: runtime_types::primitive_types::U256,
                    pub input: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub access_list: ::core::option::Option<
                        ::std::vec::Vec<(
                            ::subxt::utils::H160,
                            ::std::vec::Vec<::subxt::utils::H256>,
                        )>,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EthereumXcmTransactionV2 {
                    pub gas_limit: runtime_types::primitive_types::U256,
                    pub action: runtime_types::ethereum::transaction::TransactionAction,
                    pub value: runtime_types::primitive_types::U256,
                    pub input: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub access_list: ::core::option::Option<
                        ::std::vec::Vec<(
                            ::subxt::utils::H160,
                            ::std::vec::Vec<::subxt::utils::H256>,
                        )>,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ManualEthereumXcmFee {
                    pub gas_price: ::core::option::Option<runtime_types::primitive_types::U256>,
                    pub max_fee_per_gas:
                        ::core::option::Option<runtime_types::primitive_types::U256>,
                }
            }
        }
    }
}
